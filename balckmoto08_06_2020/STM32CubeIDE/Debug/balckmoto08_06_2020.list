
balckmoto08_06_2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d854  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800d9dc  0800d9dc  0001d9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcd4  0800dcd4  0002069c  2**0
                  CONTENTS
  4 .ARM          00000000  0800dcd4  0800dcd4  0002069c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dcd4  0800dcd4  0002069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcd4  0800dcd4  0001dcd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcd8  0800dcd8  0001dcd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000069c  20000000  0800dcdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  2000069c  0800e378  0002069c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab0  0800e378  00020ab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002069c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001fd91  00000000  00000000  000206cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00035ba4  00000000  00000000  0004045d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00004dfe  00000000  00000000  00076001  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001b50  00000000  00000000  0007ae00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000ce26c  00000000  00000000  0007c950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001908  00000000  00000000  0014abc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00024e4b  00000000  00000000  0014c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f7  00000000  00000000  00171313  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007124  00000000  00000000  0017140c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000069c 	.word	0x2000069c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d9c4 	.word	0x0800d9c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200006a0 	.word	0x200006a0
 80001c4:	0800d9c4 	.word	0x0800d9c4

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0xe>)
	adds	r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
	ldr	r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopForever+0x16>)
	cmp	r2, r3
 80001ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f004 fca5 	bl	8004b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f00d fbb9 	bl	800d96c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f000 f80e 	bl	800021a <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000204:	0800dcdc 	.word	0x0800dcdc
	ldr	r0, =_sdata
 8000208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800020c:	2000069c 	.word	0x2000069c
	ldr	r2, =_sbss
 8000210:	2000069c 	.word	0x2000069c
	ldr	r3, = _ebss
 8000214:	20000ab0 	.word	0x20000ab0

08000218 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC3_IRQHandler>

0800021a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021a:	b580      	push	{r7, lr}
 800021c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f004 fca5 	bl	8004b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f815 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 fb63 	bl	80008f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800022a:	f000 f893 	bl	8000354 <MX_ADC1_Init>
  MX_ADC3_Init();
 800022e:	f000 f94d 	bl	80004cc <MX_ADC3_Init>
  MX_COMP2_Init();
 8000232:	f000 f9bd 	bl	80005b0 <MX_COMP2_Init>
  MX_COMP4_Init();
 8000236:	f000 f9eb 	bl	8000610 <MX_COMP4_Init>
  MX_COMP6_Init();
 800023a:	f000 fa19 	bl	8000670 <MX_COMP6_Init>
  MX_TIM1_Init();
 800023e:	f000 fa47 	bl	80006d0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000242:	f000 fb25 	bl	8000890 <MX_USART1_UART_Init>
  MX_MotorControl_Init();
 8000246:	f002 fc29 	bl	8002a9c <MX_MotorControl_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800024a:	f000 f85f 	bl	800030c <MX_NVIC_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024e:	e7fe      	b.n	800024e <main+0x34>

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b09e      	sub	sp, #120	; 0x78
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800025a:	2228      	movs	r2, #40	; 0x28
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f00d fba8 	bl	800d9b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
 8000270:	60da      	str	r2, [r3, #12]
 8000272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000274:	463b      	mov	r3, r7
 8000276:	223c      	movs	r2, #60	; 0x3c
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f00d fb9a 	bl	800d9b4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000280:	2301      	movs	r3, #1
 8000282:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000288:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028e:	2301      	movs	r3, #1
 8000290:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000292:	2302      	movs	r3, #2
 8000294:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800029c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002a0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002a6:	4618      	mov	r0, r3
 80002a8:	f006 f984 	bl	80065b4 <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002b2:	f000 fb4d 	bl	8000950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	230f      	movs	r3, #15
 80002b8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ba:	2302      	movs	r3, #2
 80002bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002d0:	2102      	movs	r1, #2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f007 f876 	bl	80073c4 <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002de:	f000 fb37 	bl	8000950 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 80002e2:	f241 0301 	movw	r3, #4097	; 0x1001
 80002e6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 80002ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002f0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f2:	463b      	mov	r3, r7
 80002f4:	4618      	mov	r0, r3
 80002f6:	f007 fa9b 	bl	8007830 <HAL_RCCEx_PeriphCLKConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000300:	f000 fb26 	bl	8000950 <Error_Handler>
  }
}
 8000304:	bf00      	nop
 8000306:	3778      	adds	r7, #120	; 0x78
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* TIM1_BRK_TIM15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000310:	2201      	movs	r2, #1
 8000312:	2104      	movs	r1, #4
 8000314:	2018      	movs	r0, #24
 8000316:	f005 ff90 	bl	800623a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800031a:	2018      	movs	r0, #24
 800031c:	f005 ffa9 	bl	8006272 <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000320:	2200      	movs	r2, #0
 8000322:	2100      	movs	r1, #0
 8000324:	2019      	movs	r0, #25
 8000326:	f005 ff88 	bl	800623a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800032a:	2019      	movs	r0, #25
 800032c:	f005 ffa1 	bl	8006272 <HAL_NVIC_EnableIRQ>
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000330:	2200      	movs	r2, #0
 8000332:	2102      	movs	r1, #2
 8000334:	2012      	movs	r0, #18
 8000336:	f005 ff80 	bl	800623a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800033a:	2012      	movs	r0, #18
 800033c:	f005 ff99 	bl	8006272 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 1);
 8000340:	2201      	movs	r2, #1
 8000342:	2103      	movs	r1, #3
 8000344:	2025      	movs	r0, #37	; 0x25
 8000346:	f005 ff78 	bl	800623a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800034a:	2025      	movs	r0, #37	; 0x25
 800034c:	f005 ff91 	bl	8006272 <HAL_NVIC_EnableIRQ>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}

08000354 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b094      	sub	sp, #80	; 0x50
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800035a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000366:	f107 031c 	add.w	r3, r7, #28
 800036a:	2228      	movs	r2, #40	; 0x28
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f00d fb20 	bl	800d9b4 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]
 8000382:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000384:	4b50      	ldr	r3, [pc, #320]	; (80004c8 <MX_ADC1_Init+0x174>)
 8000386:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800038a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800038c:	4b4e      	ldr	r3, [pc, #312]	; (80004c8 <MX_ADC1_Init+0x174>)
 800038e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000392:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000394:	4b4c      	ldr	r3, [pc, #304]	; (80004c8 <MX_ADC1_Init+0x174>)
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800039a:	4b4b      	ldr	r3, [pc, #300]	; (80004c8 <MX_ADC1_Init+0x174>)
 800039c:	2201      	movs	r2, #1
 800039e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003a0:	4b49      	ldr	r3, [pc, #292]	; (80004c8 <MX_ADC1_Init+0x174>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003a6:	4b48      	ldr	r3, [pc, #288]	; (80004c8 <MX_ADC1_Init+0x174>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003ae:	4b46      	ldr	r3, [pc, #280]	; (80004c8 <MX_ADC1_Init+0x174>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b4:	4b44      	ldr	r3, [pc, #272]	; (80004c8 <MX_ADC1_Init+0x174>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80003ba:	4b43      	ldr	r3, [pc, #268]	; (80004c8 <MX_ADC1_Init+0x174>)
 80003bc:	2220      	movs	r2, #32
 80003be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80003c0:	4b41      	ldr	r3, [pc, #260]	; (80004c8 <MX_ADC1_Init+0x174>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003c6:	4b40      	ldr	r3, [pc, #256]	; (80004c8 <MX_ADC1_Init+0x174>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ce:	4b3e      	ldr	r3, [pc, #248]	; (80004c8 <MX_ADC1_Init+0x174>)
 80003d0:	2204      	movs	r2, #4
 80003d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003d4:	4b3c      	ldr	r3, [pc, #240]	; (80004c8 <MX_ADC1_Init+0x174>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003da:	4b3b      	ldr	r3, [pc, #236]	; (80004c8 <MX_ADC1_Init+0x174>)
 80003dc:	2201      	movs	r2, #1
 80003de:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003e0:	4839      	ldr	r0, [pc, #228]	; (80004c8 <MX_ADC1_Init+0x174>)
 80003e2:	f004 fc29 	bl	8004c38 <HAL_ADC_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80003ec:	f000 fab0 	bl	8000950 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003f0:	2300      	movs	r3, #0
 80003f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003f8:	4619      	mov	r1, r3
 80003fa:	4833      	ldr	r0, [pc, #204]	; (80004c8 <MX_ADC1_Init+0x174>)
 80003fc:	f005 fc70 	bl	8005ce0 <HAL_ADCEx_MultiModeConfigChannel>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000406:	f000 faa3 	bl	8000950 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800040a:	2301      	movs	r3, #1
 800040c:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800040e:	2301      	movs	r3, #1
 8000410:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000412:	2300      	movs	r3, #0
 8000414:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000416:	2303      	movs	r3, #3
 8000418:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800041a:	2303      	movs	r3, #3
 800041c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800041e:	2340      	movs	r3, #64	; 0x40
 8000420:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000422:	2300      	movs	r3, #0
 8000424:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000426:	2300      	movs	r3, #0
 8000428:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800042c:	2300      	movs	r3, #0
 800042e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  sConfigInjected.QueueInjectedContext = ENABLE;
 8000432:	2301      	movs	r3, #1
 8000434:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  sConfigInjected.InjectedOffset = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800043c:	2300      	movs	r3, #0
 800043e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000440:	f107 031c 	add.w	r3, r7, #28
 8000444:	4619      	mov	r1, r3
 8000446:	4820      	ldr	r0, [pc, #128]	; (80004c8 <MX_ADC1_Init+0x174>)
 8000448:	f005 f8c2 	bl	80055d0 <HAL_ADCEx_InjectedConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000452:	f000 fa7d 	bl	8000950 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000456:	2302      	movs	r3, #2
 8000458:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800045a:	2302      	movs	r3, #2
 800045c:	623b      	str	r3, [r7, #32]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800045e:	f107 031c 	add.w	r3, r7, #28
 8000462:	4619      	mov	r1, r3
 8000464:	4818      	ldr	r0, [pc, #96]	; (80004c8 <MX_ADC1_Init+0x174>)
 8000466:	f005 f8b3 	bl	80055d0 <HAL_ADCEx_InjectedConfigChannel>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000470:	f000 fa6e 	bl	8000950 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000474:	2303      	movs	r3, #3
 8000476:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000478:	2303      	movs	r3, #3
 800047a:	623b      	str	r3, [r7, #32]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800047c:	f107 031c 	add.w	r3, r7, #28
 8000480:	4619      	mov	r1, r3
 8000482:	4811      	ldr	r0, [pc, #68]	; (80004c8 <MX_ADC1_Init+0x174>)
 8000484:	f005 f8a4 	bl	80055d0 <HAL_ADCEx_InjectedConfigChannel>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800048e:	f000 fa5f 	bl	8000950 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000492:	2304      	movs	r3, #4
 8000494:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000496:	2301      	movs	r3, #1
 8000498:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800049a:	2300      	movs	r3, #0
 800049c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 800049e:	2304      	movs	r3, #4
 80004a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	4619      	mov	r1, r3
 80004ae:	4806      	ldr	r0, [pc, #24]	; (80004c8 <MX_ADC1_Init+0x174>)
 80004b0:	f004 fda2 	bl	8004ff8 <HAL_ADC_ConfigChannel>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 80004ba:	f000 fa49 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	3750      	adds	r7, #80	; 0x50
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000748 	.word	0x20000748

080004cc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
 80004ec:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 80004ee:	4b2e      	ldr	r3, [pc, #184]	; (80005a8 <MX_ADC3_Init+0xdc>)
 80004f0:	4a2e      	ldr	r2, [pc, #184]	; (80005ac <MX_ADC3_Init+0xe0>)
 80004f2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80004f4:	4b2c      	ldr	r3, [pc, #176]	; (80005a8 <MX_ADC3_Init+0xdc>)
 80004f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004fa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80004fc:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <MX_ADC3_Init+0xdc>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000502:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <MX_ADC3_Init+0xdc>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000508:	4b27      	ldr	r3, [pc, #156]	; (80005a8 <MX_ADC3_Init+0xdc>)
 800050a:	2200      	movs	r2, #0
 800050c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800050e:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <MX_ADC3_Init+0xdc>)
 8000510:	2200      	movs	r2, #0
 8000512:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000516:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <MX_ADC3_Init+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051c:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <MX_ADC3_Init+0xdc>)
 800051e:	2201      	movs	r2, #1
 8000520:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000522:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <MX_ADC3_Init+0xdc>)
 8000524:	2220      	movs	r2, #32
 8000526:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <MX_ADC3_Init+0xdc>)
 800052a:	2201      	movs	r2, #1
 800052c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <MX_ADC3_Init+0xdc>)
 8000530:	2200      	movs	r2, #0
 8000532:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_ADC3_Init+0xdc>)
 8000538:	2204      	movs	r2, #4
 800053a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_ADC3_Init+0xdc>)
 800053e:	2200      	movs	r2, #0
 8000540:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <MX_ADC3_Init+0xdc>)
 8000544:	2201      	movs	r2, #1
 8000546:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000548:	4817      	ldr	r0, [pc, #92]	; (80005a8 <MX_ADC3_Init+0xdc>)
 800054a:	f004 fb75 	bl	8004c38 <HAL_ADC_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8000554:	f000 f9fc 	bl	8000950 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800055c:	f107 031c 	add.w	r3, r7, #28
 8000560:	4619      	mov	r1, r3
 8000562:	4811      	ldr	r0, [pc, #68]	; (80005a8 <MX_ADC3_Init+0xdc>)
 8000564:	f005 fbbc 	bl	8005ce0 <HAL_ADCEx_MultiModeConfigChannel>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_ADC3_Init+0xa6>
  {
    Error_Handler();
 800056e:	f000 f9ef 	bl	8000950 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000572:	2305      	movs	r3, #5
 8000574:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000576:	2301      	movs	r3, #1
 8000578:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 800057e:	2304      	movs	r3, #4
 8000580:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4619      	mov	r1, r3
 800058e:	4806      	ldr	r0, [pc, #24]	; (80005a8 <MX_ADC3_Init+0xdc>)
 8000590:	f004 fd32 	bl	8004ff8 <HAL_ADC_ConfigChannel>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 800059a:	f000 f9d9 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	; 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000798 	.word	0x20000798
 80005ac:	50000400 	.word	0x50000400

080005b0 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_COMP2_Init+0x58>)
 80005b6:	4a15      	ldr	r2, [pc, #84]	; (800060c <MX_COMP2_Init+0x5c>)
 80005b8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_1_2VREFINT;
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <MX_COMP2_Init+0x58>)
 80005bc:	2210      	movs	r2, #16
 80005be:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_COMP2_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <MX_COMP2_Init+0x58>)
 80005c8:	f640 027f 	movw	r2, #2175	; 0x87f
 80005cc:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_COMP2_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_COMP2_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MX_COMP2_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_COMP2_Init+0x58>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_COMP2_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	621a      	str	r2, [r3, #32]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_COMP2_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_COMP2_Init+0x58>)
 80005f4:	f005 fcc6 	bl	8005f84 <HAL_COMP_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 80005fe:	f000 f9a7 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200008a8 	.word	0x200008a8
 800060c:	40010020 	.word	0x40010020

08000610 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_COMP4_Init+0x58>)
 8000616:	4a15      	ldr	r2, [pc, #84]	; (800066c <MX_COMP4_Init+0x5c>)
 8000618:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_1_2VREFINT;
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_COMP4_Init+0x58>)
 800061c:	2210      	movs	r2, #16
 800061e:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_COMP4_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_COMP4_Init+0x58>)
 8000628:	f640 027f 	movw	r2, #2175	; 0x87f
 800062c:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_COMP4_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_COMP4_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_COMP4_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_HIGHSPEED;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_COMP4_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_COMP4_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_COMP4_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_COMP4_Init+0x58>)
 8000654:	f005 fc96 	bl	8005f84 <HAL_COMP_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_COMP4_Init+0x52>
  {
    Error_Handler();
 800065e:	f000 f977 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000718 	.word	0x20000718
 800066c:	40010028 	.word	0x40010028

08000670 <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_COMP6_Init+0x58>)
 8000676:	4a15      	ldr	r2, [pc, #84]	; (80006cc <MX_COMP6_Init+0x5c>)
 8000678:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InvertingInput = COMP_INVERTINGINPUT_1_2VREFINT;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_COMP6_Init+0x58>)
 800067c:	2210      	movs	r2, #16
 800067e:	605a      	str	r2, [r3, #4]
  hcomp6.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_COMP6_Init+0x58>)
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	609a      	str	r2, [r3, #8]
  hcomp6.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_COMP6_Init+0x58>)
 8000688:	f640 027f 	movw	r2, #2175	; 0x87f
 800068c:	60da      	str	r2, [r3, #12]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_COMP6_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_COMP6_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_COMP6_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  hcomp6.Init.Mode = COMP_MODE_HIGHSPEED;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_COMP6_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  hcomp6.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_COMP6_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_COMP6_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_COMP6_Init+0x58>)
 80006b4:	f005 fc66 	bl	8005f84 <HAL_COMP_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_COMP6_Init+0x52>
  {
    Error_Handler();
 80006be:	f000 f947 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200006e8 	.word	0x200006e8
 80006cc:	40010030 	.word	0x40010030

080006d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09a      	sub	sp, #104	; 0x68
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
 8000702:	615a      	str	r2, [r3, #20]
 8000704:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000706:	463b      	mov	r3, r7
 8000708:	222c      	movs	r2, #44	; 0x2c
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f00d f951 	bl	800d9b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000712:	4b5d      	ldr	r3, [pc, #372]	; (8000888 <MX_TIM1_Init+0x1b8>)
 8000714:	4a5d      	ldr	r2, [pc, #372]	; (800088c <MX_TIM1_Init+0x1bc>)
 8000716:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000718:	4b5b      	ldr	r3, [pc, #364]	; (8000888 <MX_TIM1_Init+0x1b8>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800071e:	4b5a      	ldr	r3, [pc, #360]	; (8000888 <MX_TIM1_Init+0x1b8>)
 8000720:	2220      	movs	r2, #32
 8000722:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000724:	4b58      	ldr	r3, [pc, #352]	; (8000888 <MX_TIM1_Init+0x1b8>)
 8000726:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800072a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800072c:	4b56      	ldr	r3, [pc, #344]	; (8000888 <MX_TIM1_Init+0x1b8>)
 800072e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000732:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000734:	4b54      	ldr	r3, [pc, #336]	; (8000888 <MX_TIM1_Init+0x1b8>)
 8000736:	2203      	movs	r2, #3
 8000738:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073a:	4b53      	ldr	r3, [pc, #332]	; (8000888 <MX_TIM1_Init+0x1b8>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000740:	4851      	ldr	r0, [pc, #324]	; (8000888 <MX_TIM1_Init+0x1b8>)
 8000742:	f007 fa25 	bl	8007b90 <HAL_TIM_Base_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 800074c:	f000 f900 	bl	8000950 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000750:	484d      	ldr	r0, [pc, #308]	; (8000888 <MX_TIM1_Init+0x1b8>)
 8000752:	f007 fa48 	bl	8007be6 <HAL_TIM_PWM_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800075c:	f000 f8f8 	bl	8000950 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000760:	2306      	movs	r3, #6
 8000762:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000764:	2310      	movs	r3, #16
 8000766:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000768:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800076c:	4619      	mov	r1, r3
 800076e:	4846      	ldr	r0, [pc, #280]	; (8000888 <MX_TIM1_Init+0x1b8>)
 8000770:	f007 fb86 	bl	8007e80 <HAL_TIM_SlaveConfigSynchro>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800077a:	f000 f8e9 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800077e:	2370      	movs	r3, #112	; 0x70
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800078a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800078e:	4619      	mov	r1, r3
 8000790:	483d      	ldr	r0, [pc, #244]	; (8000888 <MX_TIM1_Init+0x1b8>)
 8000792:	f008 f825 	bl	80087e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 800079c:	f000 f8d8 	bl	8000950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a0:	2360      	movs	r3, #96	; 0x60
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a8:	2300      	movs	r3, #0
 80007aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80007ac:	2308      	movs	r3, #8
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80007b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007c2:	2200      	movs	r2, #0
 80007c4:	4619      	mov	r1, r3
 80007c6:	4830      	ldr	r0, [pc, #192]	; (8000888 <MX_TIM1_Init+0x1b8>)
 80007c8:	f007 fa42 	bl	8007c50 <HAL_TIM_PWM_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80007d2:	f000 f8bd 	bl	8000950 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007da:	2204      	movs	r2, #4
 80007dc:	4619      	mov	r1, r3
 80007de:	482a      	ldr	r0, [pc, #168]	; (8000888 <MX_TIM1_Init+0x1b8>)
 80007e0:	f007 fa36 	bl	8007c50 <HAL_TIM_PWM_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80007ea:	f000 f8b1 	bl	8000950 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f2:	2208      	movs	r2, #8
 80007f4:	4619      	mov	r1, r3
 80007f6:	4824      	ldr	r0, [pc, #144]	; (8000888 <MX_TIM1_Init+0x1b8>)
 80007f8:	f007 fa2a 	bl	8007c50 <HAL_TIM_PWM_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000802:	f000 f8a5 	bl	8000950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000806:	2370      	movs	r3, #112	; 0x70
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 800080a:	f640 135f 	movw	r3, #2399	; 0x95f
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000818:	220c      	movs	r2, #12
 800081a:	4619      	mov	r1, r3
 800081c:	481a      	ldr	r0, [pc, #104]	; (8000888 <MX_TIM1_Init+0x1b8>)
 800081e:	f007 fa17 	bl	8007c50 <HAL_TIM_PWM_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8000828:	f000 f892 	bl	8000950 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800082c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000830:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000836:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 800083e:	2339      	movs	r3, #57	; 0x39
 8000840:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000850:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000854:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800085a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 3;
 800085c:	2303      	movs	r3, #3
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	4619      	mov	r1, r3
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <MX_TIM1_Init+0x1b8>)
 800086a:	f008 f839 	bl	80088e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 8000874:	f000 f86c 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <MX_TIM1_Init+0x1b8>)
 800087a:	f002 febb 	bl	80035f4 <HAL_TIM_MspPostInit>

}
 800087e:	bf00      	nop
 8000880:	3768      	adds	r7, #104	; 0x68
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000868 	.word	0x20000868
 800088c:	40012c00 	.word	0x40012c00

08000890 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_USART1_UART_Init+0x58>)
 8000896:	4a15      	ldr	r2, [pc, #84]	; (80008ec <MX_USART1_UART_Init+0x5c>)
 8000898:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_USART1_UART_Init+0x58>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART1_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_USART1_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART1_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART1_UART_Init+0x58>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART1_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART1_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART1_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART1_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART1_UART_Init+0x58>)
 80008d4:	f008 f882 	bl	80089dc <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008de:	f000 f837 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200007e8 	.word	0x200007e8
 80008ec:	40013800 	.word	0x40013800

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_GPIO_Init+0x5c>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a14      	ldr	r2, [pc, #80]	; (800094c <MX_GPIO_Init+0x5c>)
 80008fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_GPIO_Init+0x5c>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_GPIO_Init+0x5c>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <MX_GPIO_Init+0x5c>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	6153      	str	r3, [r2, #20]
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_GPIO_Init+0x5c>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_GPIO_Init+0x5c>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <MX_GPIO_Init+0x5c>)
 800092c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000930:	6153      	str	r3, [r2, #20]
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_GPIO_Init+0x5c>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

}
 800093e:	bf00      	nop
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 800095e:	b480      	push	{r7}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	603b      	str	r3, [r7, #0]
  pHandle->pSTM = pSTM;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	601a      	str	r2, [r3, #0]
  pHandle->pSTC = pSTC;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	605a      	str	r2, [r3, #4]
  pHandle->pFOCVars = pFOCVars;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	683a      	ldr	r2, [r7, #0]
 800097c:	609a      	str	r2, [r3, #8]

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2200      	movs	r2, #0
 8000982:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalSpeed = 0;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2200      	movs	r2, #0
 8000988:	81da      	strh	r2, [r3, #14]
  pHandle->hFinalTorque = 0;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2200      	movs	r2, #0
 800098e:	821a      	strh	r2, [r3, #16]
  pHandle->hDurationms = 0;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2200      	movs	r2, #0
 8000994:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2200      	movs	r2, #0
 800099a:	761a      	strb	r2, [r3, #24]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	807b      	strh	r3, [r7, #2]
 80009b4:	4613      	mov	r3, r2
 80009b6:	803b      	strh	r3, [r7, #0]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2201      	movs	r2, #1
 80009bc:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	887a      	ldrh	r2, [r7, #2]
 80009c2:	81da      	strh	r2, [r3, #14]
  pHandle->hDurationms = hDurationms;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	883a      	ldrh	r2, [r7, #0]
 80009c8:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2201      	movs	r2, #1
 80009ce:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2201      	movs	r2, #1
 80009d4:	765a      	strb	r2, [r3, #25]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	460b      	mov	r3, r1
 80009ec:	807b      	strh	r3, [r7, #2]
 80009ee:	4613      	mov	r3, r2
 80009f0:	803b      	strh	r3, [r7, #0]
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2202      	movs	r2, #2
 80009f6:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalTorque = hFinalTorque;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	887a      	ldrh	r2, [r7, #2]
 80009fc:	821a      	strh	r2, [r3, #16]
  pHandle->hDurationms = hDurationms;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	883a      	ldrh	r2, [r7, #0]
 8000a02:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2201      	movs	r2, #1
 8000a08:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	765a      	strb	r2, [r3, #25]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2203      	movs	r2, #3
 8000a2a:	731a      	strb	r2, [r3, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8000a2c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	825a      	strh	r2, [r3, #18]
  pHandle->Iqdref.d = Iqdref.d;
 8000a34:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	829a      	strh	r2, [r3, #20]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	765a      	strb	r2, [r3, #25]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2103      	movs	r1, #3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f00b fd74 	bl	800c550 <STM_NextState>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	73fb      	strb	r3, [r7, #15]

  if ( RetVal == true )
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <MCI_StartMotor+0x24>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2201      	movs	r2, #1
 8000a76:	761a      	strb	r2, [r3, #24]
  }

  return RetVal;
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <MCI_StopMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2107      	movs	r1, #7
 8000a90:	4618      	mov	r0, r3
 8000a92:	f00b fd5d 	bl	800c550 <STM_NextState>
 8000a96:	4603      	mov	r3, r0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <MCI_FaultAcknowledged>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f00b fefb 	bl	800c8a8 <STM_FaultAcknowledged>
 8000ab2:	4603      	mov	r3, r0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <MCI_EncoderAlign>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f00b fd40 	bl	800c550 <STM_NextState>
 8000ad0:	4603      	mov	r3, r0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <MCI_ExecBufferedCommands>:
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b084      	sub	sp, #16
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  if ( pHandle != MC_NULL )
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d057      	beq.n	8000b98 <MCI_ExecBufferedCommands+0xbe>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7e1b      	ldrb	r3, [r3, #24]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d153      	bne.n	8000b98 <MCI_ExecBufferedCommands+0xbe>
    {
      bool commandHasBeenExecuted = false;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]
      switch ( pHandle->lastCommand )
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	7b1b      	ldrb	r3, [r3, #12]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d01c      	beq.n	8000b36 <MCI_ExecBufferedCommands+0x5c>
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d032      	beq.n	8000b66 <MCI_ExecBufferedCommands+0x8c>
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d000      	beq.n	8000b06 <MCI_ExecBufferedCommands+0x2c>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
          commandHasBeenExecuted = true;
        }
        break;
        default:
          break;
 8000b04:	e03e      	b.n	8000b84 <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2101      	movs	r1, #1
 8000b16:	4618      	mov	r0, r3
 8000b18:	f00b fb8e 	bl	800c238 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6858      	ldr	r0, [r3, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	8adb      	ldrh	r3, [r3, #22]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	f00b fb96 	bl	800c25c <STC_ExecRamp>
 8000b30:	4603      	mov	r3, r0
 8000b32:	73fb      	strb	r3, [r7, #15]
        break;
 8000b34:	e026      	b.n	8000b84 <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f00b fb76 	bl	800c238 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6858      	ldr	r0, [r3, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	8adb      	ldrh	r3, [r3, #22]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	f00b fb7e 	bl	800c25c <STC_ExecRamp>
 8000b60:	4603      	mov	r3, r0
 8000b62:	73fb      	strb	r3, [r7, #15]
        break;
 8000b64:	e00e      	b.n	8000b84 <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	3310      	adds	r3, #16
 8000b78:	3212      	adds	r2, #18
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	601a      	str	r2, [r3, #0]
          commandHasBeenExecuted = true;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
        break;
 8000b82:	bf00      	nop
      }

      if ( commandHasBeenExecuted )
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <MCI_ExecBufferedCommands+0xb8>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	761a      	strb	r2, [r3, #24]
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000b90:	e002      	b.n	8000b98 <MCI_ExecBufferedCommands+0xbe>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2203      	movs	r2, #3
 8000b96:	761a      	strb	r2, [r3, #24]
}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <MCI_GetSTMState>:
  * @brief  It returns information about the state of the related pSTM object.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  return STM_GetState( pHandle->pSTM );
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f00b fe6f 	bl	800c890 <STM_GetState>
 8000bb2:	4603      	mov	r3, r0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <MCI_GetControlMode>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval STC_Modality_t It returns the modality of STC. It can be one of
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  return pHandle->LastModalitySetByUser;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7e5b      	ldrb	r3, [r3, #25]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <MCI_GetImposedMotorDirection>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t It returns 1 or -1 according the sign of hFinalSpeed,
  *         hFinalTorque or Iqdref.q of the last command.
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  int16_t retVal = 1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	81fb      	strh	r3, [r7, #14]

  switch ( pHandle->lastCommand )
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7b1b      	ldrb	r3, [r3, #12]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d00d      	beq.n	8000c04 <MCI_GetImposedMotorDirection+0x30>
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d014      	beq.n	8000c16 <MCI_GetImposedMotorDirection+0x42>
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d000      	beq.n	8000bf2 <MCI_GetImposedMotorDirection+0x1e>
      {
        retVal = -1;
      }
      break;
    default:
      break;
 8000bf0:	e01f      	b.n	8000c32 <MCI_GetImposedMotorDirection+0x5e>
      if ( pHandle->hFinalSpeed < 0 )
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	da15      	bge.n	8000c28 <MCI_GetImposedMotorDirection+0x54>
        retVal = -1;
 8000bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c00:	81fb      	strh	r3, [r7, #14]
      break;
 8000c02:	e011      	b.n	8000c28 <MCI_GetImposedMotorDirection+0x54>
      if ( pHandle->hFinalTorque < 0 )
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	da0e      	bge.n	8000c2c <MCI_GetImposedMotorDirection+0x58>
        retVal = -1;
 8000c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c12:	81fb      	strh	r3, [r7, #14]
      break;
 8000c14:	e00a      	b.n	8000c2c <MCI_GetImposedMotorDirection+0x58>
      if ( pHandle->Iqdref.q < 0 )
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	da07      	bge.n	8000c30 <MCI_GetImposedMotorDirection+0x5c>
        retVal = -1;
 8000c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c24:	81fb      	strh	r3, [r7, #14]
      break;
 8000c26:	e003      	b.n	8000c30 <MCI_GetImposedMotorDirection+0x5c>
      break;
 8000c28:	bf00      	nop
 8000c2a:	e002      	b.n	8000c32 <MCI_GetImposedMotorDirection+0x5e>
      break;
 8000c2c:	bf00      	nop
 8000c2e:	e000      	b.n	8000c32 <MCI_GetImposedMotorDirection+0x5e>
      break;
 8000c30:	bf00      	nop
  }
  return retVal;
 8000c32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <MCI_GetLastRampFinalSpeed>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t last ramp final speed sent by the user expressed in tehts
  *         of HZ.
  */
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
 8000c42:	b480      	push	{r7}
 8000c44:	b085      	sub	sp, #20
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  int16_t hRetVal = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	81fb      	strh	r3, [r7, #14]

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	7b1b      	ldrb	r3, [r3, #12]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d102      	bne.n	8000c5c <MCI_GetLastRampFinalSpeed+0x1a>
  {
    hRetVal = pHandle->hFinalSpeed;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	89db      	ldrh	r3, [r3, #14]
 8000c5a:	81fb      	strh	r3, [r7, #14]
  }
  return hRetVal;
 8000c5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
   STC_StopRamp( pHandle->pSTC );
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f00b fb8b 	bl	800c394 <STC_StopRamp>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f00b fa8c 	bl	800c1b0 <STC_GetSpeedSensor>
 8000c98:	60f8      	str	r0, [r7, #12]

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f00b f9ac 	bl	800bff8 <SPD_GetAvrgMecSpeedUnit>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <MCI_GetMecSpeedRefUnit>:
  *         
  * @param  pHandle Pointer on the component instance to work on.
  *         
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00b fa98 	bl	800c1ec <STC_GetMecSpeedRefUnit>
 8000cbc:	4603      	mov	r3, r0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <MCI_GetIab>:
  * @brief  It returns stator current Iab in ab_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iab );
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	6810      	ldr	r0, [r2, #0]
 8000cd8:	6018      	str	r0, [r3, #0]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	89ba      	ldrh	r2, [r7, #12]
 8000cde:	f362 030f 	bfi	r3, r2, #0, #16
 8000ce2:	89fa      	ldrh	r2, [r7, #14]
 8000ce4:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <MCI_GetIalphabeta>:
  * @brief  It returns stator current Ialphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Ialphabeta );
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	3204      	adds	r2, #4
 8000d06:	6810      	ldr	r0, [r2, #0]
 8000d08:	6018      	str	r0, [r3, #0]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	89ba      	ldrh	r2, [r7, #12]
 8000d0e:	f362 030f 	bfi	r3, r2, #0, #16
 8000d12:	89fa      	ldrh	r2, [r7, #14]
 8000d14:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <MCI_GetIqd>:
  * @brief  It returns stator current Iqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iqd );
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	320c      	adds	r2, #12
 8000d36:	6810      	ldr	r0, [r2, #0]
 8000d38:	6018      	str	r0, [r3, #0]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	89ba      	ldrh	r2, [r7, #12]
 8000d3e:	f362 030f 	bfi	r3, r2, #0, #16
 8000d42:	89fa      	ldrh	r2, [r7, #14]
 8000d44:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <MCI_GetIqdref>:
  * @brief  It returns stator current Iqdref in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iqdref );
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	3210      	adds	r2, #16
 8000d66:	6810      	ldr	r0, [r2, #0]
 8000d68:	6018      	str	r0, [r3, #0]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	89ba      	ldrh	r2, [r7, #12]
 8000d6e:	f362 030f 	bfi	r3, r2, #0, #16
 8000d72:	89fa      	ldrh	r2, [r7, #14]
 8000d74:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Vqd );
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	3216      	adds	r2, #22
 8000d96:	6810      	ldr	r0, [r2, #0]
 8000d98:	6018      	str	r0, [r3, #0]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	89ba      	ldrh	r2, [r7, #12]
 8000d9e:	f362 030f 	bfi	r3, r2, #0, #16
 8000da2:	89fa      	ldrh	r2, [r7, #14]
 8000da4:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Valphabeta );
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	321a      	adds	r2, #26
 8000dc6:	6810      	ldr	r0, [r2, #0]
 8000dc8:	6018      	str	r0, [r3, #0]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	89ba      	ldrh	r2, [r7, #12]
 8000dce:	f362 030f 	bfi	r3, r2, #0, #16
 8000dd2:	89fa      	ldrh	r2, [r7, #14]
 8000dd4:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <MCI_GetTeref>:
  *         Iqref and Idref computation
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->hTeref );
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <MCI_SetIdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	807b      	strh	r3, [r7, #2]
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	887a      	ldrh	r2, [r7, #2]
 8000e12:	825a      	strh	r2, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	887a      	ldrh	r2, [r7, #2]
 8000e1a:	829a      	strh	r2, [r3, #20]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689c      	ldr	r4, [r3, #8]
 8000e38:	4610      	mov	r0, r2
 8000e3a:	f00b fb49 	bl	800c4d0 <STC_GetDefaultIqdref>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	8222      	strh	r2, [r4, #16]
 8000e44:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8000e48:	8263      	strh	r3, [r4, #18]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd90      	pop	{r4, r7, pc}

08000e52 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8000e52:	b480      	push	{r7}
 8000e54:	b089      	sub	sp, #36	; 0x24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  int32_t a_divSQRT3_tmp, b_divSQRT3_tmp ;
  int32_t wbeta_tmp;
  int16_t hbeta_tmp;

  /* qIalpha = qIas*/
  Output.alpha = Input.a;
 8000e5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e5e:	813b      	strh	r3, [r7, #8]

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e64:	461a      	mov	r2, r3
 8000e66:	f644 13e6 	movw	r3, #18918	; 0x49e6
 8000e6a:	fb03 f302 	mul.w	r3, r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e74:	461a      	mov	r2, r3
 8000e76:	f644 13e6 	movw	r3, #18918	; 0x49e6
 8000e7a:	fb03 f302 	mul.w	r3, r3, r2
 8000e7e:	617b      	str	r3, [r7, #20]
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	425a      	negs	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	1ad2      	subs	r2, r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	13db      	asrs	r3, r3, #15
 8000e8e:	613b      	str	r3, [r7, #16]
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e96:	db03      	blt.n	8000ea0 <MCM_Clarke+0x4e>
  {
    hbeta_tmp = INT16_MAX;
 8000e98:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000e9c:	83fb      	strh	r3, [r7, #30]
 8000e9e:	e009      	b.n	8000eb4 <MCM_Clarke+0x62>
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000ea6:	da03      	bge.n	8000eb0 <MCM_Clarke+0x5e>
  {
    hbeta_tmp = ( -32768 );
 8000ea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eac:	83fb      	strh	r3, [r7, #30]
 8000eae:	e001      	b.n	8000eb4 <MCM_Clarke+0x62>
  }
  else
  {
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	83fb      	strh	r3, [r7, #30]
  }

  Output.beta = hbeta_tmp;
 8000eb4:	8bfb      	ldrh	r3, [r7, #30]
 8000eb6:	817b      	strh	r3, [r7, #10]

  if ( Output.beta == ( int16_t )( -32768 ) )
 8000eb8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ebc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000ec0:	d102      	bne.n	8000ec8 <MCM_Clarke+0x76>
  {
    Output.beta = -32767;
 8000ec2:	f248 0301 	movw	r3, #32769	; 0x8001
 8000ec6:	817b      	strh	r3, [r7, #10]
  }

  return ( Output );
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	89ba      	ldrh	r2, [r7, #12]
 8000ed0:	f362 030f 	bfi	r3, r2, #0, #16
 8000ed4:	89fa      	ldrh	r2, [r7, #14]
 8000ed6:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <MCM_Park>:
  * @param  Input: stator values alpha and beta in alphabeta_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator values q and d in qd_t format
  */
__weak qd_t MCM_Park( alphabeta_t Input, int16_t Theta )
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b08c      	sub	sp, #48	; 0x30
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	807b      	strh	r3, [r7, #2]
  int32_t d_tmp_1, d_tmp_2, q_tmp_1, q_tmp_2;
  Trig_Components Local_Vector_Components;
  int32_t wqd_tmp;
  int16_t hqd_tmp;

  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000ef2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f8b0 	bl	800105c <MCM_Trig_Functions>
 8000efc:	4603      	mov	r3, r0
 8000efe:	60fb      	str	r3, [r7, #12]

  /*No overflow guaranteed*/
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000f00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f04:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f08:	fb02 f303 	mul.w	r3, r2, r3
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /*No overflow guaranteed*/
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8000f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f12:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) / 32768;
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	13db      	asrs	r3, r3, #15
 8000f24:	623b      	str	r3, [r7, #32]
#endif

  /* Check saturation of Iq */
  if ( wqd_tmp > INT16_MAX )
 8000f26:	6a3b      	ldr	r3, [r7, #32]
 8000f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f2c:	db03      	blt.n	8000f36 <MCM_Park+0x50>
  {
    hqd_tmp = INT16_MAX;
 8000f2e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000f32:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000f34:	e009      	b.n	8000f4a <MCM_Park+0x64>
  }
  else if ( wqd_tmp < ( -32768 ) )
 8000f36:	6a3b      	ldr	r3, [r7, #32]
 8000f38:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000f3c:	da03      	bge.n	8000f46 <MCM_Park+0x60>
  {
    hqd_tmp = ( -32768 );
 8000f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f42:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000f44:	e001      	b.n	8000f4a <MCM_Park+0x64>
  }
  else
  {
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000f46:	6a3b      	ldr	r3, [r7, #32]
 8000f48:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.q = hqd_tmp;
 8000f4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000f4c:	823b      	strh	r3, [r7, #16]

  if ( Output.q == ( int16_t )( -32768 ) )
 8000f4e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f52:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000f56:	d102      	bne.n	8000f5e <MCM_Park+0x78>
  {
    Output.q = -32767;
 8000f58:	f248 0301 	movw	r3, #32769	; 0x8001
 8000f5c:	823b      	strh	r3, [r7, #16]
  }

  /*No overflow guaranteed*/
  d_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hSin;
 8000f5e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f62:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000f66:	fb02 f303 	mul.w	r3, r2, r3
 8000f6a:	61fb      	str	r3, [r7, #28]

  /*No overflow guaranteed*/
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f70:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f74:	fb02 f303 	mul.w	r3, r2, r3
 8000f78:	61bb      	str	r3, [r7, #24]
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) / 32768;
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000f7a:	69fa      	ldr	r2, [r7, #28]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	4413      	add	r3, r2
 8000f80:	13db      	asrs	r3, r3, #15
 8000f82:	623b      	str	r3, [r7, #32]
#endif

  /* Check saturation of Id */
  if ( wqd_tmp > INT16_MAX )
 8000f84:	6a3b      	ldr	r3, [r7, #32]
 8000f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f8a:	db03      	blt.n	8000f94 <MCM_Park+0xae>
  {
    hqd_tmp = INT16_MAX;
 8000f8c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000f90:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000f92:	e009      	b.n	8000fa8 <MCM_Park+0xc2>
  }
  else if ( wqd_tmp < ( -32768 ) )
 8000f94:	6a3b      	ldr	r3, [r7, #32]
 8000f96:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000f9a:	da03      	bge.n	8000fa4 <MCM_Park+0xbe>
  {
    hqd_tmp = ( -32768 );
 8000f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fa0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000fa2:	e001      	b.n	8000fa8 <MCM_Park+0xc2>
  }
  else
  {
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.d = hqd_tmp;
 8000fa8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000faa:	827b      	strh	r3, [r7, #18]

  if ( Output.d == ( int16_t )( -32768 ) )
 8000fac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000fb0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000fb4:	d102      	bne.n	8000fbc <MCM_Park+0xd6>
  {
    Output.d = -32767;
 8000fb6:	f248 0301 	movw	r3, #32769	; 0x8001
 8000fba:	827b      	strh	r3, [r7, #18]
  }

  return ( Output );
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	8aba      	ldrh	r2, [r7, #20]
 8000fc4:	f362 030f 	bfi	r3, r2, #0, #16
 8000fc8:	8afa      	ldrh	r2, [r7, #22]
 8000fca:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3730      	adds	r7, #48	; 0x30
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <MCM_Rev_Park>:
  * @param  Input: stator voltage Vq and Vd in qd_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator voltage Valpha and Vbeta in qd_t format
  */
__weak alphabeta_t MCM_Rev_Park( qd_t Input, int16_t Theta )
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b08a      	sub	sp, #40	; 0x28
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	807b      	strh	r3, [r7, #2]
  int32_t alpha_tmp1, alpha_tmp2, beta_tmp1, beta_tmp2;
  Trig_Components Local_Vector_Components;
  alphabeta_t Output;

  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000fe2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f838 	bl	800105c <MCM_Trig_Functions>
 8000fec:	4603      	mov	r3, r0
 8000fee:	613b      	str	r3, [r7, #16]

  /*No overflow guaranteed*/
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8000ff0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ff4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000ff8:	fb02 f303 	mul.w	r3, r2, r3
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001002:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001006:	fb02 f303 	mul.w	r3, r2, r3
 800100a:	623b      	str	r3, [r7, #32]
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) / 32768 );
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 800100c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	4413      	add	r3, r2
 8001012:	13db      	asrs	r3, r3, #15
 8001014:	b21b      	sxth	r3, r3
 8001016:	81bb      	strh	r3, [r7, #12]
#endif

  beta_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hSin;
 8001018:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800101c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001020:	fb02 f303 	mul.w	r3, r2, r3
 8001024:	61fb      	str	r3, [r7, #28]
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8001026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800102e:	fb02 f303 	mul.w	r3, r2, r3
 8001032:	61bb      	str	r3, [r7, #24]
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) / 32768 );
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
  that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
  the compiler to perform the shift (instead of LSR logical shift right) */
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	13db      	asrs	r3, r3, #15
 800103c:	b21b      	sxth	r3, r3
 800103e:	81fb      	strh	r3, [r7, #14]
#endif

  return ( Output );
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	2300      	movs	r3, #0
 8001046:	8aba      	ldrh	r2, [r7, #20]
 8001048:	f362 030f 	bfi	r3, r2, #0, #16
 800104c:	8afa      	ldrh	r2, [r7, #22]
 800104e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001052:	4618      	mov	r0, r3
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <MCM_Trig_Functions>:
  * @param  hAngle: angle in q1.15 format
  * @retval Sin(angle) and Cos(angle) in Trig_Components format
  */

__weak Trig_Components MCM_Trig_Functions( int16_t hAngle )
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8001066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800106e:	617b      	str	r3, [r7, #20]
  uhindex = ( uint16_t )shindex;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	827b      	strh	r3, [r7, #18]
  uhindex /= ( uint16_t )64;
 8001074:	8a7b      	ldrh	r3, [r7, #18]
 8001076:	099b      	lsrs	r3, r3, #6
 8001078:	827b      	strh	r3, [r7, #18]

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800107a:	8a7b      	ldrh	r3, [r7, #18]
 800107c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001084:	d04b      	beq.n	800111e <MCM_Trig_Functions+0xc2>
 8001086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800108a:	d802      	bhi.n	8001092 <MCM_Trig_Functions+0x36>
 800108c:	2b00      	cmp	r3, #0
 800108e:	d02d      	beq.n	80010ec <MCM_Trig_Functions+0x90>
    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
      break;
    default:
      break;
 8001090:	e05a      	b.n	8001148 <MCM_Trig_Functions+0xec>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8001092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001096:	d003      	beq.n	80010a0 <MCM_Trig_Functions+0x44>
 8001098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800109c:	d011      	beq.n	80010c2 <MCM_Trig_Functions+0x66>
      break;
 800109e:	e053      	b.n	8001148 <MCM_Trig_Functions+0xec>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80010a0:	8a7b      	ldrh	r3, [r7, #18]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b30      	ldr	r3, [pc, #192]	; (8001168 <MCM_Trig_Functions+0x10c>)
 80010a8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80010ac:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80010ae:	8a7b      	ldrh	r3, [r7, #18]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <MCM_Trig_Functions+0x10c>)
 80010ba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80010be:	813b      	strh	r3, [r7, #8]
      break;
 80010c0:	e042      	b.n	8001148 <MCM_Trig_Functions+0xec>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80010c2:	8a7b      	ldrh	r3, [r7, #18]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b26      	ldr	r3, [pc, #152]	; (8001168 <MCM_Trig_Functions+0x10c>)
 80010ce:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80010d2:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80010d4:	8a7b      	ldrh	r3, [r7, #18]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <MCM_Trig_Functions+0x10c>)
 80010dc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	425b      	negs	r3, r3
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	813b      	strh	r3, [r7, #8]
      break;
 80010ea:	e02d      	b.n	8001148 <MCM_Trig_Functions+0xec>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80010ec:	8a7b      	ldrh	r3, [r7, #18]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MCM_Trig_Functions+0x10c>)
 80010f4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	425b      	negs	r3, r3
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	b21b      	sxth	r3, r3
 8001100:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001102:	8a7b      	ldrh	r3, [r7, #18]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	461a      	mov	r2, r3
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MCM_Trig_Functions+0x10c>)
 800110e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001112:	b29b      	uxth	r3, r3
 8001114:	425b      	negs	r3, r3
 8001116:	b29b      	uxth	r3, r3
 8001118:	b21b      	sxth	r3, r3
 800111a:	813b      	strh	r3, [r7, #8]
      break;
 800111c:	e014      	b.n	8001148 <MCM_Trig_Functions+0xec>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800111e:	8a7b      	ldrh	r3, [r7, #18]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MCM_Trig_Functions+0x10c>)
 800112a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800112e:	b29b      	uxth	r3, r3
 8001130:	425b      	negs	r3, r3
 8001132:	b29b      	uxth	r3, r3
 8001134:	b21b      	sxth	r3, r3
 8001136:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001138:	8a7b      	ldrh	r3, [r7, #18]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <MCM_Trig_Functions+0x10c>)
 8001140:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001144:	813b      	strh	r3, [r7, #8]
      break;
 8001146:	bf00      	nop
  }
  return ( Local_Components );
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	2300      	movs	r3, #0
 800114e:	89ba      	ldrh	r2, [r7, #12]
 8001150:	f362 030f 	bfi	r3, r2, #0, #16
 8001154:	89fa      	ldrh	r2, [r7, #14]
 8001156:	f362 431f 	bfi	r3, r2, #16, #16
}
 800115a:	4618      	mov	r0, r3
 800115c:	371c      	adds	r7, #28
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	0800d9dc 	.word	0x0800d9dc

0800116c <LL_GPIO_LockPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	60fb      	str	r3, [r7, #12]
  (void) temp;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <MCboot>:
  *         created and initialized. The vector must have length equal to the
  *         number of motor drives.
  * @retval None
  */
__weak void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS],MCT_Handle_t* pMCTList[NBR_OF_MOTORS] )
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  /* USER CODE END MCboot 0 */

  /**************************************/
  /*    State machine initialization    */
  /**************************************/
  STM_Init(&STM[M1]);
 80011ae:	4877      	ldr	r0, [pc, #476]	; (800138c <MCboot+0x1e8>)
 80011b0:	f00b f9ba 	bl	800c528 <STM_Init>
  
  bMCBootCompleted = 0;
 80011b4:	4b76      	ldr	r3, [pc, #472]	; (8001390 <MCboot+0x1ec>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
  pCLM[M1] = &CircleLimitationM1;
 80011ba:	4b76      	ldr	r3, [pc, #472]	; (8001394 <MCboot+0x1f0>)
 80011bc:	4a76      	ldr	r2, [pc, #472]	; (8001398 <MCboot+0x1f4>)
 80011be:	601a      	str	r2, [r3, #0]

  /**********************************************************/
  /*    PWM and current sensing component initialization    */
  /**********************************************************/
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80011c0:	4b76      	ldr	r3, [pc, #472]	; (800139c <MCboot+0x1f8>)
 80011c2:	4a77      	ldr	r2, [pc, #476]	; (80013a0 <MCboot+0x1fc>)
 80011c4:	601a      	str	r2, [r3, #0]
  R3_1_Init(&PWM_Handle_M1);
 80011c6:	4876      	ldr	r0, [pc, #472]	; (80013a0 <MCboot+0x1fc>)
 80011c8:	f009 fb68 	bl	800a89c <R3_1_Init>
  /* USER CODE END MCboot 1 */

  /**************************************/
  /*    Start timers synchronously      */
  /**************************************/
  startTimers();    
 80011cc:	f008 fc40 	bl	8009a50 <startTimers>

  /******************************************************/
  /*   PID component initialization: speed regulation   */
  /******************************************************/
  PID_HandleInit(&PIDSpeedHandle_M1);
 80011d0:	4874      	ldr	r0, [pc, #464]	; (80013a4 <MCboot+0x200>)
 80011d2:	f008 fa13 	bl	80095fc <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80011d6:	4b74      	ldr	r3, [pc, #464]	; (80013a8 <MCboot+0x204>)
 80011d8:	4a72      	ldr	r2, [pc, #456]	; (80013a4 <MCboot+0x200>)
 80011da:	601a      	str	r2, [r3, #0]
  
  /******************************************************/
  /*   Main speed sensor component initialization       */
  /******************************************************/
  pSTC[M1] = &SpeednTorqCtrlM1;
 80011dc:	4b73      	ldr	r3, [pc, #460]	; (80013ac <MCboot+0x208>)
 80011de:	4a74      	ldr	r2, [pc, #464]	; (80013b0 <MCboot+0x20c>)
 80011e0:	601a      	str	r2, [r3, #0]
  STO_PLL_Init (&STO_PLL_M1);
 80011e2:	4874      	ldr	r0, [pc, #464]	; (80013b4 <MCboot+0x210>)
 80011e4:	f00c faca 	bl	800d77c <STO_PLL_Init>
  

  /******************************************************/
  /*   Speed & torque component initialization          */
  /******************************************************/
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 80011e8:	4b70      	ldr	r3, [pc, #448]	; (80013ac <MCboot+0x208>)
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	4b6e      	ldr	r3, [pc, #440]	; (80013a8 <MCboot+0x204>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a70      	ldr	r2, [pc, #448]	; (80013b4 <MCboot+0x210>)
 80011f2:	4619      	mov	r1, r3
 80011f4:	f00a ffa2 	bl	800c13c <STC_Init>
  
  /****************************************************/
  /*   Virtual speed sensor component initialization  */
  /****************************************************/ 
  VSS_Init (&VirtualSpeedSensorM1);
 80011f8:	486f      	ldr	r0, [pc, #444]	; (80013b8 <MCboot+0x214>)
 80011fa:	f00b fd71 	bl	800cce0 <VSS_Init>
  
  /**************************************/
  /*   Rev-up component initialization  */
  /**************************************/
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);  
 80011fe:	4b6b      	ldr	r3, [pc, #428]	; (80013ac <MCboot+0x208>)
 8001200:	6819      	ldr	r1, [r3, #0]
 8001202:	4b66      	ldr	r3, [pc, #408]	; (800139c <MCboot+0x1f8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	4b6c      	ldr	r3, [pc, #432]	; (80013bc <MCboot+0x218>)
 800120a:	4a6b      	ldr	r2, [pc, #428]	; (80013b8 <MCboot+0x214>)
 800120c:	486c      	ldr	r0, [pc, #432]	; (80013c0 <MCboot+0x21c>)
 800120e:	f00b ffd5 	bl	800d1bc <RUC_Init>
      
  /********************************************************/
  /*   PID component initialization: current regulation   */
  /********************************************************/
  PID_HandleInit(&PIDIqHandle_M1);
 8001212:	486c      	ldr	r0, [pc, #432]	; (80013c4 <MCboot+0x220>)
 8001214:	f008 f9f2 	bl	80095fc <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8001218:	486b      	ldr	r0, [pc, #428]	; (80013c8 <MCboot+0x224>)
 800121a:	f008 f9ef 	bl	80095fc <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 800121e:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <MCboot+0x228>)
 8001220:	4a68      	ldr	r2, [pc, #416]	; (80013c4 <MCboot+0x220>)
 8001222:	601a      	str	r2, [r3, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 8001224:	4b6a      	ldr	r3, [pc, #424]	; (80013d0 <MCboot+0x22c>)
 8001226:	4a68      	ldr	r2, [pc, #416]	; (80013c8 <MCboot+0x224>)
 8001228:	601a      	str	r2, [r3, #0]
  
  /********************************************************/
  /*   Bus voltage sensor component initialization        */
  /********************************************************/
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 800122a:	4b6a      	ldr	r3, [pc, #424]	; (80013d4 <MCboot+0x230>)
 800122c:	4a6a      	ldr	r2, [pc, #424]	; (80013d8 <MCboot+0x234>)
 800122e:	601a      	str	r2, [r3, #0]
  RVBS_Init(pBusSensorM1);
 8001230:	4b68      	ldr	r3, [pc, #416]	; (80013d4 <MCboot+0x230>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f00a fca7 	bl	800bb88 <RVBS_Init>
  
  /*************************************************/
  /*   Power measurement component initialization  */
  /*************************************************/
  pMPM[M1] = &PQD_MotorPowMeasM1;
 800123a:	4b68      	ldr	r3, [pc, #416]	; (80013dc <MCboot+0x238>)
 800123c:	4a68      	ldr	r2, [pc, #416]	; (80013e0 <MCboot+0x23c>)
 800123e:	601a      	str	r2, [r3, #0]
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001240:	4b64      	ldr	r3, [pc, #400]	; (80013d4 <MCboot+0x230>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b65      	ldr	r3, [pc, #404]	; (80013dc <MCboot+0x238>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 800124c:	4b63      	ldr	r3, [pc, #396]	; (80013dc <MCboot+0x238>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a64      	ldr	r2, [pc, #400]	; (80013e4 <MCboot+0x240>)
 8001252:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  
  /*******************************************************/
  /*   Temperature measurement component initialization  */
  /*******************************************************/
  NTC_Init(&TempSensorParamsM1);    
 8001256:	4864      	ldr	r0, [pc, #400]	; (80013e8 <MCboot+0x244>)
 8001258:	f008 f931 	bl	80094be <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 800125c:	4b63      	ldr	r3, [pc, #396]	; (80013ec <MCboot+0x248>)
 800125e:	4a62      	ldr	r2, [pc, #392]	; (80013e8 <MCboot+0x244>)
 8001260:	601a      	str	r2, [r3, #0]
    

  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001262:	4b63      	ldr	r3, [pc, #396]	; (80013f0 <MCboot+0x24c>)
 8001264:	4a63      	ldr	r2, [pc, #396]	; (80013f4 <MCboot+0x250>)
 8001266:	601a      	str	r2, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 8001268:	4b61      	ldr	r3, [pc, #388]	; (80013f0 <MCboot+0x24c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f00a fd9b 	bl	800bda8 <REMNG_Init>

  FOC_Clear(M1);
 8001272:	2000      	movs	r0, #0
 8001274:	f000 fad0 	bl	8001818 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001278:	4b5a      	ldr	r3, [pc, #360]	; (80013e4 <MCboot+0x240>)
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001280:	4b4a      	ldr	r3, [pc, #296]	; (80013ac <MCboot+0x208>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4c57      	ldr	r4, [pc, #348]	; (80013e4 <MCboot+0x240>)
 8001286:	4618      	mov	r0, r3
 8001288:	f00b f922 	bl	800c4d0 <STC_GetDefaultIqdref>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	8222      	strh	r2, [r4, #16]
 8001292:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8001296:	8263      	strh	r3, [r4, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001298:	4b44      	ldr	r3, [pc, #272]	; (80013ac <MCboot+0x208>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f00b f917 	bl	800c4d0 <STC_GetDefaultIqdref>
 80012a2:	4603      	mov	r3, r0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80012aa:	4b4e      	ldr	r3, [pc, #312]	; (80013e4 <MCboot+0x240>)
 80012ac:	829a      	strh	r2, [r3, #20]
  oMCInterface[M1] = & Mci[M1];
 80012ae:	4b52      	ldr	r3, [pc, #328]	; (80013f8 <MCboot+0x254>)
 80012b0:	4a52      	ldr	r2, [pc, #328]	; (80013fc <MCboot+0x258>)
 80012b2:	601a      	str	r2, [r3, #0]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80012b4:	4b50      	ldr	r3, [pc, #320]	; (80013f8 <MCboot+0x254>)
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <MCboot+0x208>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b49      	ldr	r3, [pc, #292]	; (80013e4 <MCboot+0x240>)
 80012be:	4933      	ldr	r1, [pc, #204]	; (800138c <MCboot+0x1e8>)
 80012c0:	f7ff fb4d 	bl	800095e <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 80012c4:	4b4c      	ldr	r3, [pc, #304]	; (80013f8 <MCboot+0x254>)
 80012c6:	681c      	ldr	r4, [r3, #0]
 80012c8:	4b38      	ldr	r3, [pc, #224]	; (80013ac <MCboot+0x208>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f00b f8d9 	bl	800c484 <STC_GetMecSpeedRefUnitDefault>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2200      	movs	r2, #0
 80012d6:	4619      	mov	r1, r3
 80012d8:	4620      	mov	r0, r4
 80012da:	f7ff fb65 	bl	80009a8 <MCI_ExecSpeedRamp>
  STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /*First command to STC*/
  pMCIList[M1] = oMCInterface[M1];
 80012de:	4b46      	ldr	r3, [pc, #280]	; (80013f8 <MCboot+0x254>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	601a      	str	r2, [r3, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80012e6:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <MCboot+0x204>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a45      	ldr	r2, [pc, #276]	; (8001400 <MCboot+0x25c>)
 80012ec:	6013      	str	r3, [r2, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 80012ee:	4b37      	ldr	r3, [pc, #220]	; (80013cc <MCboot+0x228>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a43      	ldr	r2, [pc, #268]	; (8001400 <MCboot+0x25c>)
 80012f4:	6053      	str	r3, [r2, #4]
  MCT[M1].pPIDId = pPIDId[M1];
 80012f6:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <MCboot+0x22c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a41      	ldr	r2, [pc, #260]	; (8001400 <MCboot+0x25c>)
 80012fc:	6093      	str	r3, [r2, #8]
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 80012fe:	4b40      	ldr	r3, [pc, #256]	; (8001400 <MCboot+0x25c>)
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001304:	4b25      	ldr	r3, [pc, #148]	; (800139c <MCboot+0x1f8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a3d      	ldr	r2, [pc, #244]	; (8001400 <MCboot+0x25c>)
 800130a:	6113      	str	r3, [r2, #16]
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 800130c:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <MCboot+0x25c>)
 800130e:	4a2c      	ldr	r2, [pc, #176]	; (80013c0 <MCboot+0x21c>)
 8001310:	615a      	str	r2, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1; 
 8001312:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <MCboot+0x25c>)
 8001314:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <MCboot+0x210>)
 8001316:	619a      	str	r2, [r3, #24]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 8001318:	4b39      	ldr	r3, [pc, #228]	; (8001400 <MCboot+0x25c>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 800131e:	4b38      	ldr	r3, [pc, #224]	; (8001400 <MCboot+0x25c>)
 8001320:	4a25      	ldr	r2, [pc, #148]	; (80013b8 <MCboot+0x214>)
 8001322:	621a      	str	r2, [r3, #32]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MCboot+0x208>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a35      	ldr	r2, [pc, #212]	; (8001400 <MCboot+0x25c>)
 800132a:	6253      	str	r3, [r2, #36]	; 0x24
  MCT[M1].pStateMachine = &STM[M1];
 800132c:	4b34      	ldr	r3, [pc, #208]	; (8001400 <MCboot+0x25c>)
 800132e:	4a17      	ldr	r2, [pc, #92]	; (800138c <MCboot+0x1e8>)
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001332:	4b2e      	ldr	r3, [pc, #184]	; (80013ec <MCboot+0x248>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a32      	ldr	r2, [pc, #200]	; (8001400 <MCboot+0x25c>)
 8001338:	62d3      	str	r3, [r2, #44]	; 0x2c
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <MCboot+0x230>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <MCboot+0x25c>)
 8001342:	631a      	str	r2, [r3, #48]	; 0x30
  MCT[M1].pBrakeDigitalOutput = MC_NULL;   /* brake is defined, oBrakeM1*/
 8001344:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <MCboot+0x25c>)
 8001346:	2200      	movs	r2, #0
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <MCboot+0x25c>)
 800134c:	2200      	movs	r2, #0
 800134e:	639a      	str	r2, [r3, #56]	; 0x38
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <MCboot+0x238>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a2a      	ldr	r2, [pc, #168]	; (8001400 <MCboot+0x25c>)
 8001356:	63d3      	str	r3, [r2, #60]	; 0x3c
  MCT[M1].pFW = MC_NULL;
 8001358:	4b29      	ldr	r3, [pc, #164]	; (8001400 <MCboot+0x25c>)
 800135a:	2200      	movs	r2, #0
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
  MCT[M1].pFF = MC_NULL;
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <MCboot+0x25c>)
 8001360:	2200      	movs	r2, #0
 8001362:	645a      	str	r2, [r3, #68]	; 0x44

  MCT[M1].pPosCtrl = MC_NULL;
 8001364:	4b26      	ldr	r3, [pc, #152]	; (8001400 <MCboot+0x25c>)
 8001366:	2200      	movs	r2, #0
 8001368:	649a      	str	r2, [r3, #72]	; 0x48

  MCT[M1].pSCC = MC_NULL;
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <MCboot+0x25c>)
 800136c:	2200      	movs	r2, #0
 800136e:	64da      	str	r2, [r3, #76]	; 0x4c
  MCT[M1].pOTT = MC_NULL;
 8001370:	4b23      	ldr	r3, [pc, #140]	; (8001400 <MCboot+0x25c>)
 8001372:	2200      	movs	r2, #0
 8001374:	651a      	str	r2, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	4a21      	ldr	r2, [pc, #132]	; (8001400 <MCboot+0x25c>)
 800137a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MCboot 2 */

  /* USER CODE END MCboot 2 */

  bMCBootCompleted = 1;
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <MCboot+0x1ec>)
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bd90      	pop	{r4, r7, pc}
 800138a:	bf00      	nop
 800138c:	200009a0 	.word	0x200009a0
 8001390:	200006d6 	.word	0x200006d6
 8001394:	2000097c 	.word	0x2000097c
 8001398:	20000498 	.word	0x20000498
 800139c:	200008ec 	.word	0x200008ec
 80013a0:	20000244 	.word	0x20000244
 80013a4:	20000114 	.word	0x20000114
 80013a8:	200008f0 	.word	0x200008f0
 80013ac:	200009b4 	.word	0x200009b4
 80013b0:	20000198 	.word	0x20000198
 80013b4:	200002f4 	.word	0x200002f4
 80013b8:	200002bc 	.word	0x200002bc
 80013bc:	2000041c 	.word	0x2000041c
 80013c0:	200001cc 	.word	0x200001cc
 80013c4:	20000140 	.word	0x20000140
 80013c8:	2000016c 	.word	0x2000016c
 80013cc:	200008f4 	.word	0x200008f4
 80013d0:	200009b0 	.word	0x200009b0
 80013d4:	20000980 	.word	0x20000980
 80013d8:	20000458 	.word	0x20000458
 80013dc:	200009ac 	.word	0x200009ac
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000900 	.word	0x20000900
 80013e8:	20000430 	.word	0x20000430
 80013ec:	200008e8 	.word	0x200008e8
 80013f0:	200009a8 	.word	0x200009a8
 80013f4:	20000480 	.word	0x20000480
 80013f8:	200008f8 	.word	0x200008f8
 80013fc:	20000984 	.word	0x20000984
 8001400:	20000928 	.word	0x20000928

08001404 <MC_RunMotorControlTasks>:
 * - Safety Task
 * - Power Factor Correction Task (if enabled)
 * - User Interface task. 
 */
__weak void MC_RunMotorControlTasks(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  if ( bMCBootCompleted ) {
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <MC_RunMotorControlTasks+0x1c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <MC_RunMotorControlTasks+0x18>
    /* ** Medium Frequency Tasks ** */
    MC_Scheduler();
 8001410:	f000 f808 	bl	8001424 <MC_Scheduler>

    /* Safety task is run after Medium Frequency task so that  
     * it can overcome actions they initiated if needed. */
    TSK_SafetyTask();
 8001414:	f000 fc44 	bl	8001ca0 <TSK_SafetyTask>
    

    /* ** User Interface Task ** */
    UI_Scheduler();
 8001418:	f002 f9d8 	bl	80037cc <UI_Scheduler>
  }
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200006d6 	.word	0x200006d6

08001424 <MC_Scheduler>:
 * @brief  Executes the Medium Frequency Task functions for each drive instance. 
 *
 * It is to be clocked at the Systick frequency.
 */
__weak void MC_Scheduler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MC_Scheduler 0 */

/* USER CODE END MC_Scheduler 0 */

  if (bMCBootCompleted == 1)
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MC_Scheduler+0x64>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d129      	bne.n	8001484 <MC_Scheduler+0x60>
  {    
    if(hMFTaskCounterM1 > 0u)
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <MC_Scheduler+0x68>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	b29b      	uxth	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d007      	beq.n	800144a <MC_Scheduler+0x26>
    {
      hMFTaskCounterM1--;
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <MC_Scheduler+0x68>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	3b01      	subs	r3, #1
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <MC_Scheduler+0x68>)
 8001446:	801a      	strh	r2, [r3, #0]
 8001448:	e004      	b.n	8001454 <MC_Scheduler+0x30>
    }
    else
    {
      TSK_MediumFrequencyTaskM1();
 800144a:	f000 f825 	bl	8001498 <TSK_MediumFrequencyTaskM1>
      /* USER CODE BEGIN MC_Scheduler 1 */

      /* USER CODE END MC_Scheduler 1 */
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MC_Scheduler+0x68>)
 8001450:	2201      	movs	r2, #1
 8001452:	801a      	strh	r2, [r3, #0]
    }
    if(hBootCapDelayCounterM1 > 0u)
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MC_Scheduler+0x6c>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <MC_Scheduler+0x48>
    {
      hBootCapDelayCounterM1--;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MC_Scheduler+0x6c>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29a      	uxth	r2, r3
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MC_Scheduler+0x6c>)
 800146a:	801a      	strh	r2, [r3, #0]
    }
    if(hStopPermanencyCounterM1 > 0u)
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MC_Scheduler+0x70>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <MC_Scheduler+0x60>
    {
      hStopPermanencyCounterM1--;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <MC_Scheduler+0x70>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	3b01      	subs	r3, #1
 800147e:	b29a      	uxth	r2, r3
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <MC_Scheduler+0x70>)
 8001482:	801a      	strh	r2, [r3, #0]
  {
  }
  /* USER CODE BEGIN MC_Scheduler 2 */

  /* USER CODE END MC_Scheduler 2 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200006d6 	.word	0x200006d6
 800148c:	200006d0 	.word	0x200006d0
 8001490:	200006d2 	.word	0x200006d2
 8001494:	200006d4 	.word	0x200006d4

08001498 <TSK_MediumFrequencyTaskM1>:
  * present state of its state machine. In particular, duties requiring a periodic 
  * execution at a medium frequency rate (such as the speed controller for instance) 
  * are executed here.
  */
__weak void TSK_MediumFrequencyTaskM1(void)
{
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MediumFrequencyTask M1 0 */

  /* USER CODE END MediumFrequencyTask M1 0 */

  State_t StateM1;
  int16_t wAux = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	827b      	strh	r3, [r7, #18]

  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80014a2:	f107 0312 	add.w	r3, r7, #18
 80014a6:	4619      	mov	r1, r3
 80014a8:	48c6      	ldr	r0, [pc, #792]	; (80017c4 <TSK_MediumFrequencyTaskM1+0x32c>)
 80014aa:	f00c f865 	bl	800d578 <STO_PLL_CalcAvrgMecSpeedUnit>
 80014ae:	4603      	mov	r3, r0
 80014b0:	75fb      	strb	r3, [r7, #23]
  PQD_CalcElMotorPower( pMPM[M1] );
 80014b2:	4bc5      	ldr	r3, [pc, #788]	; (80017c8 <TSK_MediumFrequencyTaskM1+0x330>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f008 f9cc 	bl	8009854 <PQD_CalcElMotorPower>

  StateM1 = STM_GetState( &STM[M1] );
 80014bc:	48c3      	ldr	r0, [pc, #780]	; (80017cc <TSK_MediumFrequencyTaskM1+0x334>)
 80014be:	f00b f9e7 	bl	800c890 <STM_GetState>
 80014c2:	4603      	mov	r3, r0
 80014c4:	75bb      	strb	r3, [r7, #22]

  switch ( StateM1 )
 80014c6:	7dbb      	ldrb	r3, [r7, #22]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	f200 8190 	bhi.w	80017f0 <TSK_MediumFrequencyTaskM1+0x358>
 80014d0:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <TSK_MediumFrequencyTaskM1+0x40>)
 80014d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	0800151d 	.word	0x0800151d
 80014dc:	080015c7 	.word	0x080015c7
 80014e0:	08001709 	.word	0x08001709
 80014e4:	0800173f 	.word	0x0800173f
 80014e8:	08001767 	.word	0x08001767
 80014ec:	08001793 	.word	0x08001793
 80014f0:	080017a7 	.word	0x080017a7
 80014f4:	080017f1 	.word	0x080017f1
 80014f8:	080017f1 	.word	0x080017f1
 80014fc:	080017f1 	.word	0x080017f1
 8001500:	080017f1 	.word	0x080017f1
 8001504:	080017f1 	.word	0x080017f1
 8001508:	080017f1 	.word	0x080017f1
 800150c:	0800154b 	.word	0x0800154b
 8001510:	0800156d 	.word	0x0800156d
 8001514:	0800158b 	.word	0x0800158b
 8001518:	0800168d 	.word	0x0800168d
  {
  case IDLE_START:
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 800151c:	4bac      	ldr	r3, [pc, #688]	; (80017d0 <TSK_MediumFrequencyTaskM1+0x338>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fb57 	bl	8000bd4 <MCI_GetImposedMotorDirection>
 8001526:	4603      	mov	r3, r0
 8001528:	4619      	mov	r1, r3
 800152a:	48aa      	ldr	r0, [pc, #680]	; (80017d4 <TSK_MediumFrequencyTaskM1+0x33c>)
 800152c:	f00b fe84 	bl	800d238 <RUC_Clear>
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 8001530:	4ba9      	ldr	r3, [pc, #676]	; (80017d8 <TSK_MediumFrequencyTaskM1+0x340>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f009 fe56 	bl	800b1e6 <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 800153a:	2014      	movs	r0, #20
 800153c:	f000 fa4a 	bl	80019d4 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001540:	2110      	movs	r1, #16
 8001542:	48a2      	ldr	r0, [pc, #648]	; (80017cc <TSK_MediumFrequencyTaskM1+0x334>)
 8001544:	f00b f804 	bl	800c550 <STM_NextState>
    break;
 8001548:	e161      	b.n	800180e <TSK_MediumFrequencyTaskM1+0x376>

  case CHARGE_BOOT_CAP:
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 800154a:	f000 fa53 	bl	80019f4 <TSK_ChargeBootCapDelayHasElapsedM1>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 814f 	beq.w	80017f4 <TSK_MediumFrequencyTaskM1+0x35c>
    {
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001556:	4ba0      	ldr	r3, [pc, #640]	; (80017d8 <TSK_MediumFrequencyTaskM1+0x340>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f008 fd07 	bl	8009f70 <PWMC_CurrentReadingCalibr>

      /* USER CODE BEGIN MediumFrequencyTask M1 Charge BootCap elapsed */

      /* USER CODE END MediumFrequencyTask M1 Charge BootCap elapsed */

      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001562:	2111      	movs	r1, #17
 8001564:	4899      	ldr	r0, [pc, #612]	; (80017cc <TSK_MediumFrequencyTaskM1+0x334>)
 8001566:	f00a fff3 	bl	800c550 <STM_NextState>
    }
    break;
 800156a:	e143      	b.n	80017f4 <TSK_MediumFrequencyTaskM1+0x35c>

  case OFFSET_CALIB:
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 800156c:	4b9a      	ldr	r3, [pc, #616]	; (80017d8 <TSK_MediumFrequencyTaskM1+0x340>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2101      	movs	r1, #1
 8001572:	4618      	mov	r0, r3
 8001574:	f008 fcfc 	bl	8009f70 <PWMC_CurrentReadingCalibr>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 813c 	beq.w	80017f8 <TSK_MediumFrequencyTaskM1+0x360>
    {
      STM_NextState( &STM[M1], CLEAR );
 8001580:	2112      	movs	r1, #18
 8001582:	4892      	ldr	r0, [pc, #584]	; (80017cc <TSK_MediumFrequencyTaskM1+0x334>)
 8001584:	f00a ffe4 	bl	800c550 <STM_NextState>
    }
    break;
 8001588:	e136      	b.n	80017f8 <TSK_MediumFrequencyTaskM1+0x360>

  case CLEAR:
    /* In a sensorless configuration. Initiate the Revup procedure */
    FOCVars[M1].bDriveInput = EXTERNAL;
 800158a:	4b94      	ldr	r3, [pc, #592]	; (80017dc <TSK_MediumFrequencyTaskM1+0x344>)
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001592:	4b93      	ldr	r3, [pc, #588]	; (80017e0 <TSK_MediumFrequencyTaskM1+0x348>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4993      	ldr	r1, [pc, #588]	; (80017e4 <TSK_MediumFrequencyTaskM1+0x34c>)
 8001598:	4618      	mov	r0, r3
 800159a:	f00a fdfb 	bl	800c194 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 800159e:	4889      	ldr	r0, [pc, #548]	; (80017c4 <TSK_MediumFrequencyTaskM1+0x32c>)
 80015a0:	f00c f8bc 	bl	800d71c <STO_PLL_Clear>

    if ( STM_NextState( &STM[M1], START ) == true )
 80015a4:	2104      	movs	r1, #4
 80015a6:	4889      	ldr	r0, [pc, #548]	; (80017cc <TSK_MediumFrequencyTaskM1+0x334>)
 80015a8:	f00a ffd2 	bl	800c550 <STM_NextState>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8124 	beq.w	80017fc <TSK_MediumFrequencyTaskM1+0x364>
    {
      FOC_Clear( M1 );
 80015b4:	2000      	movs	r0, #0
 80015b6:	f000 f92f 	bl	8001818 <FOC_Clear>

      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 80015ba:	4b87      	ldr	r3, [pc, #540]	; (80017d8 <TSK_MediumFrequencyTaskM1+0x340>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f009 fe67 	bl	800b292 <R3_1_SwitchOnPWM>
    }
    break;
 80015c4:	e11a      	b.n	80017fc <TSK_MediumFrequencyTaskM1+0x364>
    {
  
      /* Mechanical speed as imposed by the Virtual Speed Sensor during the Rev Up phase. */
      int16_t hForcedMecSpeedUnit;
      qd_t IqdRef;
      bool ObserverConverged = false;
 80015c6:	2300      	movs	r3, #0
 80015c8:	753b      	strb	r3, [r7, #20]

      /* Execute the Rev Up procedure */
      if( ! RUC_Exec( &RevUpControlM1 ) )
 80015ca:	4882      	ldr	r0, [pc, #520]	; (80017d4 <TSK_MediumFrequencyTaskM1+0x33c>)
 80015cc:	f00b fe7c 	bl	800d2c8 <RUC_Exec>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f083 0301 	eor.w	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <TSK_MediumFrequencyTaskM1+0x150>
      {
        /* The time allowed for the startup sequence has expired */
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );  
 80015dc:	2200      	movs	r2, #0
 80015de:	2110      	movs	r1, #16
 80015e0:	487a      	ldr	r0, [pc, #488]	; (80017cc <TSK_MediumFrequencyTaskM1+0x334>)
 80015e2:	f00b f917 	bl	800c814 <STM_FaultProcessing>
 80015e6:	e010      	b.n	800160a <TSK_MediumFrequencyTaskM1+0x172>
      }
      else
      {
        /* Execute the torque open loop current start-up ramp:
         * Compute the Iq reference current as configured in the Rev Up sequence */
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 80015e8:	4b7d      	ldr	r3, [pc, #500]	; (80017e0 <TSK_MediumFrequencyTaskM1+0x348>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00a fee1 	bl	800c3b4 <STC_CalcTorqueReference>
 80015f2:	4603      	mov	r3, r0
 80015f4:	81bb      	strh	r3, [r7, #12]
        IqdRef.d = FOCVars[M1].UserIdref;
 80015f6:	4b79      	ldr	r3, [pc, #484]	; (80017dc <TSK_MediumFrequencyTaskM1+0x344>)
 80015f8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80015fc:	81fb      	strh	r3, [r7, #14]
        /* Iqd reference current used by the High Frequency Loop to generate the PWM output */
        FOCVars[M1].Iqdref = IqdRef;
 80015fe:	4b77      	ldr	r3, [pc, #476]	; (80017dc <TSK_MediumFrequencyTaskM1+0x344>)
 8001600:	3310      	adds	r3, #16
 8001602:	f107 020c 	add.w	r2, r7, #12
 8001606:	6810      	ldr	r0, [r2, #0]
 8001608:	6018      	str	r0, [r3, #0]
      }

      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	4619      	mov	r1, r3
 8001610:	4874      	ldr	r0, [pc, #464]	; (80017e4 <TSK_MediumFrequencyTaskM1+0x34c>)
 8001612:	f00b fc66 	bl	800cee2 <VSS_CalcAvrgMecSpeedUnit>

      ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 8001616:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800161a:	4619      	mov	r1, r3
 800161c:	4869      	ldr	r0, [pc, #420]	; (80017c4 <TSK_MediumFrequencyTaskM1+0x32c>)
 800161e:	f00c f8e5 	bl	800d7ec <STO_PLL_IsObserverConverged>
 8001622:	4603      	mov	r3, r0
 8001624:	753b      	strb	r3, [r7, #20]
      (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 8001626:	7d3b      	ldrb	r3, [r7, #20]
 8001628:	4619      	mov	r1, r3
 800162a:	486e      	ldr	r0, [pc, #440]	; (80017e4 <TSK_MediumFrequencyTaskM1+0x34c>)
 800162c:	f00b fd94 	bl	800d158 <VSS_SetStartTransition>

      if ( ObserverConverged )
 8001630:	7d3b      	ldrb	r3, [r7, #20]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 80e4 	beq.w	8001800 <TSK_MediumFrequencyTaskM1+0x368>
      {
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8001638:	4862      	ldr	r0, [pc, #392]	; (80017c4 <TSK_MediumFrequencyTaskM1+0x32c>)
 800163a:	f00a fcd0 	bl	800bfde <SPD_GetElAngle>
 800163e:	4603      	mov	r3, r0
 8001640:	4619      	mov	r1, r3
 8001642:	4b66      	ldr	r3, [pc, #408]	; (80017dc <TSK_MediumFrequencyTaskM1+0x344>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	461a      	mov	r2, r3
 800164a:	4610      	mov	r0, r2
 800164c:	f7ff fc4b 	bl	8000ee6 <MCM_Park>
 8001650:	4603      	mov	r3, r0
 8001652:	60bb      	str	r3, [r7, #8]

        /* Start switch over ramp. This ramp will transition from the revup to the closed loop FOC. */
        REMNG_Init( pREMNG[M1] );
 8001654:	4b64      	ldr	r3, [pc, #400]	; (80017e8 <TSK_MediumFrequencyTaskM1+0x350>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f00a fba5 	bl	800bda8 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 800165e:	4b62      	ldr	r3, [pc, #392]	; (80017e8 <TSK_MediumFrequencyTaskM1+0x350>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	4b5e      	ldr	r3, [pc, #376]	; (80017dc <TSK_MediumFrequencyTaskM1+0x344>)
 8001664:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001668:	2200      	movs	r2, #0
 800166a:	4619      	mov	r1, r3
 800166c:	f00a fbea 	bl	800be44 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 8001670:	4b5d      	ldr	r3, [pc, #372]	; (80017e8 <TSK_MediumFrequencyTaskM1+0x350>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001678:	4611      	mov	r1, r2
 800167a:	2219      	movs	r2, #25
 800167c:	4618      	mov	r0, r3
 800167e:	f00a fbe1 	bl	800be44 <REMNG_ExecRamp>
        
        STM_NextState( &STM[M1], SWITCH_OVER );
 8001682:	2113      	movs	r1, #19
 8001684:	4851      	ldr	r0, [pc, #324]	; (80017cc <TSK_MediumFrequencyTaskM1+0x334>)
 8001686:	f00a ff63 	bl	800c550 <STM_NextState>
      }
    }
    break;
 800168a:	e0b9      	b.n	8001800 <TSK_MediumFrequencyTaskM1+0x368>
    {
      bool LoopClosed;
      int16_t hForcedMecSpeedUnit;
      
       
      if( ! RUC_Exec( &RevUpControlM1 ) )
 800168c:	4851      	ldr	r0, [pc, #324]	; (80017d4 <TSK_MediumFrequencyTaskM1+0x33c>)
 800168e:	f00b fe1b 	bl	800d2c8 <RUC_Exec>
 8001692:	4603      	mov	r3, r0
 8001694:	f083 0301 	eor.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <TSK_MediumFrequencyTaskM1+0x212>
      {
          /* The time allowed for the startup sequence has expired */
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );  
 800169e:	2200      	movs	r2, #0
 80016a0:	2110      	movs	r1, #16
 80016a2:	484a      	ldr	r0, [pc, #296]	; (80017cc <TSK_MediumFrequencyTaskM1+0x334>)
 80016a4:	f00b f8b6 	bl	800c814 <STM_FaultProcessing>
          STM_NextState( &STM[M1], START_RUN );
        }  
      }
    }

    break;
 80016a8:	e0ac      	b.n	8001804 <TSK_MediumFrequencyTaskM1+0x36c>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 80016aa:	1dbb      	adds	r3, r7, #6
 80016ac:	4619      	mov	r1, r3
 80016ae:	484d      	ldr	r0, [pc, #308]	; (80017e4 <TSK_MediumFrequencyTaskM1+0x34c>)
 80016b0:	f00b fc17 	bl	800cee2 <VSS_CalcAvrgMecSpeedUnit>
 80016b4:	4603      	mov	r3, r0
 80016b6:	757b      	strb	r3, [r7, #21]
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 80016b8:	484a      	ldr	r0, [pc, #296]	; (80017e4 <TSK_MediumFrequencyTaskM1+0x34c>)
 80016ba:	f00b fd71 	bl	800d1a0 <VSS_TransitionEnded>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	7d7b      	ldrb	r3, [r7, #21]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf14      	ite	ne
 80016cc:	2301      	movne	r3, #1
 80016ce:	2300      	moveq	r3, #0
 80016d0:	757b      	strb	r3, [r7, #21]
        if ( LoopClosed == true ) 
 80016d2:	7d7b      	ldrb	r3, [r7, #21]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 8095 	beq.w	8001804 <TSK_MediumFrequencyTaskM1+0x36c>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80016da:	4b44      	ldr	r3, [pc, #272]	; (80017ec <TSK_MediumFrequencyTaskM1+0x354>)
 80016dc:	681c      	ldr	r4, [r3, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 80016de:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <TSK_MediumFrequencyTaskM1+0x344>)
 80016e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80016e4:	461d      	mov	r5, r3
 80016e6:	4b41      	ldr	r3, [pc, #260]	; (80017ec <TSK_MediumFrequencyTaskM1+0x354>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f007 fff7 	bl	80096de <PID_GetKIDivisor>
 80016f0:	4603      	mov	r3, r0
 80016f2:	fb03 f305 	mul.w	r3, r3, r5
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80016f6:	4619      	mov	r1, r3
 80016f8:	4620      	mov	r0, r4
 80016fa:	f007 ffd6 	bl	80096aa <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 80016fe:	2105      	movs	r1, #5
 8001700:	4832      	ldr	r0, [pc, #200]	; (80017cc <TSK_MediumFrequencyTaskM1+0x334>)
 8001702:	f00a ff25 	bl	800c550 <STM_NextState>
    break;
 8001706:	e07d      	b.n	8001804 <TSK_MediumFrequencyTaskM1+0x36c>

  case START_RUN:
 /* only for sensor-less control */
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001708:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <TSK_MediumFrequencyTaskM1+0x348>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	492d      	ldr	r1, [pc, #180]	; (80017c4 <TSK_MediumFrequencyTaskM1+0x32c>)
 800170e:	4618      	mov	r0, r3
 8001710:	f00a fd40 	bl	800c194 <STC_SetSpeedSensor>
    {
      /* USER CODE BEGIN MediumFrequencyTask M1 1 */

      /* USER CODE END MediumFrequencyTask M1 1 */      
	  FOC_InitAdditionalMethods(M1);
 8001714:	2000      	movs	r0, #0
 8001716:	f000 f915 	bl	8001944 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 800171a:	2000      	movs	r0, #0
 800171c:	f000 f91e 	bl	800195c <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001720:	2106      	movs	r1, #6
 8001722:	482a      	ldr	r0, [pc, #168]	; (80017cc <TSK_MediumFrequencyTaskM1+0x334>)
 8001724:	f00a ff14 	bl	800c550 <STM_NextState>
    }
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001728:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <TSK_MediumFrequencyTaskM1+0x348>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f00a feea 	bl	800c506 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001732:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <TSK_MediumFrequencyTaskM1+0x338>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff f9cf 	bl	8000ada <MCI_ExecBufferedCommands>
	
    break;
 800173c:	e067      	b.n	800180e <TSK_MediumFrequencyTaskM1+0x376>
  case RUN:
    /* USER CODE BEGIN MediumFrequencyTask M1 2 */

    /* USER CODE END MediumFrequencyTask M1 2 */

    MCI_ExecBufferedCommands( oMCInterface[M1] );
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <TSK_MediumFrequencyTaskM1+0x338>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff f9c9 	bl	8000ada <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001748:	2000      	movs	r0, #0
 800174a:	f000 f907 	bl	800195c <FOC_CalcCurrRef>
 
    if( !IsSpeedReliable )
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	f083 0301 	eor.w	r3, r3, #1
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d056      	beq.n	8001808 <TSK_MediumFrequencyTaskM1+0x370>
    {
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 800175a:	2200      	movs	r2, #0
 800175c:	2120      	movs	r1, #32
 800175e:	481b      	ldr	r0, [pc, #108]	; (80017cc <TSK_MediumFrequencyTaskM1+0x334>)
 8001760:	f00b f858 	bl	800c814 <STM_FaultProcessing>
    }

    /* USER CODE BEGIN MediumFrequencyTask M1 3 */

    /* USER CODE END MediumFrequencyTask M1 3 */
    break;
 8001764:	e050      	b.n	8001808 <TSK_MediumFrequencyTaskM1+0x370>

  case ANY_STOP:
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <TSK_MediumFrequencyTaskM1+0x340>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f009 fe32 	bl	800b3d4 <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 8001770:	2000      	movs	r0, #0
 8001772:	f000 f851 	bl	8001818 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <TSK_MediumFrequencyTaskM1+0x330>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f007 fe07 	bl	800938e <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001780:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001784:	f000 f94c 	bl	8001a20 <TSK_SetStopPermanencyTimeM1>

    /* USER CODE BEGIN MediumFrequencyTask M1 4 */

    /* USER CODE END MediumFrequencyTask M1 4 */

    STM_NextState( &STM[M1], STOP );
 8001788:	2108      	movs	r1, #8
 800178a:	4810      	ldr	r0, [pc, #64]	; (80017cc <TSK_MediumFrequencyTaskM1+0x334>)
 800178c:	f00a fee0 	bl	800c550 <STM_NextState>
    break;
 8001790:	e03d      	b.n	800180e <TSK_MediumFrequencyTaskM1+0x376>

  case STOP:
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001792:	f000 f955 	bl	8001a40 <TSK_StopPermanencyTimeHasElapsedM1>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d037      	beq.n	800180c <TSK_MediumFrequencyTaskM1+0x374>
    {
      STM_NextState( &STM[M1], STOP_IDLE );
 800179c:	2109      	movs	r1, #9
 800179e:	480b      	ldr	r0, [pc, #44]	; (80017cc <TSK_MediumFrequencyTaskM1+0x334>)
 80017a0:	f00a fed6 	bl	800c550 <STM_NextState>
    }
    break;
 80017a4:	e032      	b.n	800180c <TSK_MediumFrequencyTaskM1+0x374>

  case STOP_IDLE:
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <TSK_MediumFrequencyTaskM1+0x348>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	490e      	ldr	r1, [pc, #56]	; (80017e4 <TSK_MediumFrequencyTaskM1+0x34c>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f00a fcf1 	bl	800c194 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 80017b2:	480c      	ldr	r0, [pc, #48]	; (80017e4 <TSK_MediumFrequencyTaskM1+0x34c>)
 80017b4:	f00b fa9f 	bl	800ccf6 <VSS_Clear>

    /* USER CODE BEGIN MediumFrequencyTask M1 5 */

    /* USER CODE END MediumFrequencyTask M1 5 */
    STM_NextState( &STM[M1], IDLE );
 80017b8:	2100      	movs	r1, #0
 80017ba:	4804      	ldr	r0, [pc, #16]	; (80017cc <TSK_MediumFrequencyTaskM1+0x334>)
 80017bc:	f00a fec8 	bl	800c550 <STM_NextState>
    break;
 80017c0:	e025      	b.n	800180e <TSK_MediumFrequencyTaskM1+0x376>
 80017c2:	bf00      	nop
 80017c4:	200002f4 	.word	0x200002f4
 80017c8:	200009ac 	.word	0x200009ac
 80017cc:	200009a0 	.word	0x200009a0
 80017d0:	200008f8 	.word	0x200008f8
 80017d4:	200001cc 	.word	0x200001cc
 80017d8:	200008ec 	.word	0x200008ec
 80017dc:	20000900 	.word	0x20000900
 80017e0:	200009b4 	.word	0x200009b4
 80017e4:	200002bc 	.word	0x200002bc
 80017e8:	200009a8 	.word	0x200009a8
 80017ec:	200008f0 	.word	0x200008f0

  default:
    break;
 80017f0:	bf00      	nop
 80017f2:	e00c      	b.n	800180e <TSK_MediumFrequencyTaskM1+0x376>
    break;
 80017f4:	bf00      	nop
 80017f6:	e00a      	b.n	800180e <TSK_MediumFrequencyTaskM1+0x376>
    break;
 80017f8:	bf00      	nop
 80017fa:	e008      	b.n	800180e <TSK_MediumFrequencyTaskM1+0x376>
    break;
 80017fc:	bf00      	nop
 80017fe:	e006      	b.n	800180e <TSK_MediumFrequencyTaskM1+0x376>
    break;
 8001800:	bf00      	nop
 8001802:	e004      	b.n	800180e <TSK_MediumFrequencyTaskM1+0x376>
    break;
 8001804:	bf00      	nop
 8001806:	e002      	b.n	800180e <TSK_MediumFrequencyTaskM1+0x376>
    break;
 8001808:	bf00      	nop
 800180a:	e000      	b.n	800180e <TSK_MediumFrequencyTaskM1+0x376>
    break;
 800180c:	bf00      	nop
  }

  /* USER CODE BEGIN MediumFrequencyTask M1 6 */

  /* USER CODE END MediumFrequencyTask M1 6 */
}
 800180e:	bf00      	nop
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bdb0      	pop	{r4, r5, r7, pc}
 8001816:	bf00      	nop

08001818 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FOC_Clear 0 */

  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
 8001822:	2300      	movs	r3, #0
 8001824:	82bb      	strh	r3, [r7, #20]
 8001826:	2300      	movs	r3, #0
 8001828:	82fb      	strh	r3, [r7, #22]
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
 800182a:	2300      	movs	r3, #0
 800182c:	823b      	strh	r3, [r7, #16]
 800182e:	2300      	movs	r3, #0
 8001830:	827b      	strh	r3, [r7, #18]
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};
 8001832:	2300      	movs	r3, #0
 8001834:	81bb      	strh	r3, [r7, #12]
 8001836:	2300      	movs	r3, #0
 8001838:	81fb      	strh	r3, [r7, #14]
  
  FOCVars[bMotor].Iab = NULL_ab;
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	4a3c      	ldr	r2, [pc, #240]	; (8001930 <FOC_Clear+0x118>)
 800183e:	2126      	movs	r1, #38	; 0x26
 8001840:	fb01 f303 	mul.w	r3, r1, r3
 8001844:	4413      	add	r3, r2
 8001846:	461a      	mov	r2, r3
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4a37      	ldr	r2, [pc, #220]	; (8001930 <FOC_Clear+0x118>)
 8001854:	2126      	movs	r1, #38	; 0x26
 8001856:	fb01 f303 	mul.w	r3, r1, r3
 800185a:	4413      	add	r3, r2
 800185c:	3304      	adds	r3, #4
 800185e:	461a      	mov	r2, r3
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	4a31      	ldr	r2, [pc, #196]	; (8001930 <FOC_Clear+0x118>)
 800186c:	2126      	movs	r1, #38	; 0x26
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	4413      	add	r3, r2
 8001874:	330c      	adds	r3, #12
 8001876:	461a      	mov	r2, r3
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Iqdref = NULL_qd;
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	4a2b      	ldr	r2, [pc, #172]	; (8001930 <FOC_Clear+0x118>)
 8001884:	2126      	movs	r1, #38	; 0x26
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	3310      	adds	r3, #16
 800188e:	461a      	mov	r2, r3
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4a25      	ldr	r2, [pc, #148]	; (8001930 <FOC_Clear+0x118>)
 800189c:	2126      	movs	r1, #38	; 0x26
 800189e:	fb01 f303 	mul.w	r3, r1, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	331e      	adds	r3, #30
 80018a6:	2200      	movs	r2, #0
 80018a8:	801a      	strh	r2, [r3, #0]
  FOCVars[bMotor].Vqd = NULL_qd;
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	4a20      	ldr	r2, [pc, #128]	; (8001930 <FOC_Clear+0x118>)
 80018ae:	2126      	movs	r1, #38	; 0x26
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	3310      	adds	r3, #16
 80018b8:	3306      	adds	r3, #6
 80018ba:	f107 0210 	add.w	r2, r7, #16
 80018be:	6810      	ldr	r0, [r2, #0]
 80018c0:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4a1a      	ldr	r2, [pc, #104]	; (8001930 <FOC_Clear+0x118>)
 80018c6:	2126      	movs	r1, #38	; 0x26
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	3318      	adds	r3, #24
 80018d0:	3302      	adds	r3, #2
 80018d2:	f107 020c 	add.w	r2, r7, #12
 80018d6:	6810      	ldr	r0, [r2, #0]
 80018d8:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <FOC_Clear+0x118>)
 80018de:	2126      	movs	r1, #38	; 0x26
 80018e0:	fb01 f303 	mul.w	r3, r1, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	3320      	adds	r3, #32
 80018e8:	2200      	movs	r2, #0
 80018ea:	801a      	strh	r2, [r3, #0]

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4a11      	ldr	r2, [pc, #68]	; (8001934 <FOC_Clear+0x11c>)
 80018f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f007 fed7 	bl	80096aa <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <FOC_Clear+0x120>)
 8001900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f007 fecf 	bl	80096aa <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	4a0b      	ldr	r2, [pc, #44]	; (800193c <FOC_Clear+0x124>)
 8001910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001914:	4618      	mov	r0, r3
 8001916:	f00a fc57 	bl	800c1c8 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	4a08      	ldr	r2, [pc, #32]	; (8001940 <FOC_Clear+0x128>)
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	4618      	mov	r0, r3
 8001924:	f008 fb18 	bl	8009f58 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001928:	bf00      	nop
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000900 	.word	0x20000900
 8001934:	200008f4 	.word	0x200008f4
 8001938:	200009b0 	.word	0x200009b0
 800193c:	200009b4 	.word	0x200009b4
 8001940:	200008ec 	.word	0x200008ec

08001944 <FOC_InitAdditionalMethods>:
  *         START_TO_RUN state
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
    
  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	4a18      	ldr	r2, [pc, #96]	; (80019cc <FOC_CalcCurrRef+0x70>)
 800196a:	2126      	movs	r1, #38	; 0x26
 800196c:	fb01 f303 	mul.w	r3, r1, r3
 8001970:	4413      	add	r3, r2
 8001972:	3324      	adds	r3, #36	; 0x24
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d123      	bne.n	80019c2 <FOC_CalcCurrRef+0x66>
  {
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <FOC_CalcCurrRef+0x74>)
 800197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001982:	79fc      	ldrb	r4, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f00a fd15 	bl	800c3b4 <STC_CalcTorqueReference>
 800198a:	4603      	mov	r3, r0
 800198c:	4619      	mov	r1, r3
 800198e:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <FOC_CalcCurrRef+0x70>)
 8001990:	2326      	movs	r3, #38	; 0x26
 8001992:	fb03 f304 	mul.w	r3, r3, r4
 8001996:	4413      	add	r3, r2
 8001998:	331e      	adds	r3, #30
 800199a:	460a      	mov	r2, r1
 800199c:	801a      	strh	r2, [r3, #0]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800199e:	79fa      	ldrb	r2, [r7, #7]
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	490a      	ldr	r1, [pc, #40]	; (80019cc <FOC_CalcCurrRef+0x70>)
 80019a4:	2026      	movs	r0, #38	; 0x26
 80019a6:	fb00 f202 	mul.w	r2, r0, r2
 80019aa:	440a      	add	r2, r1
 80019ac:	321e      	adds	r2, #30
 80019ae:	f9b2 0000 	ldrsh.w	r0, [r2]
 80019b2:	4a06      	ldr	r2, [pc, #24]	; (80019cc <FOC_CalcCurrRef+0x70>)
 80019b4:	2126      	movs	r1, #38	; 0x26
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	3310      	adds	r3, #16
 80019be:	4602      	mov	r2, r0
 80019c0:	801a      	strh	r2, [r3, #0]

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd90      	pop	{r4, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000900 	.word	0x20000900
 80019d0:	200009b4 	.word	0x200009b4

080019d4 <TSK_SetChargeBootCapDelayM1>:
  *         for drivers boot capacitors charging of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	80fb      	strh	r3, [r7, #6]
   hBootCapDelayCounterM1 = hTickCount;
 80019de:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <TSK_SetChargeBootCapDelayM1+0x1c>)
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	8013      	strh	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	200006d2 	.word	0x200006d2

080019f4 <TSK_ChargeBootCapDelayHasElapsedM1>:
  *         capacitors of motor 1 has elapsed
  * @param  none
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
  bool retVal = false;
 80019fa:	2300      	movs	r3, #0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if (hBootCapDelayCounterM1 == 0)
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <TSK_ChargeBootCapDelayHasElapsedM1+0x28>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <TSK_ChargeBootCapDelayHasElapsedM1+0x18>
  {
    retVal = true;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	200006d2 	.word	0x200006d2

08001a20 <TSK_SetStopPermanencyTimeM1>:
  *         time in STOP state of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	80fb      	strh	r3, [r7, #6]
  hStopPermanencyCounterM1 = hTickCount;
 8001a2a:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <TSK_SetStopPermanencyTimeM1+0x1c>)
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	8013      	strh	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	200006d4 	.word	0x200006d4

08001a40 <TSK_StopPermanencyTimeHasElapsedM1>:
  *         of motor 1 has elapsed
  * @param  none
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
  bool retVal = false;
 8001a46:	2300      	movs	r3, #0
 8001a48:	71fb      	strb	r3, [r7, #7]
  if (hStopPermanencyCounterM1 == 0)
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <TSK_StopPermanencyTimeHasElapsedM1+0x28>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <TSK_StopPermanencyTimeHasElapsedM1+0x18>
  {
    retVal = true;
 8001a54:	2301      	movs	r3, #1
 8001a56:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 8001a58:	79fb      	ldrb	r3, [r7, #7]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	200006d4 	.word	0x200006d4

08001a6c <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  
  uint8_t bMotorNbr = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]
 

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001a76:	4a35      	ldr	r2, [pc, #212]	; (8001b4c <TSK_HighFrequencyTask+0xe0>)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	321a      	adds	r2, #26
 8001a7c:	6810      	ldr	r0, [r2, #0]
 8001a7e:	6018      	str	r0, [r3, #0]
  if ( STM[M1].bState == SWITCH_OVER )
 8001a80:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <TSK_HighFrequencyTask+0xe4>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b13      	cmp	r3, #19
 8001a86:	d113      	bne.n	8001ab0 <TSK_HighFrequencyTask+0x44>
  {
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001a88:	4b32      	ldr	r3, [pc, #200]	; (8001b54 <TSK_HighFrequencyTask+0xe8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00a fa63 	bl	800bf58 <REMNG_RampCompleted>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f083 0301 	eor.w	r3, r3, #1
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d008      	beq.n	8001ab0 <TSK_HighFrequencyTask+0x44>
    {
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 8001a9e:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <TSK_HighFrequencyTask+0xe8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f00a f999 	bl	800bdda <REMNG_Calc>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <TSK_HighFrequencyTask+0xe0>)
 8001aae:	821a      	strh	r2, [r3, #16]
    }
  }
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_1 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_1 */
  hFOCreturn = FOC_CurrControllerM1();
 8001ab0:	f000 f85a 	bl	8001b68 <FOC_CurrControllerM1>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	82bb      	strh	r3, [r7, #20]
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_2 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_2 */
  if(hFOCreturn == MC_FOC_DURATION)
 8001ab8:	8abb      	ldrh	r3, [r7, #20]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d105      	bne.n	8001aca <TSK_HighFrequencyTask+0x5e>
  {
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4823      	ldr	r0, [pc, #140]	; (8001b50 <TSK_HighFrequencyTask+0xe4>)
 8001ac4:	f00a fea6 	bl	800c814 <STM_FaultProcessing>
 8001ac8:	e03a      	b.n	8001b40 <TSK_HighFrequencyTask+0xd4>
  }
  else
  {
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1); 
 8001aca:	4823      	ldr	r0, [pc, #140]	; (8001b58 <TSK_HighFrequencyTask+0xec>)
 8001acc:	f00b fc34 	bl	800d338 <RUC_FirstAccelerationStageReached>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	74fb      	strb	r3, [r7, #19]
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <TSK_HighFrequencyTask+0xe0>)
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	3204      	adds	r2, #4
 8001adc:	6810      	ldr	r0, [r2, #0]
 8001ade:	6018      	str	r0, [r3, #0]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <TSK_HighFrequencyTask+0xf0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f007 fb43 	bl	8009170 <VBS_GetAvBusVoltage_d>
 8001aea:	4603      	mov	r3, r0
 8001aec:	81bb      	strh	r3, [r7, #12]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	4619      	mov	r1, r3
 8001af2:	481b      	ldr	r0, [pc, #108]	; (8001b60 <TSK_HighFrequencyTask+0xf4>)
 8001af4:	f00b fc56 	bl	800d3a4 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001af8:	4819      	ldr	r0, [pc, #100]	; (8001b60 <TSK_HighFrequencyTask+0xf4>)
 8001afa:	f00b fddf 	bl	800d6bc <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 8001afe:	7cfb      	ldrb	r3, [r7, #19]
 8001b00:	f083 0301 	eor.w	r3, r3, #1
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <TSK_HighFrequencyTask+0xa4>
    {
      STO_ResetPLL(&STO_PLL_M1);
 8001b0a:	4815      	ldr	r0, [pc, #84]	; (8001b60 <TSK_HighFrequencyTask+0xf4>)
 8001b0c:	f00b ff12 	bl	800d934 <STO_ResetPLL>
    }  
    hState = STM_GetState(&STM[M1]);
 8001b10:	480f      	ldr	r0, [pc, #60]	; (8001b50 <TSK_HighFrequencyTask+0xe4>)
 8001b12:	f00a febd 	bl	800c890 <STM_GetState>
 8001b16:	4603      	mov	r3, r0
 8001b18:	823b      	strh	r3, [r7, #16]
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8001b1a:	8a3b      	ldrh	r3, [r7, #16]
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d005      	beq.n	8001b2c <TSK_HighFrequencyTask+0xc0>
 8001b20:	8a3b      	ldrh	r3, [r7, #16]
 8001b22:	2b13      	cmp	r3, #19
 8001b24:	d002      	beq.n	8001b2c <TSK_HighFrequencyTask+0xc0>
 8001b26:	8a3b      	ldrh	r3, [r7, #16]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d109      	bne.n	8001b40 <TSK_HighFrequencyTask+0xd4>
    {
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);      
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <TSK_HighFrequencyTask+0xf4>)
 8001b2e:	f00a fa56 	bl	800bfde <SPD_GetElAngle>
 8001b32:	4603      	mov	r3, r0
 8001b34:	807b      	strh	r3, [r7, #2]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);  
 8001b36:	1cbb      	adds	r3, r7, #2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480a      	ldr	r0, [pc, #40]	; (8001b64 <TSK_HighFrequencyTask+0xf8>)
 8001b3c:	f00b f91b 	bl	800cd76 <VSS_CalcElAngle>
  }
  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  return bMotorNbr;
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000900 	.word	0x20000900
 8001b50:	200009a0 	.word	0x200009a0
 8001b54:	200009a8 	.word	0x200009a8
 8001b58:	200001cc 	.word	0x200001cc
 8001b5c:	20000980 	.word	0x20000980
 8001b60:	200002f4 	.word	0x200002f4
 8001b64:	200002bc 	.word	0x200002bc

08001b68 <FOC_CurrControllerM1>:
  * @param this related object of class CFOC.
  * @retval int16_t It returns MC_NO_FAULTS if the FOC has been ended before
  *         next PWM Update event, MC_FOC_DURATION otherwise
  */
inline uint16_t FOC_CurrControllerM1(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001b6e:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <FOC_CurrControllerM1+0x120>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f00a fb1c 	bl	800c1b0 <STC_GetSpeedSensor>
 8001b78:	61f8      	str	r0, [r7, #28]
  hElAngle = SPD_GetElAngle(speedHandle);
 8001b7a:	69f8      	ldr	r0, [r7, #28]
 8001b7c:	f00a fa2f 	bl	800bfde <SPD_GetElAngle>
 8001b80:	4603      	mov	r3, r0
 8001b82:	837b      	strh	r3, [r7, #26]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8001b84:	69f8      	ldr	r0, [r7, #28]
 8001b86:	f00a fa44 	bl	800c012 <SPD_GetInstElSpeedDpp>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	8b7b      	ldrh	r3, [r7, #26]
 8001b90:	4413      	add	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	837b      	strh	r3, [r7, #26]
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001b96:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <FOC_CurrControllerM1+0x124>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f107 020c 	add.w	r2, r7, #12
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f007 ffc2 	bl	8009b2a <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff f953 	bl	8000e52 <MCM_Clarke>
 8001bac:	4603      	mov	r3, r0
 8001bae:	60bb      	str	r3, [r7, #8]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001bb0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	68b8      	ldr	r0, [r7, #8]
 8001bb8:	f7ff f995 	bl	8000ee6 <MCM_Park>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	617b      	str	r3, [r7, #20]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001bc0:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <FOC_CurrControllerM1+0x128>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001bc4:	4b33      	ldr	r3, [pc, #204]	; (8001c94 <FOC_CurrControllerM1+0x12c>)
 8001bc6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001bd0:	1acb      	subs	r3, r1, r3
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	f007 fdab 	bl	8009730 <PI_Controller>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	823b      	strh	r3, [r7, #16]

  Vqd.d = PI_Controller(pPIDId[M1],
 8001bde:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <FOC_CurrControllerM1+0x130>)
 8001be0:	681a      	ldr	r2, [r3, #0]
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001be2:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <FOC_CurrControllerM1+0x12c>)
 8001be4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001bee:	1acb      	subs	r3, r1, r3
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f007 fd9c 	bl	8009730 <PI_Controller>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	827b      	strh	r3, [r7, #18]
  
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <FOC_CurrControllerM1+0x134>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6939      	ldr	r1, [r7, #16]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f007 fad9 	bl	80091ba <Circle_Limitation>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	613b      	str	r3, [r7, #16]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001c0c:	69f8      	ldr	r0, [r7, #28]
 8001c0e:	f00a fa00 	bl	800c012 <SPD_GetInstElSpeedDpp>
 8001c12:	2300      	movs	r3, #0
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	8b7b      	ldrh	r3, [r7, #26]
 8001c18:	4413      	add	r3, r2
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	837b      	strh	r3, [r7, #26]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001c1e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001c22:	4619      	mov	r1, r3
 8001c24:	6938      	ldr	r0, [r7, #16]
 8001c26:	f7ff f9d6 	bl	8000fd6 <MCM_Rev_Park>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	607b      	str	r3, [r7, #4]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001c2e:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <FOC_CurrControllerM1+0x124>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f007 ff86 	bl	8009b46 <PWMC_SetPhaseVoltage>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	833b      	strh	r3, [r7, #24]
  FOCVars[M1].Vqd = Vqd;
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <FOC_CurrControllerM1+0x12c>)
 8001c40:	3316      	adds	r3, #22
 8001c42:	f107 0210 	add.w	r2, r7, #16
 8001c46:	6810      	ldr	r0, [r2, #0]
 8001c48:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Iab = Iab;
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <FOC_CurrControllerM1+0x12c>)
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	6010      	str	r0, [r2, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <FOC_CurrControllerM1+0x12c>)
 8001c58:	3304      	adds	r3, #4
 8001c5a:	f107 0208 	add.w	r2, r7, #8
 8001c5e:	6810      	ldr	r0, [r2, #0]
 8001c60:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Iqd = Iqd;
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <FOC_CurrControllerM1+0x12c>)
 8001c64:	330c      	adds	r3, #12
 8001c66:	f107 0214 	add.w	r2, r7, #20
 8001c6a:	6810      	ldr	r0, [r2, #0]
 8001c6c:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <FOC_CurrControllerM1+0x12c>)
 8001c70:	331a      	adds	r3, #26
 8001c72:	1d3a      	adds	r2, r7, #4
 8001c74:	6810      	ldr	r0, [r2, #0]
 8001c76:	6018      	str	r0, [r3, #0]
  FOCVars[M1].hElAngle = hElAngle;
 8001c78:	4a06      	ldr	r2, [pc, #24]	; (8001c94 <FOC_CurrControllerM1+0x12c>)
 8001c7a:	8b7b      	ldrh	r3, [r7, #26]
 8001c7c:	8413      	strh	r3, [r2, #32]
  return(hCodeError);
 8001c7e:	8b3b      	ldrh	r3, [r7, #24]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3720      	adds	r7, #32
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200009b4 	.word	0x200009b4
 8001c8c:	200008ec 	.word	0x200008ec
 8001c90:	200008f4 	.word	0x200008f4
 8001c94:	20000900 	.word	0x20000900
 8001c98:	200009b0 	.word	0x200009b0
 8001c9c:	2000097c 	.word	0x2000097c

08001ca0 <TSK_SafetyTask>:
  * @brief  Executes safety checks (e.g. bus voltage and temperature) for all drive instances. 
  *
  * Faults flags are updated here.
  */
__weak void TSK_SafetyTask(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_SafetyTask 0 */

  /* USER CODE END TSK_SafetyTask 0 */
  if (bMCBootCompleted == 1)
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <TSK_SafetyTask+0x1c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d104      	bne.n	8001cb6 <TSK_SafetyTask+0x16>
  {  
    TSK_SafetyTask_PWMOFF(M1);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f000 f807 	bl	8001cc0 <TSK_SafetyTask_PWMOFF>
    /* User conversion execution */
    RCM_ExecUserConv ();
 8001cb2:	f001 f9a3 	bl	8002ffc <RCM_ExecUserConv>
  /* USER CODE BEGIN TSK_SafetyTask 1 */

  /* USER CODE END TSK_SafetyTask 1 */
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200006d6 	.word	0x200006d6

08001cc0 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 0 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  
  uint16_t CodeReturn = MC_NO_ERROR;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	81fb      	strh	r3, [r7, #14]
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
 8001cce:	230e      	movs	r3, #14
 8001cd0:	81bb      	strh	r3, [r7, #12]

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	f107 0210 	add.w	r2, r7, #16
 8001cda:	4413      	add	r3, r2
 8001cdc:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	4a38      	ldr	r2, [pc, #224]	; (8001dc4 <TSK_SafetyTask_PWMOFF+0x104>)
 8001ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f007 fc16 	bl	800951a <NTC_CalcAvTemp>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4023      	ands	r3, r4
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	81fb      	strh	r3, [r7, #14]
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	4a31      	ldr	r2, [pc, #196]	; (8001dc8 <TSK_SafetyTask_PWMOFF+0x108>)
 8001d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f008 f974 	bl	8009ff6 <PWMC_CheckOverCurrent>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	461a      	mov	r2, r3
 8001d12:	89fb      	ldrh	r3, [r7, #14]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	81fb      	strh	r3, [r7, #14]
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d114      	bne.n	8001d48 <TSK_SafetyTask_PWMOFF+0x88>
  {
    CodeReturn |=  errMask[bMotor] & RVBS_CalcAvVbusFilt(pBusSensorM1);
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	f107 0210 	add.w	r2, r7, #16
 8001d26:	4413      	add	r3, r2
 8001d28:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <TSK_SafetyTask_PWMOFF+0x10c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f009 ffba 	bl	800bcaa <RVBS_CalcAvVbusFilt>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4023      	ands	r3, r4
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	b21a      	sxth	r2, r3
 8001d3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	81fb      	strh	r3, [r7, #14]
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001d48:	79fa      	ldrb	r2, [r7, #7]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4a1f      	ldr	r2, [pc, #124]	; (8001dd0 <TSK_SafetyTask_PWMOFF+0x110>)
 8001d54:	1898      	adds	r0, r3, r2
 8001d56:	89fb      	ldrh	r3, [r7, #14]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	89fb      	ldrh	r3, [r7, #14]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f00a fd58 	bl	800c814 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001d64:	79fa      	ldrb	r2, [r7, #7]
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <TSK_SafetyTask_PWMOFF+0x110>)
 8001d70:	4413      	add	r3, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f00a fd8c 	bl	800c890 <STM_GetState>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b0a      	cmp	r3, #10
 8001d7c:	d002      	beq.n	8001d84 <TSK_SafetyTask_PWMOFF+0xc4>
 8001d7e:	2b0b      	cmp	r3, #11
 8001d80:	d013      	beq.n	8001daa <TSK_SafetyTask_PWMOFF+0xea>
	/* USER CODE BEGIN TSK_SafetyTask_PWMOFF 2 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 2 */
    break;
  default:
    break;
 8001d82:	e01a      	b.n	8001dba <TSK_SafetyTask_PWMOFF+0xfa>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	4a10      	ldr	r2, [pc, #64]	; (8001dc8 <TSK_SafetyTask_PWMOFF+0x108>)
 8001d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f008 f8e3 	bl	8009f58 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fd3f 	bl	8001818 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <TSK_SafetyTask_PWMOFF+0x114>)
 8001d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f007 faf3 	bl	800938e <MPM_Clear>
    break;
 8001da8:	e007      	b.n	8001dba <TSK_SafetyTask_PWMOFF+0xfa>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <TSK_SafetyTask_PWMOFF+0x108>)
 8001dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f008 f8d0 	bl	8009f58 <PWMC_SwitchOffPWM>
    break;
 8001db8:	bf00      	nop
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200008e8 	.word	0x200008e8
 8001dc8:	200008ec 	.word	0x200008ec
 8001dcc:	20000980 	.word	0x20000980
 8001dd0:	200009a0 	.word	0x200009a0
 8001dd4:	200009ac 	.word	0x200009ac

08001dd8 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected  
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <TSK_HardwareFaultTask+0x1c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f009 faf7 	bl	800b3d4 <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2180      	movs	r1, #128	; 0x80
 8001dea:	4803      	ldr	r0, [pc, #12]	; (8001df8 <TSK_HardwareFaultTask+0x20>)
 8001dec:	f00a fd12 	bl	800c814 <STM_FaultProcessing>
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	200008ec 	.word	0x200008ec
 8001df8:	200009a0 	.word	0x200009a0

08001dfc <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration 
  */
__weak void mc_lock_pins (void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
LL_GPIO_LockPin(M1_CURR_SHUNT_V_GPIO_Port, M1_CURR_SHUNT_V_Pin);
 8001e00:	2101      	movs	r1, #1
 8001e02:	4825      	ldr	r0, [pc, #148]	; (8001e98 <mc_lock_pins+0x9c>)
 8001e04:	f7ff f9b2 	bl	800116c <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_W_GPIO_Port, M1_CURR_SHUNT_W_Pin);
 8001e08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e0c:	4822      	ldr	r0, [pc, #136]	; (8001e98 <mc_lock_pins+0x9c>)
 8001e0e:	f7ff f9ad 	bl	800116c <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_U_GPIO_Port, M1_CURR_SHUNT_U_Pin);
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e18:	f7ff f9a8 	bl	800116c <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 8001e1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e20:	481d      	ldr	r0, [pc, #116]	; (8001e98 <mc_lock_pins+0x9c>)
 8001e22:	f7ff f9a3 	bl	800116c <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 8001e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2e:	f7ff f99d 	bl	800116c <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 8001e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3a:	f7ff f997 	bl	800116c <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
 8001e3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e46:	f7ff f991 	bl	800116c <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
 8001e4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e52:	f7ff f98b 	bl	800116c <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
 8001e56:	2102      	movs	r1, #2
 8001e58:	480f      	ldr	r0, [pc, #60]	; (8001e98 <mc_lock_pins+0x9c>)
 8001e5a:	f7ff f987 	bl	800116c <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
 8001e5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e66:	f7ff f981 	bl	800116c <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e70:	f7ff f97c 	bl	800116c <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
 8001e74:	2104      	movs	r1, #4
 8001e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7a:	f7ff f977 	bl	800116c <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
 8001e7e:	2102      	movs	r1, #2
 8001e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e84:	f7ff f972 	bl	800116c <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
 8001e88:	2101      	movs	r1, #1
 8001e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8e:	f7ff f96d 	bl	800116c <LL_GPIO_LockPin>
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	48000400 	.word	0x48000400

08001e9c <MCP_Init>:
               FCP_Handle_t * pFCP,
               FCP_SendFct_t fFcpSend, 
               FCP_ReceiveFct_t fFcpReceive, 
               FCP_AbortReceiveFct_t fFcpAbortReceive, 
               const char* s_fwVer )
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
  pHandle->pFCP = pFCP;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	619a      	str	r2, [r3, #24]
  pHandle->s_fwVer = s_fwVer;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  FCP_SetClient( pFCP, pHandle,
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MCP_Init+0x4c>)
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <MCP_Init+0x50>)
 8001ebe:	4a0c      	ldr	r2, [pc, #48]	; (8001ef0 <MCP_Init+0x54>)
 8001ec0:	68f9      	ldr	r1, [r7, #12]
 8001ec2:	68b8      	ldr	r0, [r7, #8]
 8001ec4:	f007 fa0d 	bl	80092e2 <FCP_SetClient>
                 (FCP_SentFrameCallback_t) & MCP_SentFrame,
                 (FCP_ReceivedFrameCallback_t) & MCP_ReceivedFrame,
                 (FCP_RxTimeoutCallback_t) & MCP_OnTimeOut );
  pHandle->fFcpSend = fFcpSend;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	61da      	str	r2, [r3, #28]
  pHandle->fFcpReceive = fFcpReceive;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	621a      	str	r2, [r3, #32]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24

  MCP_WaitNextFrame(pHandle);
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f815 	bl	8001f0a <MCP_WaitNextFrame>
}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	08001ef5 	.word	0x08001ef5
 8001eec:	08001f5d 	.word	0x08001f5d
 8001ef0:	08001f3b 	.word	0x08001f3b

08001ef4 <MCP_OnTimeOut>:
* @brief  Function used to set and report the Time Out.
*
* @param  pHandle Pointer on the handle of the component.
*/
__weak void MCP_OnTimeOut(MCP_Handle_t *pHandle)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
     MCP_WaitNextFrame(pHandle);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f804 	bl	8001f0a <MCP_WaitNextFrame>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <MCP_WaitNextFrame>:
* @brief  Function used to check next reception frame
*
* @param  pHandle Pointer on the handle of the component.
*/
__weak void MCP_WaitNextFrame(MCP_Handle_t *pHandle)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6992      	ldr	r2, [r2, #24]
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6992      	ldr	r2, [r2, #24]
 8001f2e:	4610      	mov	r0, r2
 8001f30:	4798      	blx	r3
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <MCP_SentFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_SentFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	461a      	mov	r2, r3
 8001f46:	460b      	mov	r3, r1
 8001f48:	72fb      	strb	r3, [r7, #11]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	72bb      	strb	r3, [r7, #10]
    MCP_WaitNextFrame(pHandle);
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f7ff ffdb 	bl	8001f0a <MCP_WaitNextFrame>
}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b0a9      	sub	sp, #164	; 0xa4
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	461a      	mov	r2, r3
 8001f68:	460b      	mov	r3, r1
 8001f6a:	72fb      	strb	r3, [r7, #11]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	72bb      	strb	r3, [r7, #10]
  bool RequireAck = true;
 8001f70:	2301      	movs	r3, #1
 8001f72:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  bool bNoError = false; // Default is error
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
 8001f7c:	7afb      	ldrb	r3, [r7, #11]
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  if (bMotorSelection != 0)
 8001f84:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d014      	beq.n	8001fb6 <MCP_ReceivedFrame+0x5a>
  {
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001f92:	3b01      	subs	r3, #1
 8001f94:	461a      	mov	r2, r3
 8001f96:	2100      	movs	r1, #0
 8001f98:	f001 fca6 	bl	80038e8 <UI_SetReg>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d004      	beq.n	8001fac <MCP_ReceivedFrame+0x50>
    {
      Code &= 0x1F; /* Mask: 0001|1111 */
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	72fb      	strb	r3, [r7, #11]
 8001faa:	e004      	b.n	8001fb6 <MCP_ReceivedFrame+0x5a>

    }
    else
    {
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
 8001fac:	2300      	movs	r3, #0
 8001fae:	72fb      	strb	r3, [r7, #11]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001fb0:	230b      	movs	r3, #11
 8001fb2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }
  }

  switch (Code)
 8001fb6:	7afb      	ldrb	r3, [r7, #11]
 8001fb8:	2b12      	cmp	r3, #18
 8001fba:	f200 8543 	bhi.w	8002a44 <MCP_ReceivedFrame+0xae8>
 8001fbe:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <MCP_ReceivedFrame+0x68>)
 8001fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc4:	08002a4d 	.word	0x08002a4d
 8001fc8:	08002011 	.word	0x08002011
 8001fcc:	08002311 	.word	0x08002311
 8001fd0:	08002649 	.word	0x08002649
 8001fd4:	08002a45 	.word	0x08002a45
 8001fd8:	08002a45 	.word	0x08002a45
 8001fdc:	0800266d 	.word	0x0800266d
 8001fe0:	08002731 	.word	0x08002731
 8001fe4:	080027e3 	.word	0x080027e3
 8001fe8:	08002883 	.word	0x08002883
 8001fec:	0800292b 	.word	0x0800292b
 8001ff0:	08002979 	.word	0x08002979
 8001ff4:	080029bf 	.word	0x080029bf
 8001ff8:	08002787 	.word	0x08002787
 8001ffc:	08002a45 	.word	0x08002a45
 8002000:	08002a45 	.word	0x08002a45
 8002004:	08002a45 	.word	0x08002a45
 8002008:	08002a45 	.word	0x08002a45
 800200c:	08002a4d 	.word	0x08002a4d
  {
  case MC_PROTOCOL_CODE_SET_REG:
    {
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
      bErrorCode = ERROR_CODE_WRONG_SET;
 8002018:	2305      	movs	r3, #5
 800201a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

      switch (bRegID)
 800201e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002022:	2b88      	cmp	r3, #136	; 0x88
 8002024:	f200 816f 	bhi.w	8002306 <MCP_ReceivedFrame+0x3aa>
 8002028:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <MCP_ReceivedFrame+0xd4>)
 800202a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202e:	bf00      	nop
 8002030:	08002255 	.word	0x08002255
 8002034:	08002307 	.word	0x08002307
 8002038:	08002307 	.word	0x08002307
 800203c:	08002273 	.word	0x08002273
 8002040:	08002307 	.word	0x08002307
 8002044:	0800229f 	.word	0x0800229f
 8002048:	0800229f 	.word	0x0800229f
 800204c:	0800229f 	.word	0x0800229f
 8002050:	0800229f 	.word	0x0800229f
 8002054:	0800229f 	.word	0x0800229f
 8002058:	0800229f 	.word	0x0800229f
 800205c:	0800229f 	.word	0x0800229f
 8002060:	0800229f 	.word	0x0800229f
 8002064:	0800229f 	.word	0x0800229f
 8002068:	0800229f 	.word	0x0800229f
 800206c:	0800229f 	.word	0x0800229f
 8002070:	080022c9 	.word	0x080022c9
 8002074:	080022c9 	.word	0x080022c9
 8002078:	08002307 	.word	0x08002307
 800207c:	08002307 	.word	0x08002307
 8002080:	0800229f 	.word	0x0800229f
 8002084:	0800229f 	.word	0x0800229f
 8002088:	0800229f 	.word	0x0800229f
 800208c:	0800229f 	.word	0x0800229f
 8002090:	0800229f 	.word	0x0800229f
 8002094:	08002307 	.word	0x08002307
 8002098:	08002307 	.word	0x08002307
 800209c:	08002307 	.word	0x08002307
 80020a0:	0800228f 	.word	0x0800228f
 80020a4:	08002297 	.word	0x08002297
 80020a8:	08002307 	.word	0x08002307
 80020ac:	08002307 	.word	0x08002307
 80020b0:	08002307 	.word	0x08002307
 80020b4:	08002307 	.word	0x08002307
 80020b8:	08002307 	.word	0x08002307
 80020bc:	08002307 	.word	0x08002307
 80020c0:	08002307 	.word	0x08002307
 80020c4:	08002307 	.word	0x08002307
 80020c8:	08002307 	.word	0x08002307
 80020cc:	08002307 	.word	0x08002307
 80020d0:	08002307 	.word	0x08002307
 80020d4:	08002307 	.word	0x08002307
 80020d8:	08002307 	.word	0x08002307
 80020dc:	08002307 	.word	0x08002307
 80020e0:	08002307 	.word	0x08002307
 80020e4:	08002307 	.word	0x08002307
 80020e8:	08002307 	.word	0x08002307
 80020ec:	08002307 	.word	0x08002307
 80020f0:	08002307 	.word	0x08002307
 80020f4:	08002307 	.word	0x08002307
 80020f8:	08002307 	.word	0x08002307
 80020fc:	08002307 	.word	0x08002307
 8002100:	08002307 	.word	0x08002307
 8002104:	08002307 	.word	0x08002307
 8002108:	08002307 	.word	0x08002307
 800210c:	08002307 	.word	0x08002307
 8002110:	08002307 	.word	0x08002307
 8002114:	08002307 	.word	0x08002307
 8002118:	08002307 	.word	0x08002307
 800211c:	08002307 	.word	0x08002307
 8002120:	08002307 	.word	0x08002307
 8002124:	08002307 	.word	0x08002307
 8002128:	08002307 	.word	0x08002307
 800212c:	08002307 	.word	0x08002307
 8002130:	08002307 	.word	0x08002307
 8002134:	0800229f 	.word	0x0800229f
 8002138:	08002307 	.word	0x08002307
 800213c:	08002307 	.word	0x08002307
 8002140:	08002307 	.word	0x08002307
 8002144:	08002307 	.word	0x08002307
 8002148:	080022c9 	.word	0x080022c9
 800214c:	080022c9 	.word	0x080022c9
 8002150:	080022c9 	.word	0x080022c9
 8002154:	08002307 	.word	0x08002307
 8002158:	08002307 	.word	0x08002307
 800215c:	08002307 	.word	0x08002307
 8002160:	08002307 	.word	0x08002307
 8002164:	08002307 	.word	0x08002307
 8002168:	08002307 	.word	0x08002307
 800216c:	0800229f 	.word	0x0800229f
 8002170:	08002307 	.word	0x08002307
 8002174:	08002307 	.word	0x08002307
 8002178:	08002307 	.word	0x08002307
 800217c:	0800229f 	.word	0x0800229f
 8002180:	0800229f 	.word	0x0800229f
 8002184:	0800229f 	.word	0x0800229f
 8002188:	0800229f 	.word	0x0800229f
 800218c:	0800229f 	.word	0x0800229f
 8002190:	0800229f 	.word	0x0800229f
 8002194:	0800229f 	.word	0x0800229f
 8002198:	08002307 	.word	0x08002307
 800219c:	080022c9 	.word	0x080022c9
 80021a0:	08002307 	.word	0x08002307
 80021a4:	08002307 	.word	0x08002307
 80021a8:	08002307 	.word	0x08002307
 80021ac:	08002307 	.word	0x08002307
 80021b0:	08002307 	.word	0x08002307
 80021b4:	0800229f 	.word	0x0800229f
 80021b8:	08002307 	.word	0x08002307
 80021bc:	08002307 	.word	0x08002307
 80021c0:	0800229f 	.word	0x0800229f
 80021c4:	0800229f 	.word	0x0800229f
 80021c8:	08002307 	.word	0x08002307
 80021cc:	08002307 	.word	0x08002307
 80021d0:	08002307 	.word	0x08002307
 80021d4:	08002307 	.word	0x08002307
 80021d8:	08002307 	.word	0x08002307
 80021dc:	08002307 	.word	0x08002307
 80021e0:	08002307 	.word	0x08002307
 80021e4:	08002307 	.word	0x08002307
 80021e8:	08002307 	.word	0x08002307
 80021ec:	08002307 	.word	0x08002307
 80021f0:	08002307 	.word	0x08002307
 80021f4:	08002307 	.word	0x08002307
 80021f8:	08002307 	.word	0x08002307
 80021fc:	08002307 	.word	0x08002307
 8002200:	08002273 	.word	0x08002273
 8002204:	080022c9 	.word	0x080022c9
 8002208:	080022c9 	.word	0x080022c9
 800220c:	080022c9 	.word	0x080022c9
 8002210:	080022c9 	.word	0x080022c9
 8002214:	080022c9 	.word	0x080022c9
 8002218:	08002307 	.word	0x08002307
 800221c:	08002307 	.word	0x08002307
 8002220:	08002307 	.word	0x08002307
 8002224:	080022c9 	.word	0x080022c9
 8002228:	080022c9 	.word	0x080022c9
 800222c:	08002307 	.word	0x08002307
 8002230:	08002307 	.word	0x08002307
 8002234:	08002307 	.word	0x08002307
 8002238:	08002307 	.word	0x08002307
 800223c:	08002307 	.word	0x08002307
 8002240:	08002307 	.word	0x08002307
 8002244:	08002307 	.word	0x08002307
 8002248:	0800229f 	.word	0x0800229f
 800224c:	0800229f 	.word	0x0800229f
 8002250:	0800229f 	.word	0x0800229f
      {
      case MC_PROTOCOL_REG_TARGET_MOTOR:
        {
          /* Deprecated */
          int32_t wValue = (int32_t)(buffer[1]);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3301      	adds	r3, #1
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	663b      	str	r3, [r7, #96]	; 0x60

          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8002262:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002264:	4618      	mov	r0, r3
 8002266:	f001 fb3f 	bl	80038e8 <UI_SetReg>
 800226a:	4603      	mov	r3, r0
 800226c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002270:	e04d      	b.n	800230e <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_CONTROL_MODE:
      case MC_PROTOCOL_REG_SC_PP:
        {
          /* 8bit variables */
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3301      	adds	r3, #1
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002280:	4619      	mov	r1, r3
 8002282:	f001 fb31 	bl	80038e8 <UI_SetReg>
 8002286:	4603      	mov	r3, r0
 8002288:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 800228c:	e03f      	b.n	800230e <MCP_ReceivedFrame+0x3b2>

      case MC_PROTOCOL_REG_DAC_OUT1:
        {
          bNoError = true; /* No check inside class return always true*/
 800228e:	2301      	movs	r3, #1
 8002290:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002294:	e03b      	b.n	800230e <MCP_ReceivedFrame+0x3b2>

      case MC_PROTOCOL_REG_DAC_OUT2:
        {
          bNoError = true; /* No check inside class return always true*/
 8002296:	2301      	movs	r3, #1
 8002298:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 800229c:	e037      	b.n	800230e <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_POSITION_KP:
      case MC_PROTOCOL_REG_POSITION_KI:
      case MC_PROTOCOL_REG_POSITION_KD:
        {
          /* 16bit variables */
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3301      	adds	r3, #1
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3302      	adds	r3, #2
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	4413      	add	r3, r2
 80022b0:	667b      	str	r3, [r7, #100]	; 0x64
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 80022b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 fb14 	bl	80038e8 <UI_SetReg>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 80022c6:	e022      	b.n	800230e <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_SC_CURRBANDWIDTH:
      case MC_PROTOCOL_REG_SC_STARTUP_SPEED:
      case MC_PROTOCOL_REG_SC_STARTUP_ACC:
        {
          /* 32bit variables */
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3301      	adds	r3, #1
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3302      	adds	r3, #2
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	441a      	add	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3303      	adds	r3, #3
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	041b      	lsls	r3, r3, #16
 80022e2:	441a      	add	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3304      	adds	r3, #4
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	061b      	lsls	r3, r3, #24
 80022ec:	4413      	add	r3, r2
 80022ee:	66bb      	str	r3, [r7, #104]	; 0x68
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 80022f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80022f8:	4618      	mov	r0, r3
 80022fa:	f001 faf5 	bl	80038e8 <UI_SetReg>
 80022fe:	4603      	mov	r3, r0
 8002300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002304:	e003      	b.n	800230e <MCP_ReceivedFrame+0x3b2>

      default:
        {
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8002306:	2302      	movs	r3, #2
 8002308:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        }
        break;
 800230c:	bf00      	nop
      }
    }
    break;
 800230e:	e3a0      	b.n	8002a52 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_GET_REG:
    {
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8002318:	2303      	movs	r3, #3
 800231a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

      switch (bRegID)
 800231e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002322:	2b88      	cmp	r3, #136	; 0x88
 8002324:	f200 8182 	bhi.w	800262c <MCP_ReceivedFrame+0x6d0>
 8002328:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <MCP_ReceivedFrame+0x3d4>)
 800232a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232e:	bf00      	nop
 8002330:	08002555 	.word	0x08002555
 8002334:	080025c1 	.word	0x080025c1
 8002338:	08002555 	.word	0x08002555
 800233c:	08002555 	.word	0x08002555
 8002340:	080025c1 	.word	0x080025c1
 8002344:	0800258b 	.word	0x0800258b
 8002348:	0800258b 	.word	0x0800258b
 800234c:	0800258b 	.word	0x0800258b
 8002350:	0800258b 	.word	0x0800258b
 8002354:	0800258b 	.word	0x0800258b
 8002358:	0800258b 	.word	0x0800258b
 800235c:	0800258b 	.word	0x0800258b
 8002360:	0800258b 	.word	0x0800258b
 8002364:	0800258b 	.word	0x0800258b
 8002368:	0800258b 	.word	0x0800258b
 800236c:	0800258b 	.word	0x0800258b
 8002370:	0800258b 	.word	0x0800258b
 8002374:	0800258b 	.word	0x0800258b
 8002378:	0800258b 	.word	0x0800258b
 800237c:	0800258b 	.word	0x0800258b
 8002380:	0800258b 	.word	0x0800258b
 8002384:	0800258b 	.word	0x0800258b
 8002388:	0800258b 	.word	0x0800258b
 800238c:	0800258b 	.word	0x0800258b
 8002390:	0800258b 	.word	0x0800258b
 8002394:	0800258b 	.word	0x0800258b
 8002398:	0800258b 	.word	0x0800258b
 800239c:	0800258b 	.word	0x0800258b
 80023a0:	08002635 	.word	0x08002635
 80023a4:	08002635 	.word	0x08002635
 80023a8:	080025c1 	.word	0x080025c1
 80023ac:	0800258b 	.word	0x0800258b
 80023b0:	0800258b 	.word	0x0800258b
 80023b4:	0800258b 	.word	0x0800258b
 80023b8:	08002555 	.word	0x08002555
 80023bc:	0800262d 	.word	0x0800262d
 80023c0:	0800262d 	.word	0x0800262d
 80023c4:	0800262d 	.word	0x0800262d
 80023c8:	0800262d 	.word	0x0800262d
 80023cc:	0800262d 	.word	0x0800262d
 80023d0:	0800262d 	.word	0x0800262d
 80023d4:	0800262d 	.word	0x0800262d
 80023d8:	0800262d 	.word	0x0800262d
 80023dc:	0800262d 	.word	0x0800262d
 80023e0:	0800262d 	.word	0x0800262d
 80023e4:	0800262d 	.word	0x0800262d
 80023e8:	0800262d 	.word	0x0800262d
 80023ec:	0800262d 	.word	0x0800262d
 80023f0:	0800262d 	.word	0x0800262d
 80023f4:	0800262d 	.word	0x0800262d
 80023f8:	0800262d 	.word	0x0800262d
 80023fc:	0800262d 	.word	0x0800262d
 8002400:	0800262d 	.word	0x0800262d
 8002404:	0800262d 	.word	0x0800262d
 8002408:	0800262d 	.word	0x0800262d
 800240c:	0800262d 	.word	0x0800262d
 8002410:	0800262d 	.word	0x0800262d
 8002414:	0800262d 	.word	0x0800262d
 8002418:	0800262d 	.word	0x0800262d
 800241c:	0800262d 	.word	0x0800262d
 8002420:	0800262d 	.word	0x0800262d
 8002424:	0800262d 	.word	0x0800262d
 8002428:	0800262d 	.word	0x0800262d
 800242c:	0800262d 	.word	0x0800262d
 8002430:	0800262d 	.word	0x0800262d
 8002434:	0800258b 	.word	0x0800258b
 8002438:	0800262d 	.word	0x0800262d
 800243c:	0800262d 	.word	0x0800262d
 8002440:	0800262d 	.word	0x0800262d
 8002444:	0800262d 	.word	0x0800262d
 8002448:	080025c1 	.word	0x080025c1
 800244c:	080025c1 	.word	0x080025c1
 8002450:	080025c1 	.word	0x080025c1
 8002454:	0800258b 	.word	0x0800258b
 8002458:	0800258b 	.word	0x0800258b
 800245c:	0800258b 	.word	0x0800258b
 8002460:	0800258b 	.word	0x0800258b
 8002464:	08002555 	.word	0x08002555
 8002468:	080025c1 	.word	0x080025c1
 800246c:	0800258b 	.word	0x0800258b
 8002470:	0800258b 	.word	0x0800258b
 8002474:	0800258b 	.word	0x0800258b
 8002478:	0800258b 	.word	0x0800258b
 800247c:	0800258b 	.word	0x0800258b
 8002480:	0800258b 	.word	0x0800258b
 8002484:	0800258b 	.word	0x0800258b
 8002488:	0800258b 	.word	0x0800258b
 800248c:	0800258b 	.word	0x0800258b
 8002490:	0800258b 	.word	0x0800258b
 8002494:	0800258b 	.word	0x0800258b
 8002498:	08002555 	.word	0x08002555
 800249c:	080025c1 	.word	0x080025c1
 80024a0:	0800262d 	.word	0x0800262d
 80024a4:	0800258b 	.word	0x0800258b
 80024a8:	0800258b 	.word	0x0800258b
 80024ac:	0800258b 	.word	0x0800258b
 80024b0:	0800258b 	.word	0x0800258b
 80024b4:	0800258b 	.word	0x0800258b
 80024b8:	0800262d 	.word	0x0800262d
 80024bc:	0800262d 	.word	0x0800262d
 80024c0:	0800258b 	.word	0x0800258b
 80024c4:	0800258b 	.word	0x0800258b
 80024c8:	08002555 	.word	0x08002555
 80024cc:	08002555 	.word	0x08002555
 80024d0:	080025c1 	.word	0x080025c1
 80024d4:	080025c1 	.word	0x080025c1
 80024d8:	080025c1 	.word	0x080025c1
 80024dc:	080025c1 	.word	0x080025c1
 80024e0:	080025c1 	.word	0x080025c1
 80024e4:	08002555 	.word	0x08002555
 80024e8:	0800258b 	.word	0x0800258b
 80024ec:	0800258b 	.word	0x0800258b
 80024f0:	080025c1 	.word	0x080025c1
 80024f4:	0800262d 	.word	0x0800262d
 80024f8:	0800258b 	.word	0x0800258b
 80024fc:	0800258b 	.word	0x0800258b
 8002500:	08002555 	.word	0x08002555
 8002504:	080025c1 	.word	0x080025c1
 8002508:	080025c1 	.word	0x080025c1
 800250c:	080025c1 	.word	0x080025c1
 8002510:	080025c1 	.word	0x080025c1
 8002514:	080025c1 	.word	0x080025c1
 8002518:	080025c1 	.word	0x080025c1
 800251c:	080025c1 	.word	0x080025c1
 8002520:	080025c1 	.word	0x080025c1
 8002524:	080025c1 	.word	0x080025c1
 8002528:	080025c1 	.word	0x080025c1
 800252c:	080025c1 	.word	0x080025c1
 8002530:	08002555 	.word	0x08002555
 8002534:	0800262d 	.word	0x0800262d
 8002538:	08002555 	.word	0x08002555
 800253c:	080025f7 	.word	0x080025f7
 8002540:	080025f7 	.word	0x080025f7
 8002544:	080025f7 	.word	0x080025f7
 8002548:	0800258b 	.word	0x0800258b
 800254c:	0800258b 	.word	0x0800258b
 8002550:	0800258b 	.word	0x0800258b
      case MC_PROTOCOL_REG_SC_PP:
      case MC_PROTOCOL_REG_SC_FOC_REP_RATE:
      case MC_PROTOCOL_REG_SC_COMPLETED:
        {
          /* 8bit variables */
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 800255a:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 800255e:	4618      	mov	r0, r3
 8002560:	f001 fc16 	bl	8003d90 <UI_GetReg>
 8002564:	4603      	mov	r3, r0
 8002566:	65bb      	str	r3, [r7, #88]	; 0x58
           if ( bNoError == true )
 8002568:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800256c:	2b00      	cmp	r3, #0
 800256e:	d063      	beq.n	8002638 <MCP_ReceivedFrame+0x6dc>
          {
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	69dc      	ldr	r4, [r3, #28]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6998      	ldr	r0, [r3, #24]
 8002578:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800257c:	2301      	movs	r3, #1
 800257e:	21f0      	movs	r1, #240	; 0xf0
 8002580:	47a0      	blx	r4
            RequireAck = false;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 8002588:	e056      	b.n	8002638 <MCP_ReceivedFrame+0x6dc>
      case MC_PROTOCOL_REG_PWBDID:
      case MC_PROTOCOL_REG_POSITION_KP:
      case MC_PROTOCOL_REG_POSITION_KI:
      case MC_PROTOCOL_REG_POSITION_KD:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 8002590:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8002594:	4618      	mov	r0, r3
 8002596:	f001 fbfb 	bl	8003d90 <UI_GetReg>
 800259a:	4603      	mov	r3, r0
 800259c:	657b      	str	r3, [r7, #84]	; 0x54
          if ( bNoError == true )
 800259e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d04a      	beq.n	800263c <MCP_ReceivedFrame+0x6e0>
          {
            /* 16bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	69dc      	ldr	r4, [r3, #28]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6998      	ldr	r0, [r3, #24]
 80025ae:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80025b2:	2302      	movs	r3, #2
 80025b4:	21f0      	movs	r1, #240	; 0xf0
 80025b6:	47a0      	blx	r4
            RequireAck = false;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 80025be:	e03d      	b.n	800263c <MCP_ReceivedFrame+0x6e0>
      case MC_PROTOCOL_REG_SC_STARTUP_SPEED:
      case MC_PROTOCOL_REG_SC_STARTUP_ACC:
      case MC_PROTOCOL_REG_SC_PWM_FREQUENCY:
      case MC_PROTOCOL_REG_UID:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 80025c6:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 80025ca:	4618      	mov	r0, r3
 80025cc:	f001 fbe0 	bl	8003d90 <UI_GetReg>
 80025d0:	4603      	mov	r3, r0
 80025d2:	653b      	str	r3, [r7, #80]	; 0x50
          if ( bNoError == true )
 80025d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d031      	beq.n	8002640 <MCP_ReceivedFrame+0x6e4>
          {
            /* 32bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	69dc      	ldr	r4, [r3, #28]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6998      	ldr	r0, [r3, #24]
 80025e4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80025e8:	2304      	movs	r3, #4
 80025ea:	21f0      	movs	r1, #240	; 0xf0
 80025ec:	47a0      	blx	r4
            RequireAck = false;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 80025f4:	e024      	b.n	8002640 <MCP_ReceivedFrame+0x6e4>

      case MC_PROTOCOL_REG_CURRENT_POSITION:
      case MC_PROTOCOL_REG_TARGET_POSITION:
      case MC_PROTOCOL_REG_MOVE_DURATION:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 80025fc:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8002600:	4618      	mov	r0, r3
 8002602:	f001 fbc5 	bl	8003d90 <UI_GetReg>
 8002606:	4603      	mov	r3, r0
 8002608:	64fb      	str	r3, [r7, #76]	; 0x4c
          if ( bNoError == true )
 800260a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800260e:	2b00      	cmp	r3, #0
 8002610:	d018      	beq.n	8002644 <MCP_ReceivedFrame+0x6e8>
          {
            /* 32bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	69dc      	ldr	r4, [r3, #28]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6998      	ldr	r0, [r3, #24]
 800261a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800261e:	2304      	movs	r3, #4
 8002620:	21f0      	movs	r1, #240	; 0xf0
 8002622:	47a0      	blx	r4
            RequireAck = false;
 8002624:	2300      	movs	r3, #0
 8002626:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 800262a:	e00b      	b.n	8002644 <MCP_ReceivedFrame+0x6e8>

      default:
        bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 800262c:	2303      	movs	r3, #3
 800262e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        break;
 8002632:	e008      	b.n	8002646 <MCP_ReceivedFrame+0x6ea>
        break;
 8002634:	bf00      	nop
 8002636:	e20c      	b.n	8002a52 <MCP_ReceivedFrame+0xaf6>
        break;
 8002638:	bf00      	nop
 800263a:	e20a      	b.n	8002a52 <MCP_ReceivedFrame+0xaf6>
        break;
 800263c:	bf00      	nop
 800263e:	e208      	b.n	8002a52 <MCP_ReceivedFrame+0xaf6>
        break;
 8002640:	bf00      	nop
 8002642:	e206      	b.n	8002a52 <MCP_ReceivedFrame+0xaf6>
        break;
 8002644:	bf00      	nop
      }
    }
    break;
 8002646:	e204      	b.n	8002a52 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_EXECUTE_CMD:
    {
      uint8_t bCmdID = buffer[0];
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8002650:	2307      	movs	r3, #7
 8002652:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f002 f92e 	bl	80048c0 <UI_ExecCmd>
 8002664:	4603      	mov	r3, r0
 8002666:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 800266a:	e1f2      	b.n	8002a52 <MCP_ReceivedFrame+0xaf6>
  case MC_PROTOCOL_CODE_GET_BOARD_INFO:
    {
      /* GetBoardInfo */
      unsigned char i;
      uint8_t outBuff[32];
      for (i = 0; i < 32; i++)
 800266c:	2300      	movs	r3, #0
 800266e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8002672:	e00c      	b.n	800268e <MCP_ReceivedFrame+0x732>
      {
        outBuff[i] = 0;
 8002674:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002678:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800267c:	4413      	add	r3, r2
 800267e:	2200      	movs	r2, #0
 8002680:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; i < 32; i++)
 8002684:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002688:	3301      	adds	r3, #1
 800268a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800268e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002692:	2b1f      	cmp	r3, #31
 8002694:	d9ee      	bls.n	8002674 <MCP_ReceivedFrame+0x718>
      }
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002696:	2300      	movs	r3, #0
 8002698:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800269c:	e013      	b.n	80026c6 <MCP_ReceivedFrame+0x76a>
      {
        outBuff[3+i] = pHandle->s_fwVer[i];
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80026a4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80026a8:	441a      	add	r2, r3
 80026aa:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80026ae:	3303      	adds	r3, #3
 80026b0:	7812      	ldrb	r2, [r2, #0]
 80026b2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80026b6:	440b      	add	r3, r1
 80026b8:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80026bc:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80026c0:	3301      	adds	r3, #1
 80026c2:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80026c6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80026ca:	2b1c      	cmp	r3, #28
 80026cc:	d808      	bhi.n	80026e0 <MCP_ReceivedFrame+0x784>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80026d4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80026d8:	4413      	add	r3, r2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b09      	cmp	r3, #9
 80026de:	d1de      	bne.n	800269e <MCP_ReceivedFrame+0x742>
      }
      outBuff[0] = pHandle->s_fwVer[i+5];
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80026e6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80026ea:	3305      	adds	r3, #5
 80026ec:	4413      	add	r3, r2
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	753b      	strb	r3, [r7, #20]
      outBuff[1] = pHandle->s_fwVer[i+7];
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80026f8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80026fc:	3307      	adds	r3, #7
 80026fe:	4413      	add	r3, r2
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	757b      	strb	r3, [r7, #21]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800270a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800270e:	3309      	adds	r3, #9
 8002710:	4413      	add	r3, r2
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	75bb      	strb	r3, [r7, #22]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	69dc      	ldr	r4, [r3, #28]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6998      	ldr	r0, [r3, #24]
 800271e:	f107 0214 	add.w	r2, r7, #20
 8002722:	2320      	movs	r3, #32
 8002724:	21f0      	movs	r1, #240	; 0xf0
 8002726:	47a0      	blx	r4
      bNoError = true;
 8002728:	2301      	movs	r3, #1
 800272a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 800272e:	e190      	b.n	8002a52 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_SET_SPEED_RAMP:
    {
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3304      	adds	r3, #4
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	b29a      	uxth	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3305      	adds	r3, #5
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	b29b      	uxth	r3, r3
 8002744:	4413      	add	r3, r2
 8002746:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3301      	adds	r3, #1
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	441a      	add	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3302      	adds	r3, #2
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	441a      	add	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3303      	adds	r3, #3
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	061b      	lsls	r3, r3, #24
 800276c:	4413      	add	r3, r2
 800276e:	673b      	str	r3, [r7, #112]	; 0x70
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8002776:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002778:	4618      	mov	r0, r3
 800277a:	f002 f90d 	bl	8004998 <UI_ExecSpeedRamp>
 800277e:	4603      	mov	r3, r0
 8002780:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002784:	e165      	b.n	8002a52 <MCP_ReceivedFrame+0xaf6>
    }
    break;

  case MC_PROTOCOL_CODE_SET_TORQUE_RAMP:
    {
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3304      	adds	r3, #4
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	b29a      	uxth	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3305      	adds	r3, #5
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	b29b      	uxth	r3, r3
 800279a:	4413      	add	r3, r2
 800279c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3301      	adds	r3, #1
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	441a      	add	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3302      	adds	r3, #2
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	041b      	lsls	r3, r3, #16
 80027b8:	441a      	add	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3303      	adds	r3, #3
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	4413      	add	r3, r2
 80027c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80027ce:	b211      	sxth	r1, r2
 80027d0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80027d4:	4618      	mov	r0, r3
 80027d6:	f002 f907 	bl	80049e8 <UI_ExecTorqueRamp>
 80027da:	4603      	mov	r3, r0
 80027dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 80027e0:	e137      	b.n	8002a52 <MCP_ReceivedFrame+0xaf6>
      uint8_t outBuff[8];
      uint16_t Durationms;
      int16_t FinalMecSpeedUnit;
      int16_t FinalTorque;
      int32_t rpm;
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7819      	ldrb	r1, [r3, #0]
 80027e8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80027ec:	f107 0242 	add.w	r2, r7, #66	; 0x42
 80027f0:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	4623      	mov	r3, r4
 80027f8:	f002 f912 	bl	8004a20 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80027fc:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8002800:	461a      	mov	r2, r3
 8002802:	4613      	mov	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4aa1      	ldr	r2, [pc, #644]	; (8002a90 <MCP_ReceivedFrame+0xb34>)
 800280c:	fb82 1203 	smull	r1, r2, r2, r3
 8002810:	1092      	asrs	r2, r2, #2
 8002812:	17db      	asrs	r3, r3, #31
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	67bb      	str	r3, [r7, #120]	; 0x78
      outBuff[0] = (uint8_t)(rpm);
 8002818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      outBuff[1] = (uint8_t)(rpm >> 8);
 8002820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002822:	121b      	asrs	r3, r3, #8
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
      outBuff[2] = (uint8_t)(rpm >> 16);
 800282a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800282c:	141b      	asrs	r3, r3, #16
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      outBuff[3] = (uint8_t)(rpm >> 24);
 8002834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002836:	161b      	asrs	r3, r3, #24
 8002838:	b2db      	uxtb	r3, r3
 800283a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      outBuff[4] = (uint8_t)(FinalTorque);
 800283e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8002848:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800284c:	121b      	asrs	r3, r3, #8
 800284e:	b21b      	sxth	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
      outBuff[6] = (uint8_t)(Durationms);
 8002856:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8002860:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	b29b      	uxth	r3, r3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	69dc      	ldr	r4, [r3, #28]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6998      	ldr	r0, [r3, #24]
 8002876:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800287a:	2308      	movs	r3, #8
 800287c:	21f0      	movs	r1, #240	; 0xf0
 800287e:	47a0      	blx	r4
    }
    break;
 8002880:	e0e7      	b.n	8002a52 <MCP_ReceivedFrame+0xaf6>
      uint8_t bStage;
      uint16_t hDurationms;
      int16_t hFinalMecSpeedUnit;
      int16_t hFinalTorque;
      int32_t rpm;
      bStage = buffer[0];
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      hDurationms = buffer[7] + (buffer[8] << 8);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3307      	adds	r3, #7
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b29a      	uxth	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3308      	adds	r3, #8
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	b29b      	uxth	r3, r3
 800289e:	4413      	add	r3, r2
 80028a0:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3301      	adds	r3, #1
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3302      	adds	r3, #2
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	441a      	add	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3303      	adds	r3, #3
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	041b      	lsls	r3, r3, #16
 80028be:	441a      	add	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3304      	adds	r3, #4
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	061b      	lsls	r3, r3, #24
 80028c8:	4413      	add	r3, r2
 80028ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80028ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	4a6e      	ldr	r2, [pc, #440]	; (8002a94 <MCP_ReceivedFrame+0xb38>)
 80028dc:	fb82 1203 	smull	r1, r2, r2, r3
 80028e0:	441a      	add	r2, r3
 80028e2:	1152      	asrs	r2, r2, #5
 80028e4:	17db      	asrs	r3, r3, #31
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3305      	adds	r3, #5
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3306      	adds	r3, #6
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	b29b      	uxth	r3, r3
 8002900:	4413      	add	r3, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f9b7 407e 	ldrsh.w	r4, [r7, #126]	; 0x7e
 800290e:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8002912:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 8002916:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	4623      	mov	r3, r4
 800291e:	f002 f8b8 	bl	8004a92 <UI_SetRevupData>
 8002922:	4603      	mov	r3, r0
 8002924:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002928:	e093      	b.n	8002a52 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_SET_CURRENT_REF:
    {
      int16_t hIqRef;
      int16_t hIdRef;
      hIqRef = buffer[0] + (buffer[1] << 8);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b29a      	uxth	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3301      	adds	r3, #1
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	b29b      	uxth	r3, r3
 800293c:	4413      	add	r3, r2
 800293e:	b29b      	uxth	r3, r3
 8002940:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
      hIdRef = buffer[2] + (buffer[3] << 8);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3302      	adds	r3, #2
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	b29a      	uxth	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3303      	adds	r3, #3
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	b29b      	uxth	r3, r3
 8002958:	4413      	add	r3, r2
 800295a:	b29b      	uxth	r3, r3
 800295c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 8002966:	f9b7 108a 	ldrsh.w	r1, [r7, #138]	; 0x8a
 800296a:	4618      	mov	r0, r3
 800296c:	f002 f8c0 	bl	8004af0 <UI_SetCurrentReferences>
      bNoError = true;
 8002970:	2301      	movs	r3, #1
 8002972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002976:	e06c      	b.n	8002a52 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_GET_MP_INFO:
    {
      MPInfo_t stepList;
      stepList.data = buffer;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	637b      	str	r3, [r7, #52]	; 0x34
      stepList.len = Size;
 800297c:	7abb      	ldrb	r3, [r7, #10]
 800297e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8002982:	230c      	movs	r3, #12
 8002984:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002988:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800298c:	4942      	ldr	r1, [pc, #264]	; (8002a98 <MCP_ReceivedFrame+0xb3c>)
 800298e:	4618      	mov	r0, r3
 8002990:	f002 f8ca 	bl	8004b28 <UI_GetMPInfo>
 8002994:	4603      	mov	r3, r0
 8002996:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      if (bNoError)
 800299a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d056      	beq.n	8002a50 <MCP_ReceivedFrame+0xaf4>
      {
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	69dc      	ldr	r4, [r3, #28]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6998      	ldr	r0, [r3, #24]
 80029aa:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <MCP_ReceivedFrame+0xb3c>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b3a      	ldr	r3, [pc, #232]	; (8002a98 <MCP_ReceivedFrame+0xb3c>)
 80029b0:	791b      	ldrb	r3, [r3, #4]
 80029b2:	21f0      	movs	r1, #240	; 0xf0
 80029b4:	47a0      	blx	r4
        RequireAck = false;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      }
    }
    break;
 80029bc:	e048      	b.n	8002a50 <MCP_ReceivedFrame+0xaf4>
    case MC_PROTOCOL_CODE_GET_FW_VERSION:
    {
      /* Get Firmware Version */
      unsigned char i;
      uint8_t outBuff[32];
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80029be:	2300      	movs	r3, #0
 80029c0:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80029c4:	e012      	b.n	80029ec <MCP_ReceivedFrame+0xa90>
      {
        outBuff[i] = pHandle->s_fwVer[i];
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80029cc:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80029d0:	441a      	add	r2, r3
 80029d2:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80029dc:	440b      	add	r3, r1
 80029de:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80029e2:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80029e6:	3301      	adds	r3, #1
 80029e8:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80029ec:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80029f0:	2b1f      	cmp	r3, #31
 80029f2:	d816      	bhi.n	8002a22 <MCP_ReceivedFrame+0xac6>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80029fa:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80029fe:	4413      	add	r3, r2
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1df      	bne.n	80029c6 <MCP_ReceivedFrame+0xa6a>
      }
      
      for (; i < 32; i++)
 8002a06:	e00c      	b.n	8002a22 <MCP_ReceivedFrame+0xac6>
      {
        outBuff[i] = 0;
 8002a08:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002a0c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002a10:	4413      	add	r3, r2
 8002a12:	2200      	movs	r2, #0
 8002a14:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (; i < 32; i++)
 8002a18:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8002a22:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002a26:	2b1f      	cmp	r3, #31
 8002a28:	d9ee      	bls.n	8002a08 <MCP_ReceivedFrame+0xaac>
      }

      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	69dc      	ldr	r4, [r3, #28]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6998      	ldr	r0, [r3, #24]
 8002a32:	f107 0214 	add.w	r2, r7, #20
 8002a36:	2320      	movs	r3, #32
 8002a38:	21f0      	movs	r1, #240	; 0xf0
 8002a3a:	47a0      	blx	r4
      bNoError = true;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002a42:	e006      	b.n	8002a52 <MCP_ReceivedFrame+0xaf6>
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }
    break;
 8002a4a:	e002      	b.n	8002a52 <MCP_ReceivedFrame+0xaf6>
    break;
 8002a4c:	bf00      	nop
 8002a4e:	e000      	b.n	8002a52 <MCP_ReceivedFrame+0xaf6>
    break;
 8002a50:	bf00      	nop
  }

  if (RequireAck)
 8002a52:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d015      	beq.n	8002a86 <MCP_ReceivedFrame+0xb2a>
  {
    if (bNoError)
 8002a5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <MCP_ReceivedFrame+0xb18>
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	69dc      	ldr	r4, [r3, #28]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6998      	ldr	r0, [r3, #24]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	21f0      	movs	r1, #240	; 0xf0
 8002a70:	47a0      	blx	r4
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
    }
  }
}
 8002a72:	e008      	b.n	8002a86 <MCP_ReceivedFrame+0xb2a>
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	69dc      	ldr	r4, [r3, #28]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6998      	ldr	r0, [r3, #24]
 8002a7c:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 8002a80:	2301      	movs	r3, #1
 8002a82:	21ff      	movs	r1, #255	; 0xff
 8002a84:	47a0      	blx	r4
}
 8002a86:	bf00      	nop
 8002a88:	379c      	adds	r7, #156	; 0x9c
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd90      	pop	{r4, r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	66666667 	.word	0x66666667
 8002a94:	88888889 	.word	0x88888889
 8002a98:	200006d8 	.word	0x200006d8

08002a9c <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and 
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void) 
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af02      	add	r7, sp, #8
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002aa2:	f004 fe75 	bl	8007790 <HAL_RCC_GetHCLKFreq>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <MX_MotorControl_Init+0x3c>)
 8002aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8002aae:	09db      	lsrs	r3, r3, #7
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f003 fbec 	bl	800628e <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8002ab6:	4909      	ldr	r1, [pc, #36]	; (8002adc <MX_MotorControl_Init+0x40>)
 8002ab8:	4809      	ldr	r0, [pc, #36]	; (8002ae0 <MX_MotorControl_Init+0x44>)
 8002aba:	f7fe fb73 	bl	80011a4 <MCboot>
  mc_lock_pins();
 8002abe:	f7ff f99d 	bl	8001dfc <mc_lock_pins>
  
  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8002ac2:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <MX_MotorControl_Init+0x48>)
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <MX_MotorControl_Init+0x40>)
 8002ac8:	4a05      	ldr	r2, [pc, #20]	; (8002ae0 <MX_MotorControl_Init+0x44>)
 8002aca:	2101      	movs	r1, #1
 8002acc:	4806      	ldr	r0, [pc, #24]	; (8002ae8 <MX_MotorControl_Init+0x4c>)
 8002ace:	f000 fe3d 	bl	800374c <UI_TaskInit>
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	10624dd3 	.word	0x10624dd3
 8002adc:	200009bc 	.word	0x200009bc
 8002ae0:	200009b8 	.word	0x200009b8
 8002ae4:	0800dc60 	.word	0x0800dc60
 8002ae8:	20000688 	.word	0x20000688

08002aec <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f023 020f 	bic.w	r2, r3, #15
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b12:	b490      	push	{r4, r7}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	3330      	adds	r3, #48	; 0x30
 8002b22:	4619      	mov	r1, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002b2e:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	fa92 f2a2 	rbit	r2, r2
 8002b36:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	fab2 f282 	clz	r2, r2
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	40d3      	lsrs	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8002b48:	6822      	ldr	r2, [r4, #0]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	211f      	movs	r1, #31
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	401a      	ands	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	f1c3 031a 	rsb	r3, r3, #26
 8002b6a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS - (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
}
 8002b72:	bf00      	nop
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc90      	pop	{r4, r7}
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b7c:	b490      	push	{r4, r7}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3314      	adds	r3, #20
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	fa92 f2a2 	rbit	r2, r2
 8002ba0:	613a      	str	r2, [r7, #16]
  return result;
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	40d3      	lsrs	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8002bb2:	6822      	ldr	r2, [r4, #0]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8002bba:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8002bbe:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	69f9      	ldr	r1, [r7, #28]
 8002bc2:	fa91 f1a1 	rbit	r1, r1
 8002bc6:	61b9      	str	r1, [r7, #24]
  return result;
 8002bc8:	69b9      	ldr	r1, [r7, #24]
 8002bca:	fab1 f181 	clz	r1, r1
 8002bce:	b2c9      	uxtb	r1, r1
 8002bd0:	40cb      	lsrs	r3, r1
 8002bd2:	2107      	movs	r1, #7
 8002bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	401a      	ands	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8002be2:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8002be6:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bea:	fa91 f1a1 	rbit	r1, r1
 8002bee:	6239      	str	r1, [r7, #32]
  return result;
 8002bf0:	6a39      	ldr	r1, [r7, #32]
 8002bf2:	fab1 f181 	clz	r1, r1
 8002bf6:	b2c9      	uxtb	r1, r1
 8002bf8:	40cb      	lsrs	r3, r1
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	4313      	orrs	r3, r2
 8002c02:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8002c04:	bf00      	nop
 8002c06:	3728      	adds	r7, #40	; 0x28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc90      	pop	{r4, r7}
 8002c0c:	4770      	bx	lr

08002c0e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	bf0c      	ite	eq
 8002c4a:	2301      	moveq	r3, #1
 8002c4c:	2300      	movne	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002c6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2301      	moveq	r3, #1
 8002ca6:	2300      	movne	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cc6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cca:	f043 0204 	orr.w	r2, r3, #4
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	b29b      	uxth	r3, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	bf0c      	ite	eq
 8002d0c:	2301      	moveq	r3, #1
 8002d0e:	2300      	movne	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2204      	movs	r2, #4
 8002d2a:	601a      	str	r2, [r3, #0]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_ClearFlag_JEOC>:
  * @rmtoll ISR      JEOC           LL_ADC_ClearFlag_JEOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_JEOC(ADC_TypeDef *ADCx)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	601a      	str	r2, [r3, #0]
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f023 0204 	bic.w	r2, r3, #4
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	605a      	str	r2, [r3, #4]
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_ADC_DisableIT_JEOC>:
  * @rmtoll IER      JEOCIE         LL_ADC_DisableIT_JEOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f023 0220 	bic.w	r2, r3, #32
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	605a      	str	r2, [r3, #4]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t * regConv)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint8_t handle=255;
 8002d9c:	23ff      	movs	r3, #255	; 0xff
 8002d9e:	73fb      	strb	r3, [r7, #15]
  uint8_t i=0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	73bb      	strb	r3, [r7, #14]
  
    /* Parse the array to be sure that same 
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
 8002da4:	e029      	b.n	8002dfa <RCM_RegisterRegConv+0x66>
    { 
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8002da6:	7bbb      	ldrb	r3, [r7, #14]
 8002da8:	4a53      	ldr	r2, [pc, #332]	; (8002ef8 <RCM_RegisterRegConv+0x164>)
 8002daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d104      	bne.n	8002dbc <RCM_RegisterRegConv+0x28>
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d901      	bls.n	8002dbc <RCM_RegisterRegConv+0x28>
      {
        handle = i; /* First location available, but still looping to check that this config does not already exist*/ 
 8002db8:	7bbb      	ldrb	r3, [r7, #14]
 8002dba:	73fb      	strb	r3, [r7, #15]
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
 8002dbc:	7bbb      	ldrb	r3, [r7, #14]
 8002dbe:	4a4e      	ldr	r2, [pc, #312]	; (8002ef8 <RCM_RegisterRegConv+0x164>)
 8002dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d015      	beq.n	8002df4 <RCM_RegisterRegConv+0x60>
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8002dc8:	7bbb      	ldrb	r3, [r7, #14]
 8002dca:	4a4b      	ldr	r2, [pc, #300]	; (8002ef8 <RCM_RegisterRegConv+0x164>)
 8002dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd0:	791a      	ldrb	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	791b      	ldrb	r3, [r3, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d10c      	bne.n	8002df4 <RCM_RegisterRegConv+0x60>
            (RCM_handle_array [i]->regADC == regConv->regADC))
 8002dda:	7bbb      	ldrb	r3, [r7, #14]
 8002ddc:	4a46      	ldr	r2, [pc, #280]	; (8002ef8 <RCM_RegisterRegConv+0x164>)
 8002dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d103      	bne.n	8002df4 <RCM_RegisterRegConv+0x60>
          {
           handle =i; /* Reuse the same handle */
 8002dec:	7bbb      	ldrb	r3, [r7, #14]
 8002dee:	73fb      	strb	r3, [r7, #15]
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
 8002df0:	2304      	movs	r3, #4
 8002df2:	73bb      	strb	r3, [r7, #14]
          }
      }
      i++;
 8002df4:	7bbb      	ldrb	r3, [r7, #14]
 8002df6:	3301      	adds	r3, #1
 8002df8:	73bb      	strb	r3, [r7, #14]
    while (i < RCM_MAX_CONV)
 8002dfa:	7bbb      	ldrb	r3, [r7, #14]
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d9d2      	bls.n	8002da6 <RCM_RegisterRegConv+0x12>
    }    
    if (handle < RCM_MAX_CONV )
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d872      	bhi.n	8002eec <RCM_RegisterRegConv+0x158>
    {    
      RCM_handle_array [handle] = regConv;
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	493b      	ldr	r1, [pc, #236]	; (8002ef8 <RCM_RegisterRegConv+0x164>)
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	4a3a      	ldr	r2, [pc, #232]	; (8002efc <RCM_RegisterRegConv+0x168>)
 8002e14:	2100      	movs	r1, #0
 8002e16:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ff09 	bl	8002c36 <LL_ADC_IsEnabled>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d127      	bne.n	8002e7a <RCM_RegisterRegConv+0xe6>
      {
       LL_ADC_DisableIT_EOC(regConv->regADC);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff ff8f 	bl	8002d52 <LL_ADC_DisableIT_EOC>
       LL_ADC_ClearFlag_EOC(regConv->regADC);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff70 	bl	8002d1e <LL_ADC_ClearFlag_EOC>
       LL_ADC_DisableIT_JEOC(regConv->regADC);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff95 	bl	8002d72 <LL_ADC_DisableIT_JEOC>
       LL_ADC_ClearFlag_JEOC(regConv->regADC);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff73 	bl	8002d38 <LL_ADC_ClearFlag_JEOC>

        LL_ADC_StartCalibration( regConv->regADC, LL_ADC_SINGLE_ENDED );
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	217f      	movs	r1, #127	; 0x7f
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff feff 	bl	8002c5c <LL_ADC_StartCalibration>
        while ( LL_ADC_IsCalibrationOnGoing( regConv->regADC ) )  
 8002e5e:	bf00      	nop
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff12 	bl	8002c8e <LL_ADC_IsCalibrationOnGoing>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f7      	bne.n	8002e60 <RCM_RegisterRegConv+0xcc>
        { }
        LL_ADC_Enable( regConv->regADC );
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff feca 	bl	8002c0e <LL_ADC_Enable>
      }
      else 
      {
      }
      /* reset regular conversion sequencer length set by cubeMX */
      LL_ADC_REG_SetSequencerLength( regConv->regADC, LL_ADC_REG_SEQ_SCAN_DISABLE );
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fe33 	bl	8002aec <LL_ADC_REG_SetSequencerLength>
      /* configure the sampling time (should already be configured by for non user conversions)*/
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	791b      	ldrb	r3, [r3, #4]
 8002e8e:	2b09      	cmp	r3, #9
 8002e90:	d812      	bhi.n	8002eb8 <RCM_RegisterRegConv+0x124>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	791b      	ldrb	r3, [r3, #4]
 8002e96:	069b      	lsls	r3, r3, #26
 8002e98:	461a      	mov	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	791b      	ldrb	r3, [r3, #4]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	408b      	lsls	r3, r1
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	791b      	ldrb	r3, [r3, #4]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	460b      	mov	r3, r1
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	440b      	add	r3, r1
 8002eb2:	051b      	lsls	r3, r3, #20
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	e014      	b.n	8002ee2 <RCM_RegisterRegConv+0x14e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	791b      	ldrb	r3, [r3, #4]
 8002ebc:	069b      	lsls	r3, r3, #26
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	791b      	ldrb	r3, [r3, #4]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	408b      	lsls	r3, r1
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	791b      	ldrb	r3, [r3, #4]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3b1e      	subs	r3, #30
 8002eda:	051b      	lsls	r3, r3, #20
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6892      	ldr	r2, [r2, #8]
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f7ff fe48 	bl	8002b7c <LL_ADC_SetChannelSamplingTime>
    }
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200009e8 	.word	0x200009e8
 8002efc:	200009c4 	.word	0x200009c4

08002f00 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it. 
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
  uint16_t retVal;
 
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	4a3a      	ldr	r2, [pc, #232]	; (8002ff8 <RCM_ExecRegularConv+0xf8>)
 8002f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f12:	6818      	ldr	r0, [r3, #0]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	4a38      	ldr	r2, [pc, #224]	; (8002ff8 <RCM_ExecRegularConv+0xf8>)
 8002f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1c:	791b      	ldrb	r3, [r3, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002f1e:	2b09      	cmp	r3, #9
 8002f20:	d81c      	bhi.n	8002f5c <RCM_ExecRegularConv+0x5c>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	4a34      	ldr	r2, [pc, #208]	; (8002ff8 <RCM_ExecRegularConv+0xf8>)
 8002f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2a:	791b      	ldrb	r3, [r3, #4]
 8002f2c:	069b      	lsls	r3, r3, #26
 8002f2e:	4619      	mov	r1, r3
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	4a31      	ldr	r2, [pc, #196]	; (8002ff8 <RCM_ExecRegularConv+0xf8>)
 8002f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f38:	791b      	ldrb	r3, [r3, #4]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	4093      	lsls	r3, r2
 8002f40:	ea41 0203 	orr.w	r2, r1, r3
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	492c      	ldr	r1, [pc, #176]	; (8002ff8 <RCM_ExecRegularConv+0xf8>)
 8002f48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f4c:	791b      	ldrb	r3, [r3, #4]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	460b      	mov	r3, r1
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	440b      	add	r3, r1
 8002f56:	051b      	lsls	r3, r3, #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	e01e      	b.n	8002f9a <RCM_ExecRegularConv+0x9a>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	4a26      	ldr	r2, [pc, #152]	; (8002ff8 <RCM_ExecRegularConv+0xf8>)
 8002f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f64:	791b      	ldrb	r3, [r3, #4]
 8002f66:	069b      	lsls	r3, r3, #26
 8002f68:	4619      	mov	r1, r3
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	4a22      	ldr	r2, [pc, #136]	; (8002ff8 <RCM_ExecRegularConv+0xf8>)
 8002f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f72:	791b      	ldrb	r3, [r3, #4]
 8002f74:	461a      	mov	r2, r3
 8002f76:	2302      	movs	r3, #2
 8002f78:	4093      	lsls	r3, r2
 8002f7a:	ea41 0203 	orr.w	r2, r1, r3
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	491d      	ldr	r1, [pc, #116]	; (8002ff8 <RCM_ExecRegularConv+0xf8>)
 8002f82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f86:	791b      	ldrb	r3, [r3, #4]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	440b      	add	r3, r1
 8002f90:	3b1e      	subs	r3, #30
 8002f92:	051b      	lsls	r3, r3, #20
 8002f94:	4313      	orrs	r3, r2
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002f96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2106      	movs	r1, #6
 8002f9e:	f7ff fdb8 	bl	8002b12 <LL_ADC_REG_SetSequencerRanks>

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	4a14      	ldr	r2, [pc, #80]	; (8002ff8 <RCM_ExecRegularConv+0xf8>)
 8002fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fe96 	bl	8002cde <LL_ADC_REG_ReadConversionData12>

    LL_ADC_REG_StartConversion( RCM_handle_array[handle]->regADC );
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	4a10      	ldr	r2, [pc, #64]	; (8002ff8 <RCM_ExecRegularConv+0xf8>)
 8002fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fe7a 	bl	8002cb6 <LL_ADC_REG_StartConversion>
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8002fc2:	bf00      	nop
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	4a0c      	ldr	r2, [pc, #48]	; (8002ff8 <RCM_ExecRegularConv+0xf8>)
 8002fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fe92 	bl	8002cf8 <LL_ADC_IsActiveFlag_EOC>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f4      	beq.n	8002fc4 <RCM_ExecRegularConv+0xc4>
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );   
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	4a06      	ldr	r2, [pc, #24]	; (8002ff8 <RCM_ExecRegularConv+0xf8>)
 8002fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fe7a 	bl	8002cde <LL_ADC_REG_ReadConversionData12>
 8002fea:	4603      	mov	r3, r0
 8002fec:	81fb      	strh	r3, [r7, #14]
return retVal;
 8002fee:	89fb      	ldrh	r3, [r7, #14]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	200009e8 	.word	0x200009e8

08002ffc <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it. 
 */
void RCM_ExecUserConv ()
{
 8002ffc:	b598      	push	{r3, r4, r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8003000:	4b17      	ldr	r3, [pc, #92]	; (8003060 <RCM_ExecUserConv+0x64>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d128      	bne.n	800305a <RCM_ExecUserConv+0x5e>
  {
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003008:	4b16      	ldr	r3, [pc, #88]	; (8003064 <RCM_ExecUserConv+0x68>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff77 	bl	8002f00 <RCM_ExecRegularConv>
 8003012:	4603      	mov	r3, r0
 8003014:	461a      	mov	r2, r3
 8003016:	4b14      	ldr	r3, [pc, #80]	; (8003068 <RCM_ExecUserConv+0x6c>)
 8003018:	801a      	strh	r2, [r3, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <RCM_ExecUserConv+0x64>)
 800301c:	2202      	movs	r2, #2
 800301e:	701a      	strb	r2, [r3, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8003020:	4b10      	ldr	r3, [pc, #64]	; (8003064 <RCM_ExecUserConv+0x68>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	4b11      	ldr	r3, [pc, #68]	; (800306c <RCM_ExecUserConv+0x70>)
 8003028:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d014      	beq.n	800305a <RCM_ExecUserConv+0x5e>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <RCM_ExecUserConv+0x64>)
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <RCM_ExecUserConv+0x68>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <RCM_ExecUserConv+0x70>)
 800303e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <RCM_ExecUserConv+0x68>)
 8003044:	7818      	ldrb	r0, [r3, #0]
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <RCM_ExecUserConv+0x6c>)
 8003048:	8819      	ldrh	r1, [r3, #0]
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <RCM_ExecUserConv+0x68>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	4a07      	ldr	r2, [pc, #28]	; (800306c <RCM_ExecUserConv+0x70>)
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	461a      	mov	r2, r3
 8003058:	47a0      	blx	r4
    }
  }
}
 800305a:	bf00      	nop
 800305c:	bd98      	pop	{r3, r4, r7, pc}
 800305e:	bf00      	nop
 8003060:	200009e4 	.word	0x200009e4
 8003064:	200009c0 	.word	0x200009c0
 8003068:	200009f8 	.word	0x200009f8
 800306c:	200009c4 	.word	0x200009c4

08003070 <LL_ADC_ClearFlag_JEOS>:
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2240      	movs	r2, #64	; 0x40
 800307c:	601a      	str	r2, [r3, #0]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f06f 0201 	mvn.w	r2, #1
 8003098:	611a      	str	r2, [r3, #16]
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <LL_TIM_ClearFlag_BRK>:
  * @rmtoll SR           BIF           LL_TIM_ClearFlag_BRK
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_BRK(TIM_TypeDef *TIMx)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030b4:	611a      	str	r2, [r3, #16]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <LL_TIM_IsActiveFlag_BRK>:
  * @rmtoll SR           BIF           LL_TIM_IsActiveFlag_BRK
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d2:	2b80      	cmp	r3, #128	; 0x80
 80030d4:	d101      	bne.n	80030da <LL_TIM_IsActiveFlag_BRK+0x18>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <LL_TIM_IsActiveFlag_BRK+0x1a>
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <LL_TIM_ClearFlag_BRK2>:
  * @rmtoll SR           B2IF          LL_TIM_ClearFlag_BRK2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_BRK2(TIM_TypeDef *TIMx)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030f6:	611a      	str	r2, [r3, #16]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <LL_TIM_IsActiveFlag_BRK2>:
  * @rmtoll SR           B2IF          LL_TIM_IsActiveFlag_BRK2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003118:	d101      	bne.n	800311e <LL_TIM_IsActiveFlag_BRK2+0x1a>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <LL_TIM_IsActiveFlag_BRK2+0x1c>
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b08      	cmp	r3, #8
 800313e:	d101      	bne.n	8003144 <LL_USART_IsActiveFlag_ORE+0x18>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <LL_USART_IsActiveFlag_ORE+0x1a>
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b20      	cmp	r3, #32
 8003164:	d101      	bne.n	800316a <LL_USART_IsActiveFlag_RXNE+0x18>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <LL_USART_IsActiveFlag_RXNE+0x1a>
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003188:	2b80      	cmp	r3, #128	; 0x80
 800318a:	d101      	bne.n	8003190 <LL_USART_IsActiveFlag_TXE+0x18>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <LL_USART_IsActiveFlag_TXE+0x1a>
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2208      	movs	r2, #8
 80031aa:	621a      	str	r2, [r3, #32]
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	b2db      	uxtb	r3, r3
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <ADC1_2_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  
  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );
 80031d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80031dc:	f7ff ff48 	bl	8003070 <LL_ADC_ClearFlag_JEOS>

  // Highfrequency task 
  TSK_HighFrequencyTask();
 80031e0:	f7fe fc44 	bl	8001a6c <TSK_HighFrequencyTask>
 /* USER CODE END HighFreq  */  
 
 /* USER CODE BEGIN ADC1_2_IRQn 1 */

 /* USER CODE END ADC1_2_IRQn 1 */
}
 80031e4:	bf00      	nop
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <TIM1_UP_TIM16_IRQHandler>:
  * @brief  This function handles first motor TIMx Update interrupt request.
  * @param  None
  * @retval None 
  */
void TIMx_UP_M1_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */ 
 
    LL_TIM_ClearFlag_UPDATE(TIM1);
 80031ec:	4803      	ldr	r0, [pc, #12]	; (80031fc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80031ee:	f7ff ff4c 	bl	800308a <LL_TIM_ClearFlag_UPDATE>
    R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);    
 80031f2:	4803      	ldr	r0, [pc, #12]	; (8003200 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80031f4:	f008 f93f 	bl	800b476 <R3_1_TIMx_UP_IRQHandler>

 /* USER CODE BEGIN TIMx_UP_M1_IRQn 1 */

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */ 
}
 80031f8:	bf00      	nop
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40012c00 	.word	0x40012c00
 8003200:	20000244 	.word	0x20000244

08003204 <TIM1_BRK_TIM15_IRQHandler>:

void TIMx_BRK_M1_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */ 
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
 8003208:	480d      	ldr	r0, [pc, #52]	; (8003240 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 800320a:	f7ff ff5a 	bl	80030c2 <LL_TIM_IsActiveFlag_BRK>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <TIM1_BRK_TIM15_IRQHandler+0x1c>
  {
    LL_TIM_ClearFlag_BRK(TIM1);
 8003214:	480a      	ldr	r0, [pc, #40]	; (8003240 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 8003216:	f7ff ff46 	bl	80030a6 <LL_TIM_ClearFlag_BRK>
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);    
 800321a:	480a      	ldr	r0, [pc, #40]	; (8003244 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 800321c:	f008 f991 	bl	800b542 <R3_1_BRK_IRQHandler>
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
 8003220:	4807      	ldr	r0, [pc, #28]	; (8003240 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 8003222:	f7ff ff6f 	bl	8003104 <LL_TIM_IsActiveFlag_BRK2>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <TIM1_BRK_TIM15_IRQHandler+0x34>
  {
    LL_TIM_ClearFlag_BRK2(TIM1);  
 800322c:	4804      	ldr	r0, [pc, #16]	; (8003240 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 800322e:	f7ff ff5b 	bl	80030e8 <LL_TIM_ClearFlag_BRK2>
    R3_1_BRK2_IRQHandler(&PWM_Handle_M1);    
 8003232:	4804      	ldr	r0, [pc, #16]	; (8003244 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8003234:	f008 f948 	bl	800b4c8 <R3_1_BRK2_IRQHandler>
  }
  /* Systick is not executed due low priority so is necessary to call MC_Scheduler here.*/
  MC_Scheduler();
 8003238:	f7fe f8f4 	bl	8001424 <MC_Scheduler>
  
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */ 
}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40012c00 	.word	0x40012c00
 8003244:	20000244 	.word	0x20000244

08003248 <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0

 /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800324e:	4b23      	ldr	r3, [pc, #140]	; (80032dc <USART1_IRQHandler+0x94>)
 8003250:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff7c 	bl	8003152 <LL_USART_IsActiveFlag_RXNE>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d018      	beq.n	8003292 <USART1_IRQHandler+0x4a>
  {
    uint16_t retVal;
    retVal = *(uint16_t*)UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx));
 8003260:	4b1e      	ldr	r3, [pc, #120]	; (80032dc <USART1_IRQHandler+0x94>)
 8003262:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff ffa6 	bl	80031b8 <LL_USART_ReceiveData8>
 800326c:	4603      	mov	r3, r0
 800326e:	b29b      	uxth	r3, r3
 8003270:	4619      	mov	r1, r3
 8003272:	481a      	ldr	r0, [pc, #104]	; (80032dc <USART1_IRQHandler+0x94>)
 8003274:	f009 fba2 	bl	800c9bc <UFCP_RX_IRQ_Handler>
 8003278:	4603      	mov	r3, r0
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	80fb      	strh	r3, [r7, #6]
    if (retVal == 1)
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <USART1_IRQHandler+0x40>
    {
      UI_SerialCommunicationTimeOutStart();
 8003284:	f000 fae0 	bl	8003848 <UI_SerialCommunicationTimeOutStart>
    }
    if (retVal == 2)
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d101      	bne.n	8003292 <USART1_IRQHandler+0x4a>
    {
      UI_SerialCommunicationTimeOutStop();
 800328e:	f000 facf 	bl	8003830 <UI_SerialCommunicationTimeOutStop>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */ 
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003292:	4b12      	ldr	r3, [pc, #72]	; (80032dc <USART1_IRQHandler+0x94>)
 8003294:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff6d 	bl	8003178 <LL_USART_IsActiveFlag_TXE>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <USART1_IRQHandler+0x62>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 80032a4:	480d      	ldr	r0, [pc, #52]	; (80032dc <USART1_IRQHandler+0x94>)
 80032a6:	f009 fc2d 	bl	800cb04 <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }
  
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <USART1_IRQHandler+0x94>)
 80032ac:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff3b 	bl	800312c <LL_USART_IsActiveFlag_ORE>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <USART1_IRQHandler+0x8a>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 80032bc:	4807      	ldr	r0, [pc, #28]	; (80032dc <USART1_IRQHandler+0x94>)
 80032be:	f009 fc81 	bl	800cbc4 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <USART1_IRQHandler+0x94>)
 80032c4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ff68 	bl	800319e <LL_USART_ClearFlag_ORE>
    UI_SerialCommunicationTimeOutStop();
 80032ce:	f000 faaf 	bl	8003830 <UI_SerialCommunicationTimeOutStop>
  }
  /* USER CODE BEGIN USART_IRQn 1 */
  
  /* USER CODE END USART_IRQn 1 */

}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	2000054c 	.word	0x2000054c

080032e0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80032e6:	f7fe fd77 	bl	8001dd8 <TSK_HardwareFaultTask>
  
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80032ea:	4b21      	ldr	r3, [pc, #132]	; (8003370 <HardFault_Handler+0x90>)
 80032ec:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff1b 	bl	800312c <LL_USART_IsActiveFlag_ORE>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HardFault_Handler+0x32>
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 80032fc:	481c      	ldr	r0, [pc, #112]	; (8003370 <HardFault_Handler+0x90>)
 80032fe:	f009 fc61 	bl	800cbc4 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003302:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <HardFault_Handler+0x90>)
 8003304:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ff48 	bl	800319e <LL_USART_ClearFlag_ORE>
        UI_SerialCommunicationTimeOutStop();
 800330e:	f000 fa8f 	bl	8003830 <UI_SerialCommunicationTimeOutStop>
      }
      
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003312:	4b17      	ldr	r3, [pc, #92]	; (8003370 <HardFault_Handler+0x90>)
 8003314:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff2d 	bl	8003178 <LL_USART_IsActiveFlag_TXE>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HardFault_Handler+0x4a>
      {   
        UFCP_TX_IRQ_Handler(&pUSART);
 8003324:	4812      	ldr	r0, [pc, #72]	; (8003370 <HardFault_Handler+0x90>)
 8003326:	f009 fbed 	bl	800cb04 <UFCP_TX_IRQ_Handler>
      }  
      
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800332a:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HardFault_Handler+0x90>)
 800332c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff0e 	bl	8003152 <LL_USART_IsActiveFlag_RXNE>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0d6      	beq.n	80032ea <HardFault_Handler+0xa>
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <HardFault_Handler+0x90>)
 800333e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff ff38 	bl	80031b8 <LL_USART_ReceiveData8>
 8003348:	4603      	mov	r3, r0
 800334a:	b29b      	uxth	r3, r3
 800334c:	4619      	mov	r1, r3
 800334e:	4808      	ldr	r0, [pc, #32]	; (8003370 <HardFault_Handler+0x90>)
 8003350:	f009 fb34 	bl	800c9bc <UFCP_RX_IRQ_Handler>
 8003354:	4603      	mov	r3, r0
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	80fb      	strh	r3, [r7, #6]
        if (retVal == 1)
 800335a:	88fb      	ldrh	r3, [r7, #6]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HardFault_Handler+0x84>
        {
          UI_SerialCommunicationTimeOutStart();
 8003360:	f000 fa72 	bl	8003848 <UI_SerialCommunicationTimeOutStart>
        }
        if (retVal == 2)
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d1bf      	bne.n	80032ea <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 800336a:	f000 fa61 	bl	8003830 <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800336e:	e7bc      	b.n	80032ea <HardFault_Handler+0xa>
 8003370:	2000054c 	.word	0x2000054c

08003374 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <SysTick_Handler+0x30>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d106      	bne.n	800338e <SysTick_Handler+0x1a>
  {
    HAL_IncTick();
 8003380:	f001 fc3a 	bl	8004bf8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003384:	f002 ff8f 	bl	80062a6 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <SysTick_Handler+0x30>)
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
  }
  SystickDividerCounter ++;  
 800338e:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <SysTick_Handler+0x30>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	3301      	adds	r3, #1
 8003394:	b2da      	uxtb	r2, r3
 8003396:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <SysTick_Handler+0x30>)
 8003398:	701a      	strb	r2, [r3, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 800339a:	f7fe f833 	bl	8001404 <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	2000068c 	.word	0x2000068c

080033a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ae:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <HAL_MspInit+0x44>)
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <HAL_MspInit+0x44>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6193      	str	r3, [r2, #24]
 80033ba:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <HAL_MspInit+0x44>)
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	607b      	str	r3, [r7, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_MspInit+0x44>)
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	4a08      	ldr	r2, [pc, #32]	; (80033ec <HAL_MspInit+0x44>)
 80033cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d0:	61d3      	str	r3, [r2, #28]
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <HAL_MspInit+0x44>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80033de:	2004      	movs	r0, #4
 80033e0:	f002 ff20 	bl	8006224 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40021000 	.word	0x40021000

080033f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08c      	sub	sp, #48	; 0x30
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f8:	f107 031c 	add.w	r3, r7, #28
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003410:	d125      	bne.n	800345e <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003412:	4b2a      	ldr	r3, [pc, #168]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	4a29      	ldr	r2, [pc, #164]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 8003418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341c:	6153      	str	r3, [r2, #20]
 800341e:	4b27      	ldr	r3, [pc, #156]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342a:	4b24      	ldr	r3, [pc, #144]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	4a23      	ldr	r2, [pc, #140]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 8003430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003434:	6153      	str	r3, [r2, #20]
 8003436:	4b21      	ldr	r3, [pc, #132]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin|M1_TEMPERATURE_Pin;
 8003442:	230f      	movs	r3, #15
 8003444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003446:	2303      	movs	r3, #3
 8003448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344a:	2300      	movs	r3, #0
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344e:	f107 031c 	add.w	r3, r7, #28
 8003452:	4619      	mov	r1, r3
 8003454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003458:	f002 ff32 	bl	80062c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800345c:	e029      	b.n	80034b2 <HAL_ADC_MspInit+0xc2>
  else if(hadc->Instance==ADC3)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a17      	ldr	r2, [pc, #92]	; (80034c0 <HAL_ADC_MspInit+0xd0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d124      	bne.n	80034b2 <HAL_ADC_MspInit+0xc2>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8003468:	4b14      	ldr	r3, [pc, #80]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	4a13      	ldr	r2, [pc, #76]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 800346e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003472:	6153      	str	r3, [r2, #20]
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	4a0d      	ldr	r2, [pc, #52]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 8003486:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800348a:	6153      	str	r3, [r2, #20]
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8003498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800349c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800349e:	2303      	movs	r3, #3
 80034a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80034a6:	f107 031c 	add.w	r3, r7, #28
 80034aa:	4619      	mov	r1, r3
 80034ac:	4805      	ldr	r0, [pc, #20]	; (80034c4 <HAL_ADC_MspInit+0xd4>)
 80034ae:	f002 ff07 	bl	80062c0 <HAL_GPIO_Init>
}
 80034b2:	bf00      	nop
 80034b4:	3730      	adds	r7, #48	; 0x30
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	50000400 	.word	0x50000400
 80034c4:	48000400 	.word	0x48000400

080034c8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08a      	sub	sp, #40	; 0x28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	f107 0314 	add.w	r3, r7, #20
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a2e      	ldr	r2, [pc, #184]	; (80035a0 <HAL_COMP_MspInit+0xd8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d119      	bne.n	800351e <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ea:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <HAL_COMP_MspInit+0xdc>)
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	4a2d      	ldr	r2, [pc, #180]	; (80035a4 <HAL_COMP_MspInit+0xdc>)
 80034f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f4:	6153      	str	r3, [r2, #20]
 80034f6:	4b2b      	ldr	r3, [pc, #172]	; (80035a4 <HAL_COMP_MspInit+0xdc>)
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration    
    PA7     ------> COMP2_INP 
    */
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003506:	2303      	movs	r3, #3
 8003508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800350e:	f107 0314 	add.w	r3, r7, #20
 8003512:	4619      	mov	r1, r3
 8003514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003518:	f002 fed2 	bl	80062c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 800351c:	e03b      	b.n	8003596 <HAL_COMP_MspInit+0xce>
  else if(hcomp->Instance==COMP4)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a21      	ldr	r2, [pc, #132]	; (80035a8 <HAL_COMP_MspInit+0xe0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d118      	bne.n	800355a <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003528:	4b1e      	ldr	r3, [pc, #120]	; (80035a4 <HAL_COMP_MspInit+0xdc>)
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	4a1d      	ldr	r2, [pc, #116]	; (80035a4 <HAL_COMP_MspInit+0xdc>)
 800352e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003532:	6153      	str	r3, [r2, #20]
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_COMP_MspInit+0xdc>)
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8003540:	2301      	movs	r3, #1
 8003542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003544:	2303      	movs	r3, #3
 8003546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 800354c:	f107 0314 	add.w	r3, r7, #20
 8003550:	4619      	mov	r1, r3
 8003552:	4816      	ldr	r0, [pc, #88]	; (80035ac <HAL_COMP_MspInit+0xe4>)
 8003554:	f002 feb4 	bl	80062c0 <HAL_GPIO_Init>
}
 8003558:	e01d      	b.n	8003596 <HAL_COMP_MspInit+0xce>
  else if(hcomp->Instance==COMP6)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a14      	ldr	r2, [pc, #80]	; (80035b0 <HAL_COMP_MspInit+0xe8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d118      	bne.n	8003596 <HAL_COMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003564:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <HAL_COMP_MspInit+0xdc>)
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	4a0e      	ldr	r2, [pc, #56]	; (80035a4 <HAL_COMP_MspInit+0xdc>)
 800356a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800356e:	6153      	str	r3, [r2, #20]
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <HAL_COMP_MspInit+0xdc>)
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 800357c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003582:	2303      	movs	r3, #3
 8003584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 800358a:	f107 0314 	add.w	r3, r7, #20
 800358e:	4619      	mov	r1, r3
 8003590:	4806      	ldr	r0, [pc, #24]	; (80035ac <HAL_COMP_MspInit+0xe4>)
 8003592:	f002 fe95 	bl	80062c0 <HAL_GPIO_Init>
}
 8003596:	bf00      	nop
 8003598:	3728      	adds	r7, #40	; 0x28
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40010020 	.word	0x40010020
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40010028 	.word	0x40010028
 80035ac:	48000400 	.word	0x48000400
 80035b0:	40010030 	.word	0x40010030

080035b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <HAL_TIM_Base_MspInit+0x38>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d10b      	bne.n	80035de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <HAL_TIM_Base_MspInit+0x3c>)
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <HAL_TIM_Base_MspInit+0x3c>)
 80035cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035d0:	6193      	str	r3, [r2, #24]
 80035d2:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <HAL_TIM_Base_MspInit+0x3c>)
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40021000 	.word	0x40021000

080035f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	; 0x28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	f107 0314 	add.w	r3, r7, #20
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a29      	ldr	r2, [pc, #164]	; (80036b8 <HAL_TIM_MspPostInit+0xc4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d14b      	bne.n	80036ae <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003616:	4b29      	ldr	r3, [pc, #164]	; (80036bc <HAL_TIM_MspPostInit+0xc8>)
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	4a28      	ldr	r2, [pc, #160]	; (80036bc <HAL_TIM_MspPostInit+0xc8>)
 800361c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003620:	6153      	str	r3, [r2, #20]
 8003622:	4b26      	ldr	r3, [pc, #152]	; (80036bc <HAL_TIM_MspPostInit+0xc8>)
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362e:	4b23      	ldr	r3, [pc, #140]	; (80036bc <HAL_TIM_MspPostInit+0xc8>)
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	4a22      	ldr	r2, [pc, #136]	; (80036bc <HAL_TIM_MspPostInit+0xc8>)
 8003634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003638:	6153      	str	r3, [r2, #20]
 800363a:	4b20      	ldr	r3, [pc, #128]	; (80036bc <HAL_TIM_MspPostInit+0xc8>)
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8003646:	2302      	movs	r3, #2
 8003648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364a:	2302      	movs	r3, #2
 800364c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800364e:	2301      	movs	r3, #1
 8003650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003652:	2303      	movs	r3, #3
 8003654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003656:	2306      	movs	r3, #6
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 800365a:	f107 0314 	add.w	r3, r7, #20
 800365e:	4619      	mov	r1, r3
 8003660:	4817      	ldr	r0, [pc, #92]	; (80036c0 <HAL_TIM_MspPostInit+0xcc>)
 8003662:	f002 fe2d 	bl	80062c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003666:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800366a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366c:	2302      	movs	r3, #2
 800366e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003670:	2302      	movs	r3, #2
 8003672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003674:	2303      	movs	r3, #3
 8003676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003678:	2306      	movs	r3, #6
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367c:	f107 0314 	add.w	r3, r7, #20
 8003680:	4619      	mov	r1, r3
 8003682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003686:	f002 fe1b 	bl	80062c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin;
 800368a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800368e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003690:	2302      	movs	r3, #2
 8003692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003694:	2301      	movs	r3, #1
 8003696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003698:	2303      	movs	r3, #3
 800369a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800369c:	2306      	movs	r3, #6
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a0:	f107 0314 	add.w	r3, r7, #20
 80036a4:	4619      	mov	r1, r3
 80036a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036aa:	f002 fe09 	bl	80062c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80036ae:	bf00      	nop
 80036b0:	3728      	adds	r7, #40	; 0x28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40012c00 	.word	0x40012c00
 80036bc:	40021000 	.word	0x40021000
 80036c0:	48000400 	.word	0x48000400

080036c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a17      	ldr	r2, [pc, #92]	; (8003740 <HAL_UART_MspInit+0x7c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d127      	bne.n	8003736 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036e6:	4b17      	ldr	r3, [pc, #92]	; (8003744 <HAL_UART_MspInit+0x80>)
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	4a16      	ldr	r2, [pc, #88]	; (8003744 <HAL_UART_MspInit+0x80>)
 80036ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f0:	6193      	str	r3, [r2, #24]
 80036f2:	4b14      	ldr	r3, [pc, #80]	; (8003744 <HAL_UART_MspInit+0x80>)
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <HAL_UART_MspInit+0x80>)
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	4a10      	ldr	r2, [pc, #64]	; (8003744 <HAL_UART_MspInit+0x80>)
 8003704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003708:	6153      	str	r3, [r2, #20]
 800370a:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <HAL_UART_MspInit+0x80>)
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003716:	23c0      	movs	r3, #192	; 0xc0
 8003718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371a:	2302      	movs	r3, #2
 800371c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003722:	2300      	movs	r3, #0
 8003724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003726:	2307      	movs	r3, #7
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372a:	f107 0314 	add.w	r3, r7, #20
 800372e:	4619      	mov	r1, r3
 8003730:	4805      	ldr	r0, [pc, #20]	; (8003748 <HAL_UART_MspInit+0x84>)
 8003732:	f002 fdc5 	bl	80062c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003736:	bf00      	nop
 8003738:	3728      	adds	r7, #40	; 0x28
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40013800 	.word	0x40013800
 8003744:	40021000 	.word	0x40021000
 8003748:	48000400 	.word	0x48000400

0800374c <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 800374c:	b5b0      	push	{r4, r5, r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	460b      	mov	r3, r1
 800375a:	72fb      	strb	r3, [r7, #11]

    pMCP = &MCP_UI_Params;
 800375c:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <UI_TaskInit+0x64>)
 800375e:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <UI_TaskInit+0x68>)
 8003760:	601a      	str	r2, [r3, #0]
    pMCP->_Super = UI_Params;
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <UI_TaskInit+0x64>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <UI_TaskInit+0x6c>)
 8003768:	461c      	mov	r4, r3
 800376a:	4615      	mov	r5, r2
 800376c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800376e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003770:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003774:	e884 0003 	stmia.w	r4, {r0, r1}

    UFCP_Init( & pUSART );
 8003778:	4810      	ldr	r0, [pc, #64]	; (80037bc <UI_TaskInit+0x70>)
 800377a:	f009 f912 	bl	800c9a2 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 800377e:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <UI_TaskInit+0x64>)
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <UI_TaskInit+0x74>)
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <UI_TaskInit+0x78>)
 800378c:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <UI_TaskInit+0x7c>)
 800378e:	490b      	ldr	r1, [pc, #44]	; (80037bc <UI_TaskInit+0x70>)
 8003790:	f7fe fb84 	bl	8001e9c <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <UI_TaskInit+0x64>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	7af9      	ldrb	r1, [r7, #11]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	f000 f85c 	bl	8003860 <UI_Init>

}
 80037a8:	bf00      	nop
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bdb0      	pop	{r4, r5, r7, pc}
 80037b0:	200006e0 	.word	0x200006e0
 80037b4:	200009fc 	.word	0x200009fc
 80037b8:	200006b8 	.word	0x200006b8
 80037bc:	2000054c 	.word	0x2000054c
 80037c0:	0800ccc5 	.word	0x0800ccc5
 80037c4:	0800cbeb 	.word	0x0800cbeb
 80037c8:	0800cc31 	.word	0x0800cc31

080037cc <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  if(bUITaskCounter > 0u)
 80037d0:	4b14      	ldr	r3, [pc, #80]	; (8003824 <UI_Scheduler+0x58>)
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d006      	beq.n	80037e8 <UI_Scheduler+0x1c>
  {
    bUITaskCounter--;
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <UI_Scheduler+0x58>)
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <UI_Scheduler+0x58>)
 80037e6:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 80037e8:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <UI_Scheduler+0x5c>)
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d906      	bls.n	8003800 <UI_Scheduler+0x34>
  {
    bCOMTimeoutCounter--;
 80037f2:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <UI_Scheduler+0x5c>)
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <UI_Scheduler+0x5c>)
 80037fe:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <UI_Scheduler+0x60>)
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d906      	bls.n	8003818 <UI_Scheduler+0x4c>
  {
    bCOMATRTimeCounter--;
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <UI_Scheduler+0x60>)
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <UI_Scheduler+0x60>)
 8003816:	801a      	strh	r2, [r3, #0]
  }
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	200006e4 	.word	0x200006e4
 8003828:	200006e6 	.word	0x200006e6
 800382c:	2000068e 	.word	0x2000068e

08003830 <UI_SerialCommunicationTimeOutStop>:
  }
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  bCOMTimeoutCounter = 0u;
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <UI_SerialCommunicationTimeOutStop+0x14>)
 8003836:	2200      	movs	r2, #0
 8003838:	801a      	strh	r2, [r3, #0]
}
 800383a:	bf00      	nop
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	200006e6 	.word	0x200006e6

08003848 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 800384c:	4b03      	ldr	r3, [pc, #12]	; (800385c <UI_SerialCommunicationTimeOutStart+0x14>)
 800384e:	224f      	movs	r2, #79	; 0x4f
 8003850:	801a      	strh	r2, [r3, #0]
}
 8003852:	bf00      	nop
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	200006e6 	.word	0x200006e6

08003860 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	460b      	mov	r3, r1
 800386e:	72fb      	strb	r3, [r7, #11]
  pHandle->bDriveNum = bMCNum;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	7afa      	ldrb	r2, [r7, #11]
 8003874:	711a      	strb	r2, [r3, #4]
  pHandle->pMCI = pMCI;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	609a      	str	r2, [r3, #8]
  pHandle->pMCT = pMCT;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	60da      	str	r2, [r3, #12]
  pHandle->bSelectedDrive = 0u;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	751a      	strb	r2, [r3, #20]
  pHandle->pUICfg = pUICfg;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	611a      	str	r2, [r3, #16]
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <UI_SelectMC>:
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @param  bSelectMC: The new selected MC, zero based, on which UI operates.
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
 800389a:	b480      	push	{r7}
 800389c:	b085      	sub	sp, #20
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	70fb      	strb	r3, [r7, #3]
  bool retVal = true;
 80038a6:	2301      	movs	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
  if (bSelectMC  >= pHandle->bDriveNum)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	791b      	ldrb	r3, [r3, #4]
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d302      	bcc.n	80038ba <UI_SelectMC+0x20>
  {
    retVal = false;
 80038b4:	2300      	movs	r3, #0
 80038b6:	73fb      	strb	r3, [r7, #15]
 80038b8:	e002      	b.n	80038c0 <UI_SelectMC+0x26>
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	751a      	strb	r2, [r3, #20]
  }
  return retVal;
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <UI_GetSelectedMC>:
  * @brief  Allow to retrieve the MC on which UI currently operates.
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  return (pHandle->bSelectedDrive);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	7d1b      	ldrb	r3, [r3, #20]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b096      	sub	sp, #88	; 0x58
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	460b      	mov	r3, r1
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	72fb      	strb	r3, [r7, #11]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	7d1b      	ldrb	r3, [r3, #20]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	643b      	str	r3, [r7, #64]	; 0x40
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	7d1b      	ldrb	r3, [r3, #20]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	63fb      	str	r3, [r7, #60]	; 0x3c

  bool retVal = true;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  switch (bRegID)
 800391c:	7afb      	ldrb	r3, [r7, #11]
 800391e:	2b5b      	cmp	r3, #91	; 0x5b
 8003920:	f200 8223 	bhi.w	8003d6a <UI_SetReg+0x482>
 8003924:	a201      	add	r2, pc, #4	; (adr r2, 800392c <UI_SetReg+0x44>)
 8003926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392a:	bf00      	nop
 800392c:	08003a9d 	.word	0x08003a9d
 8003930:	08003d6b 	.word	0x08003d6b
 8003934:	08003d6b 	.word	0x08003d6b
 8003938:	08003b0d 	.word	0x08003b0d
 800393c:	08003d6b 	.word	0x08003d6b
 8003940:	08003ad7 	.word	0x08003ad7
 8003944:	08003ae9 	.word	0x08003ae9
 8003948:	08003afb 	.word	0x08003afb
 800394c:	08003b45 	.word	0x08003b45
 8003950:	08003b5f 	.word	0x08003b5f
 8003954:	08003b71 	.word	0x08003b71
 8003958:	08003b83 	.word	0x08003b83
 800395c:	08003b95 	.word	0x08003b95
 8003960:	08003baf 	.word	0x08003baf
 8003964:	08003bc1 	.word	0x08003bc1
 8003968:	08003bd3 	.word	0x08003bd3
 800396c:	08003be5 	.word	0x08003be5
 8003970:	08003c43 	.word	0x08003c43
 8003974:	08003d6b 	.word	0x08003d6b
 8003978:	08003d6b 	.word	0x08003d6b
 800397c:	08003c9f 	.word	0x08003c9f
 8003980:	08003cfb 	.word	0x08003cfb
 8003984:	08003d6b 	.word	0x08003d6b
 8003988:	08003d6b 	.word	0x08003d6b
 800398c:	08003d6b 	.word	0x08003d6b
 8003990:	08003d6b 	.word	0x08003d6b
 8003994:	08003d6b 	.word	0x08003d6b
 8003998:	08003d6b 	.word	0x08003d6b
 800399c:	08003d6b 	.word	0x08003d6b
 80039a0:	08003d6b 	.word	0x08003d6b
 80039a4:	08003d6b 	.word	0x08003d6b
 80039a8:	08003d6b 	.word	0x08003d6b
 80039ac:	08003d6b 	.word	0x08003d6b
 80039b0:	08003d6b 	.word	0x08003d6b
 80039b4:	08003d6b 	.word	0x08003d6b
 80039b8:	08003d6b 	.word	0x08003d6b
 80039bc:	08003d6b 	.word	0x08003d6b
 80039c0:	08003d6b 	.word	0x08003d6b
 80039c4:	08003d6b 	.word	0x08003d6b
 80039c8:	08003d6b 	.word	0x08003d6b
 80039cc:	08003d6b 	.word	0x08003d6b
 80039d0:	08003d6b 	.word	0x08003d6b
 80039d4:	08003d6b 	.word	0x08003d6b
 80039d8:	08003d6b 	.word	0x08003d6b
 80039dc:	08003d6b 	.word	0x08003d6b
 80039e0:	08003d6b 	.word	0x08003d6b
 80039e4:	08003d6b 	.word	0x08003d6b
 80039e8:	08003d6b 	.word	0x08003d6b
 80039ec:	08003d6b 	.word	0x08003d6b
 80039f0:	08003d6b 	.word	0x08003d6b
 80039f4:	08003d6b 	.word	0x08003d6b
 80039f8:	08003d6b 	.word	0x08003d6b
 80039fc:	08003d6b 	.word	0x08003d6b
 8003a00:	08003d6b 	.word	0x08003d6b
 8003a04:	08003d6b 	.word	0x08003d6b
 8003a08:	08003d6b 	.word	0x08003d6b
 8003a0c:	08003d6b 	.word	0x08003d6b
 8003a10:	08003d6b 	.word	0x08003d6b
 8003a14:	08003d6b 	.word	0x08003d6b
 8003a18:	08003d6b 	.word	0x08003d6b
 8003a1c:	08003d6b 	.word	0x08003d6b
 8003a20:	08003d6b 	.word	0x08003d6b
 8003a24:	08003d6b 	.word	0x08003d6b
 8003a28:	08003d6b 	.word	0x08003d6b
 8003a2c:	08003d6b 	.word	0x08003d6b
 8003a30:	08003d5d 	.word	0x08003d5d
 8003a34:	08003d6b 	.word	0x08003d6b
 8003a38:	08003d6b 	.word	0x08003d6b
 8003a3c:	08003d6b 	.word	0x08003d6b
 8003a40:	08003d6b 	.word	0x08003d6b
 8003a44:	08003d6b 	.word	0x08003d6b
 8003a48:	08003d6b 	.word	0x08003d6b
 8003a4c:	08003d6b 	.word	0x08003d6b
 8003a50:	08003d6b 	.word	0x08003d6b
 8003a54:	08003d6b 	.word	0x08003d6b
 8003a58:	08003d6b 	.word	0x08003d6b
 8003a5c:	08003d6b 	.word	0x08003d6b
 8003a60:	08003d6b 	.word	0x08003d6b
 8003a64:	08003d6b 	.word	0x08003d6b
 8003a68:	08003d6b 	.word	0x08003d6b
 8003a6c:	08003d6b 	.word	0x08003d6b
 8003a70:	08003d6b 	.word	0x08003d6b
 8003a74:	08003d6b 	.word	0x08003d6b
 8003a78:	08003d6b 	.word	0x08003d6b
 8003a7c:	08003d6b 	.word	0x08003d6b
 8003a80:	08003d6b 	.word	0x08003d6b
 8003a84:	08003d6b 	.word	0x08003d6b
 8003a88:	08003d6b 	.word	0x08003d6b
 8003a8c:	08003d6b 	.word	0x08003d6b
 8003a90:	08003d6b 	.word	0x08003d6b
 8003a94:	08003d6b 	.word	0x08003d6b
 8003a98:	08003ab1 	.word	0x08003ab1
  {
  case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7ff fef9 	bl	800389a <UI_SelectMC>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }
    break;
 8003aae:	e169      	b.n	8003d84 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4aa7      	ldr	r2, [pc, #668]	; (8003d58 <UI_SetReg+0x470>)
 8003abc:	fb82 1203 	smull	r1, r2, r2, r3
 8003ac0:	441a      	add	r2, r3
 8003ac2:	1152      	asrs	r2, r2, #5
 8003ac4:	17db      	asrs	r3, r3, #31
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	b21b      	sxth	r3, r3
 8003aca:	2200      	movs	r2, #0
 8003acc:	4619      	mov	r1, r3
 8003ace:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003ad0:	f7fc ff6a 	bl	80009a8 <MCI_ExecSpeedRamp>
    }
    break;
 8003ad4:	e156      	b.n	8003d84 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_SPEED_KP:
    {
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	b212      	sxth	r2, r2
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f005 fdaa 	bl	800963a <PID_SetKP>
    }
    break;
 8003ae6:	e14d      	b.n	8003d84 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_SPEED_KI:
    {
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8003ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	b212      	sxth	r2, r2
 8003af0:	4611      	mov	r1, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f005 fdb0 	bl	8009658 <PID_SetKI>
    }
    break;
 8003af8:	e144      	b.n	8003d84 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_SPEED_KD:
    {
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8003afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	b212      	sxth	r2, r2
 8003b02:	4611      	mov	r1, r2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f005 fdf6 	bl	80096f6 <PID_SetKD>
    }
    break;
 8003b0a:	e13b      	b.n	8003d84 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_CONTROL_MODE:
    {
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d108      	bne.n	8003b26 <UI_SetReg+0x23e>
      {
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8003b14:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003b16:	f7fd f965 	bl	8000de4 <MCI_GetTeref>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003b22:	f7fc ff5e 	bl	80009e2 <MCI_ExecTorqueRamp>
      }
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	f040 8121 	bne.w	8003d72 <UI_SetReg+0x48a>
      {
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8003b30:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003b32:	f7fd f8ba 	bl	8000caa <MCI_GetMecSpeedRefUnit>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2200      	movs	r2, #0
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003b3e:	f7fc ff33 	bl	80009a8 <MCI_ExecSpeedRamp>
      }
    }
    break;
 8003b42:	e116      	b.n	8003d72 <UI_SetReg+0x48a>

  case MC_PROTOCOL_REG_TORQUE_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8003b44:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003b46:	f7fd f905 	bl	8000d54 <MCI_GetIqdref>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
      currComp.q = (int16_t)wValue;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	b21b      	sxth	r3, r3
 8003b52:	853b      	strh	r3, [r7, #40]	; 0x28
      MCI_SetCurrentReferences(pMCI,currComp);
 8003b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b56:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003b58:	f7fc ff60 	bl	8000a1c <MCI_SetCurrentReferences>
    }
    break;
 8003b5c:	e112      	b.n	8003d84 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_TORQUE_KP:
    {
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8003b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	b212      	sxth	r2, r2
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f005 fd66 	bl	800963a <PID_SetKP>
    }
    break;
 8003b6e:	e109      	b.n	8003d84 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_TORQUE_KI:
    {
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8003b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	b212      	sxth	r2, r2
 8003b78:	4611      	mov	r1, r2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f005 fd6c 	bl	8009658 <PID_SetKI>
    }
    break;
 8003b80:	e100      	b.n	8003d84 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_TORQUE_KD:
    {
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8003b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	b212      	sxth	r2, r2
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f005 fdb2 	bl	80096f6 <PID_SetKD>
    }
    break;
 8003b92:	e0f7      	b.n	8003d84 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8003b94:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003b96:	f7fd f8dd 	bl	8000d54 <MCI_GetIqdref>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
      currComp.d = (int16_t)wValue;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	b21b      	sxth	r3, r3
 8003ba2:	84fb      	strh	r3, [r7, #38]	; 0x26
      MCI_SetCurrentReferences(pMCI,currComp);
 8003ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ba6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003ba8:	f7fc ff38 	bl	8000a1c <MCI_SetCurrentReferences>
    }
    break;
 8003bac:	e0ea      	b.n	8003d84 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_KP:
    {
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8003bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	b212      	sxth	r2, r2
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f005 fd3e 	bl	800963a <PID_SetKP>
    }
    break;
 8003bbe:	e0e1      	b.n	8003d84 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_KI:
    {
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8003bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	b212      	sxth	r2, r2
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f005 fd44 	bl	8009658 <PID_SetKI>
    }
    break;
 8003bd0:	e0d8      	b.n	8003d84 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_KD:
    {
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8003bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	b212      	sxth	r2, r2
 8003bda:	4611      	mov	r1, r2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f005 fd8a 	bl	80096f6 <PID_SetKD>
    }
    break;
 8003be2:	e0cf      	b.n	8003d84 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_OBSERVER_C1:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	7d1b      	ldrb	r3, [r3, #20]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	653b      	str	r3, [r7, #80]	; 0x50
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfa:	0f1b      	lsrs	r3, r3, #28
 8003bfc:	2b09      	cmp	r3, #9
 8003bfe:	d102      	bne.n	8003c06 <UI_SetReg+0x31e>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8003c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	653b      	str	r3, [r7, #80]	; 0x50
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	0e1b      	lsrs	r3, r3, #24
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	2b09      	cmp	r3, #9
 8003c10:	d102      	bne.n	8003c18 <UI_SetReg+0x330>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8003c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	653b      	str	r3, [r7, #80]	; 0x50
      }
      if (pSPD != MC_NULL)
 8003c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80ab 	beq.w	8003d76 <UI_SetReg+0x48e>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8003c20:	f107 0220 	add.w	r2, r7, #32
 8003c24:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8003c28:	4619      	mov	r1, r3
 8003c2a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003c2c:	f009 fe54 	bl	800d8d8 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	b21b      	sxth	r3, r3
 8003c34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003c38:	4619      	mov	r1, r3
 8003c3a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003c3c:	f009 fe54 	bl	800d8e8 <STO_PLL_SetObserverGains>
      }
    }
    break;
 8003c40:	e099      	b.n	8003d76 <UI_SetReg+0x48e>

  case MC_PROTOCOL_REG_OBSERVER_C2:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	7d1b      	ldrb	r3, [r3, #20]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	633b      	str	r3, [r7, #48]	; 0x30
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	64fb      	str	r3, [r7, #76]	; 0x4c
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	0f1b      	lsrs	r3, r3, #28
 8003c5a:	2b09      	cmp	r3, #9
 8003c5c:	d102      	bne.n	8003c64 <UI_SetReg+0x37c>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8003c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	0e1b      	lsrs	r3, r3, #24
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	2b09      	cmp	r3, #9
 8003c6e:	d102      	bne.n	8003c76 <UI_SetReg+0x38e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8003c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      if (pSPD != MC_NULL)
 8003c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d07e      	beq.n	8003d7a <UI_SetReg+0x492>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8003c7c:	f107 021c 	add.w	r2, r7, #28
 8003c80:	f107 031e 	add.w	r3, r7, #30
 8003c84:	4619      	mov	r1, r3
 8003c86:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003c88:	f009 fe26 	bl	800d8d8 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 8003c8c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	b212      	sxth	r2, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003c98:	f009 fe26 	bl	800d8e8 <STO_PLL_SetObserverGains>
      }
    }
    break;
 8003c9c:	e06d      	b.n	8003d7a <UI_SetReg+0x492>

  case MC_PROTOCOL_REG_PLL_KI:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	7d1b      	ldrb	r3, [r3, #20]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	637b      	str	r3, [r7, #52]	; 0x34
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	64bb      	str	r3, [r7, #72]	; 0x48
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb4:	0f1b      	lsrs	r3, r3, #28
 8003cb6:	2b09      	cmp	r3, #9
 8003cb8:	d102      	bne.n	8003cc0 <UI_SetReg+0x3d8>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8003cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	64bb      	str	r3, [r7, #72]	; 0x48
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc2:	0e1b      	lsrs	r3, r3, #24
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	2b09      	cmp	r3, #9
 8003cca:	d102      	bne.n	8003cd2 <UI_SetReg+0x3ea>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8003ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      }
      if (pSPD != MC_NULL)
 8003cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d052      	beq.n	8003d7e <UI_SetReg+0x496>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8003cd8:	f107 0218 	add.w	r2, r7, #24
 8003cdc:	f107 031a 	add.w	r3, r7, #26
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003ce4:	f009 fe04 	bl	800d8f0 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8003ce8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	b212      	sxth	r2, r2
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003cf4:	f009 fe0a 	bl	800d90c <STO_SetPLLGains>
      }
    }
    break;
 8003cf8:	e041      	b.n	8003d7e <UI_SetReg+0x496>

  case MC_PROTOCOL_REG_PLL_KP:
	{
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	7d1b      	ldrb	r3, [r3, #20]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	63bb      	str	r3, [r7, #56]	; 0x38
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	647b      	str	r3, [r7, #68]	; 0x44
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	0f1b      	lsrs	r3, r3, #28
 8003d12:	2b09      	cmp	r3, #9
 8003d14:	d102      	bne.n	8003d1c <UI_SetReg+0x434>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8003d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1e:	0e1b      	lsrs	r3, r3, #24
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	2b09      	cmp	r3, #9
 8003d26:	d102      	bne.n	8003d2e <UI_SetReg+0x446>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8003d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      if (pSPD != MC_NULL)
 8003d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d026      	beq.n	8003d82 <UI_SetReg+0x49a>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8003d34:	f107 0214 	add.w	r2, r7, #20
 8003d38:	f107 0316 	add.w	r3, r7, #22
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003d40:	f009 fdd6 	bl	800d8f0 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	b21b      	sxth	r3, r3
 8003d48:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003d50:	f009 fddc 	bl	800d90c <STO_SetPLLGains>
      }
    }
    break;
 8003d54:	e015      	b.n	8003d82 <UI_SetReg+0x49a>
 8003d56:	bf00      	nop
 8003d58:	88888889 	.word	0x88888889

  case MC_PROTOCOL_REG_IQ_SPEEDMODE:
    {
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	b21b      	sxth	r3, r3
 8003d60:	4619      	mov	r1, r3
 8003d62:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003d64:	f7fd f84c 	bl	8000e00 <MCI_SetIdref>
    }
    break;
 8003d68:	e00c      	b.n	8003d84 <UI_SetReg+0x49c>

  default:
    retVal = false;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    break;
 8003d70:	e008      	b.n	8003d84 <UI_SetReg+0x49c>
    break;
 8003d72:	bf00      	nop
 8003d74:	e006      	b.n	8003d84 <UI_SetReg+0x49c>
    break;
 8003d76:	bf00      	nop
 8003d78:	e004      	b.n	8003d84 <UI_SetReg+0x49c>
    break;
 8003d7a:	bf00      	nop
 8003d7c:	e002      	b.n	8003d84 <UI_SetReg+0x49c>
    break;
 8003d7e:	bf00      	nop
 8003d80:	e000      	b.n	8003d84 <UI_SetReg+0x49c>
    break;
 8003d82:	bf00      	nop
  }

  return retVal;
 8003d84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3758      	adds	r7, #88	; 0x58
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b0b6      	sub	sp, #216	; 0xd8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	72fb      	strb	r3, [r7, #11]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	7d1b      	ldrb	r3, [r3, #20]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	7d1b      	ldrb	r3, [r3, #20]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  int32_t bRetVal = 0;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  if ( success != (bool *) 0 ) 
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <UI_GetReg+0x44>
  {
    *success = true;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
  }

  switch (bRegID)
 8003dd4:	7afb      	ldrb	r3, [r7, #11]
 8003dd6:	2b81      	cmp	r3, #129	; 0x81
 8003dd8:	f200 8552 	bhi.w	8004880 <UI_GetReg+0xaf0>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <UI_GetReg+0x54>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003fed 	.word	0x08003fed
 8003de8:	08003ffd 	.word	0x08003ffd
 8003dec:	08004013 	.word	0x08004013
 8003df0:	08004133 	.word	0x08004133
 8003df4:	08004029 	.word	0x08004029
 8003df8:	08004051 	.word	0x08004051
 8003dfc:	08004067 	.word	0x08004067
 8003e00:	0800407d 	.word	0x0800407d
 8003e04:	08004107 	.word	0x08004107
 8003e08:	080041c5 	.word	0x080041c5
 8003e0c:	080041d9 	.word	0x080041d9
 8003e10:	080041ed 	.word	0x080041ed
 8003e14:	0800411d 	.word	0x0800411d
 8003e18:	08004217 	.word	0x08004217
 8003e1c:	0800422b 	.word	0x0800422b
 8003e20:	0800423f 	.word	0x0800423f
 8003e24:	08004253 	.word	0x08004253
 8003e28:	080042b5 	.word	0x080042b5
 8003e2c:	08004881 	.word	0x08004881
 8003e30:	08004881 	.word	0x08004881
 8003e34:	080043db 	.word	0x080043db
 8003e38:	08004379 	.word	0x08004379
 8003e3c:	08004881 	.word	0x08004881
 8003e40:	08004881 	.word	0x08004881
 8003e44:	08004881 	.word	0x08004881
 8003e48:	08004093 	.word	0x08004093
 8003e4c:	080040a9 	.word	0x080040a9
 8003e50:	080046eb 	.word	0x080046eb
 8003e54:	08004881 	.word	0x08004881
 8003e58:	08004881 	.word	0x08004881
 8003e5c:	080040bd 	.word	0x080040bd
 8003e60:	08004753 	.word	0x08004753
 8003e64:	08004769 	.word	0x08004769
 8003e68:	08004881 	.word	0x08004881
 8003e6c:	0800477f 	.word	0x0800477f
 8003e70:	080047a5 	.word	0x080047a5
 8003e74:	080047bb 	.word	0x080047bb
 8003e78:	080047d1 	.word	0x080047d1
 8003e7c:	080047e7 	.word	0x080047e7
 8003e80:	08004753 	.word	0x08004753
 8003e84:	08004769 	.word	0x08004769
 8003e88:	080047fd 	.word	0x080047fd
 8003e8c:	08004813 	.word	0x08004813
 8003e90:	08004829 	.word	0x08004829
 8003e94:	0800483f 	.word	0x0800483f
 8003e98:	08004855 	.word	0x08004855
 8003e9c:	0800486b 	.word	0x0800486b
 8003ea0:	08004881 	.word	0x08004881
 8003ea4:	08004881 	.word	0x08004881
 8003ea8:	08004317 	.word	0x08004317
 8003eac:	0800443d 	.word	0x0800443d
 8003eb0:	0800449b 	.word	0x0800449b
 8003eb4:	080044ff 	.word	0x080044ff
 8003eb8:	08004563 	.word	0x08004563
 8003ebc:	080045c7 	.word	0x080045c7
 8003ec0:	08004881 	.word	0x08004881
 8003ec4:	08004881 	.word	0x08004881
 8003ec8:	08004881 	.word	0x08004881
 8003ecc:	08004881 	.word	0x08004881
 8003ed0:	08004881 	.word	0x08004881
 8003ed4:	08004881 	.word	0x08004881
 8003ed8:	08004881 	.word	0x08004881
 8003edc:	08004881 	.word	0x08004881
 8003ee0:	080046ff 	.word	0x080046ff
 8003ee4:	08004729 	.word	0x08004729
 8003ee8:	08004201 	.word	0x08004201
 8003eec:	0800462b 	.word	0x0800462b
 8003ef0:	0800468b 	.word	0x0800468b
 8003ef4:	08004881 	.word	0x08004881
 8003ef8:	08004881 	.word	0x08004881
 8003efc:	08004881 	.word	0x08004881
 8003f00:	08004881 	.word	0x08004881
 8003f04:	08004881 	.word	0x08004881
 8003f08:	08004881 	.word	0x08004881
 8003f0c:	08004881 	.word	0x08004881
 8003f10:	08004881 	.word	0x08004881
 8003f14:	08004881 	.word	0x08004881
 8003f18:	08004881 	.word	0x08004881
 8003f1c:	08004881 	.word	0x08004881
 8003f20:	08004881 	.word	0x08004881
 8003f24:	08004881 	.word	0x08004881
 8003f28:	08004881 	.word	0x08004881
 8003f2c:	08004881 	.word	0x08004881
 8003f30:	08004881 	.word	0x08004881
 8003f34:	08004881 	.word	0x08004881
 8003f38:	08004881 	.word	0x08004881
 8003f3c:	08004881 	.word	0x08004881
 8003f40:	08004881 	.word	0x08004881
 8003f44:	08004881 	.word	0x08004881
 8003f48:	08004881 	.word	0x08004881
 8003f4c:	08004881 	.word	0x08004881
 8003f50:	08004143 	.word	0x08004143
 8003f54:	08004881 	.word	0x08004881
 8003f58:	08004881 	.word	0x08004881
 8003f5c:	08004881 	.word	0x08004881
 8003f60:	08004881 	.word	0x08004881
 8003f64:	08004881 	.word	0x08004881
 8003f68:	08004881 	.word	0x08004881
 8003f6c:	08004881 	.word	0x08004881
 8003f70:	08004881 	.word	0x08004881
 8003f74:	08004881 	.word	0x08004881
 8003f78:	08004881 	.word	0x08004881
 8003f7c:	08004881 	.word	0x08004881
 8003f80:	08004881 	.word	0x08004881
 8003f84:	08004881 	.word	0x08004881
 8003f88:	08004881 	.word	0x08004881
 8003f8c:	08004881 	.word	0x08004881
 8003f90:	08004881 	.word	0x08004881
 8003f94:	08004881 	.word	0x08004881
 8003f98:	08004881 	.word	0x08004881
 8003f9c:	0800419d 	.word	0x0800419d
 8003fa0:	080041b1 	.word	0x080041b1
 8003fa4:	080040e3 	.word	0x080040e3
 8003fa8:	08004881 	.word	0x08004881
 8003fac:	080040eb 	.word	0x080040eb
 8003fb0:	080040f5 	.word	0x080040f5
 8003fb4:	08004881 	.word	0x08004881
 8003fb8:	08004881 	.word	0x08004881
 8003fbc:	08004881 	.word	0x08004881
 8003fc0:	08004881 	.word	0x08004881
 8003fc4:	08004881 	.word	0x08004881
 8003fc8:	08004881 	.word	0x08004881
 8003fcc:	08004881 	.word	0x08004881
 8003fd0:	08004881 	.word	0x08004881
 8003fd4:	08004881 	.word	0x08004881
 8003fd8:	08004881 	.word	0x08004881
 8003fdc:	08004881 	.word	0x08004881
 8003fe0:	08004881 	.word	0x08004881
 8003fe4:	08004881 	.word	0x08004881
 8003fe8:	080040ff 	.word	0x080040ff
  {
    case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff fc6e 	bl	80038ce <UI_GetSelectedMC>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8003ff8:	f000 bc5a 	b.w	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLAGS:
    {
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003ffc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004002:	4618      	mov	r0, r3
 8004004:	f008 fc69 	bl	800c8da <STM_GetFaultState>
 8004008:	4603      	mov	r3, r0
 800400a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
	break;
 800400e:	f000 bc4f 	b.w	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_STATUS:
    {
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8004012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	4618      	mov	r0, r3
 800401a:	f008 fc39 	bl	800c890 <STM_GetState>
 800401e:	4603      	mov	r3, r0
 8004020:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
	break;
 8004024:	f000 bc44 	b.w	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_REF:
    {
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8004028:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800402c:	f7fc fe3d 	bl	8000caa <MCI_GetMecSpeedRefUnit>
 8004030:	4603      	mov	r3, r0
 8004032:	461a      	mov	r2, r3
 8004034:	4613      	mov	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4acc      	ldr	r2, [pc, #816]	; (8004370 <UI_GetReg+0x5e0>)
 800403e:	fb82 1203 	smull	r1, r2, r2, r3
 8004042:	1092      	asrs	r2, r2, #2
 8004044:	17db      	asrs	r3, r3, #31
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800404c:	f000 bc30 	b.w	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8004050:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f005 fb0d 	bl	8009676 <PID_GetKP>
 800405c:	4603      	mov	r3, r0
 800405e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004062:	f000 bc25 	b.w	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8004066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f005 fb0f 	bl	8009690 <PID_GetKI>
 8004072:	4603      	mov	r3, r0
 8004074:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004078:	f000 bc1a 	b.w	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800407c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f005 fb46 	bl	8009714 <PID_GetKD>
 8004088:	4603      	mov	r3, r0
 800408a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800408e:	f000 bc0f 	b.w	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_BUS_VOLTAGE:
    {
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8004092:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	4618      	mov	r0, r3
 800409a:	f005 f875 	bl	8009188 <VBS_GetAvBusVoltage_V>
 800409e:	4603      	mov	r3, r0
 80040a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80040a4:	f000 bc04 	b.w	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_HEATS_TEMP:
    {
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 80040a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	4618      	mov	r0, r3
 80040b0:	f005 fa73 	bl	800959a <NTC_GetAvTemp_C>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80040ba:	e3f9      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_MEAS:
    {
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 80040bc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80040c0:	f7fc fde1 	bl	8000c86 <MCI_GetAvrgMecSpeedUnit>
 80040c4:	4603      	mov	r3, r0
 80040c6:	461a      	mov	r2, r3
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4aa7      	ldr	r2, [pc, #668]	; (8004370 <UI_GetReg+0x5e0>)
 80040d2:	fb82 1203 	smull	r1, r2, r2, r3
 80040d6:	1092      	asrs	r2, r2, #2
 80040d8:	17db      	asrs	r3, r3, #31
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80040e0:	e3e6      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_UID:
    {
      bRetVal = (int32_t)(MC_UID);
 80040e2:	4ba4      	ldr	r3, [pc, #656]	; (8004374 <UI_GetReg+0x5e4>)
 80040e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80040e8:	e3e2      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_CTRBDID:
    {
      bRetVal = CTRBDID;
 80040ea:	f242 731d 	movw	r3, #10013	; 0x271d
 80040ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80040f2:	e3dd      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_PWBDID:
    {
      bRetVal = PWBDID;
 80040f4:	f242 731d 	movw	r3, #10013	; 0x271d
 80040f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80040fc:	e3d8      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_PWBDID2:
    {
      bRetVal = (uint32_t) 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004104:	e3d4      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004106:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800410a:	f7fc fe23 	bl	8000d54 <MCI_GetIqdref>
 800410e:	4603      	mov	r3, r0
 8004110:	62bb      	str	r3, [r7, #40]	; 0x28
      bRetVal = (int32_t)currComp.q;
 8004112:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8004116:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800411a:	e3c9      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 800411c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004120:	f7fc fe18 	bl	8000d54 <MCI_GetIqdref>
 8004124:	4603      	mov	r3, r0
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
      bRetVal = (int32_t)currComp.d;
 8004128:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800412c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004130:	e3be      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_CONTROL_MODE:
    {
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8004132:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004136:	f7fc fd41 	bl	8000bbc <MCI_GetControlMode>
 800413a:	4603      	mov	r3, r0
 800413c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004140:	e3b6      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8004142:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004146:	f7fc fd39 	bl	8000bbc <MCI_GetControlMode>
 800414a:	4603      	mov	r3, r0
 800414c:	2b01      	cmp	r3, #1
 800414e:	d112      	bne.n	8004176 <UI_GetReg+0x3e6>
      {
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8004150:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004154:	f7fc fd75 	bl	8000c42 <MCI_GetLastRampFinalSpeed>
 8004158:	4603      	mov	r3, r0
 800415a:	461a      	mov	r2, r3
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4a82      	ldr	r2, [pc, #520]	; (8004370 <UI_GetReg+0x5e0>)
 8004166:	fb82 1203 	smull	r1, r2, r2, r3
 800416a:	1092      	asrs	r2, r2, #2
 800416c:	17db      	asrs	r3, r3, #31
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      else
      {
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
      }
    }
    break;
 8004174:	e39c      	b.n	80048b0 <UI_GetReg+0xb20>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8004176:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800417a:	f7fc fd96 	bl	8000caa <MCI_GetMecSpeedRefUnit>
 800417e:	4603      	mov	r3, r0
 8004180:	461a      	mov	r2, r3
 8004182:	4613      	mov	r3, r2
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4a79      	ldr	r2, [pc, #484]	; (8004370 <UI_GetReg+0x5e0>)
 800418c:	fb82 1203 	smull	r1, r2, r2, r3
 8004190:	1092      	asrs	r2, r2, #2
 8004192:	17db      	asrs	r3, r3, #31
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    break;
 800419a:	e389      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KP_DIV:
    {
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 800419c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f005 fa8f 	bl	80096c6 <PID_GetKPDivisor>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80041ae:	e37f      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KI_DIV:
    {
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 80041b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f005 fa91 	bl	80096de <PID_GetKIDivisor>
 80041bc:	4603      	mov	r3, r0
 80041be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80041c2:	e375      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 80041c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f005 fa53 	bl	8009676 <PID_GetKP>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80041d6:	e36b      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 80041d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4618      	mov	r0, r3
 80041e0:	f005 fa56 	bl	8009690 <PID_GetKI>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80041ea:	e361      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80041ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f005 fa8e 	bl	8009714 <PID_GetKD>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80041fe:	e357      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_IQ_SPEEDMODE:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004200:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004204:	f7fc fda6 	bl	8000d54 <MCI_GetIqdref>
 8004208:	4603      	mov	r3, r0
 800420a:	623b      	str	r3, [r7, #32]
      bRetVal = (int32_t)currComp.d;
 800420c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004210:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004214:	e34c      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8004216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4618      	mov	r0, r3
 800421e:	f005 fa2a 	bl	8009676 <PID_GetKP>
 8004222:	4603      	mov	r3, r0
 8004224:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004228:	e342      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 800422a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4618      	mov	r0, r3
 8004232:	f005 fa2d 	bl	8009690 <PID_GetKI>
 8004236:	4603      	mov	r3, r0
 8004238:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800423c:	e338      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 800423e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4618      	mov	r0, r3
 8004246:	f005 fa65 	bl	8009714 <PID_GetKD>
 800424a:	4603      	mov	r3, r0
 800424c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004250:	e32e      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_OBSERVER_C1:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	7d1b      	ldrb	r3, [r3, #20]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	66fb      	str	r3, [r7, #108]	; 0x6c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004262:	2300      	movs	r3, #0
 8004264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426a:	0f1b      	lsrs	r3, r3, #28
 800426c:	2b09      	cmp	r3, #9
 800426e:	d104      	bne.n	800427a <UI_GetReg+0x4ea>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004270:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800427a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427c:	0e1b      	lsrs	r3, r3, #24
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	2b09      	cmp	r3, #9
 8004284:	d104      	bne.n	8004290 <UI_GetReg+0x500>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }
      if (pSPD != MC_NULL)
 8004290:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <UI_GetReg+0x51a>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8004298:	f107 021c 	add.w	r2, r7, #28
 800429c:	f107 031e 	add.w	r3, r7, #30
 80042a0:	4619      	mov	r1, r3
 80042a2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80042a6:	f009 fb17 	bl	800d8d8 <STO_PLL_GetObserverGains>
      }
      bRetVal = (int32_t)hC1;
 80042aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80042ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80042b2:	e2fd      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_OBSERVER_C2:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	7d1b      	ldrb	r3, [r3, #20]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	673b      	str	r3, [r7, #112]	; 0x70
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80042ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042cc:	0f1b      	lsrs	r3, r3, #28
 80042ce:	2b09      	cmp	r3, #9
 80042d0:	d104      	bne.n	80042dc <UI_GetReg+0x54c>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80042d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80042dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042de:	0e1b      	lsrs	r3, r3, #24
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	2b09      	cmp	r3, #9
 80042e6:	d104      	bne.n	80042f2 <UI_GetReg+0x562>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80042e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      }
      if (pSPD != MC_NULL)
 80042f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <UI_GetReg+0x57c>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80042fa:	f107 0218 	add.w	r2, r7, #24
 80042fe:	f107 031a 	add.w	r3, r7, #26
 8004302:	4619      	mov	r1, r3
 8004304:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8004308:	f009 fae6 	bl	800d8d8 <STO_PLL_GetObserverGains>
      }
      bRetVal = (int32_t)hC2;
 800430c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004310:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004314:	e2cc      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_OBS_EL_ANGLE:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	7d1b      	ldrb	r3, [r3, #20]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	67fb      	str	r3, [r7, #124]	; 0x7c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800432c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800432e:	0f1b      	lsrs	r3, r3, #28
 8004330:	2b09      	cmp	r3, #9
 8004332:	d104      	bne.n	800433e <UI_GetReg+0x5ae>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004334:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800433e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004340:	0e1b      	lsrs	r3, r3, #24
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	2b09      	cmp	r3, #9
 8004348:	d104      	bne.n	8004354 <UI_GetReg+0x5c4>
      {
        pSPD = pMCT->pSpeedSensorAux;
 800434a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      }
      if (pSPD != MC_NULL)
 8004354:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8298 	beq.w	800488e <UI_GetReg+0xafe>
      {
        bRetVal = SPD_GetElAngle(pSPD);
 800435e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8004362:	f007 fe3c 	bl	800bfde <SPD_GetElAngle>
 8004366:	4603      	mov	r3, r0
 8004368:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 800436c:	e28f      	b.n	800488e <UI_GetReg+0xafe>
 800436e:	bf00      	nop
 8004370:	66666667 	.word	0x66666667
 8004374:	34a6847a 	.word	0x34a6847a

    case MC_PROTOCOL_REG_PLL_KP:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	7d1b      	ldrb	r3, [r3, #20]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	67bb      	str	r3, [r7, #120]	; 0x78
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004388:	2300      	movs	r3, #0
 800438a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800438e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004390:	0f1b      	lsrs	r3, r3, #28
 8004392:	2b09      	cmp	r3, #9
 8004394:	d104      	bne.n	80043a0 <UI_GetReg+0x610>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80043a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043a2:	0e1b      	lsrs	r3, r3, #24
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	2b09      	cmp	r3, #9
 80043aa:	d104      	bne.n	80043b6 <UI_GetReg+0x626>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80043ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      }
      if (pSPD != MC_NULL)
 80043b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d008      	beq.n	80043d0 <UI_GetReg+0x640>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80043be:	f107 0214 	add.w	r2, r7, #20
 80043c2:	f107 0316 	add.w	r3, r7, #22
 80043c6:	4619      	mov	r1, r3
 80043c8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80043cc:	f009 fa90 	bl	800d8f0 <STO_GetPLLGains>
      }
      bRetVal = (int32_t)hPgain;
 80043d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80043d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80043d8:	e26a      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_PLL_KI:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	7d1b      	ldrb	r3, [r3, #20]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	677b      	str	r3, [r7, #116]	; 0x74
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80043f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043f2:	0f1b      	lsrs	r3, r3, #28
 80043f4:	2b09      	cmp	r3, #9
 80043f6:	d104      	bne.n	8004402 <UI_GetReg+0x672>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80043f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004404:	0e1b      	lsrs	r3, r3, #24
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	2b09      	cmp	r3, #9
 800440c:	d104      	bne.n	8004418 <UI_GetReg+0x688>
      {
        pSPD = pMCT->pSpeedSensorAux;
 800440e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
      if (pSPD != MC_NULL)
 8004418:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <UI_GetReg+0x6a2>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8004420:	f107 0210 	add.w	r2, r7, #16
 8004424:	f107 0312 	add.w	r3, r7, #18
 8004428:	4619      	mov	r1, r3
 800442a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800442e:	f009 fa5f 	bl	800d8f0 <STO_GetPLLGains>
      }
      bRetVal = (int32_t)hIgain;
 8004432:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004436:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800443a:	e239      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_OBS_ROT_SPEED:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	7d1b      	ldrb	r3, [r3, #20]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004454:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004458:	0f1b      	lsrs	r3, r3, #28
 800445a:	2b09      	cmp	r3, #9
 800445c:	d104      	bne.n	8004468 <UI_GetReg+0x6d8>
      {
        pSPD = pMCT->pSpeedSensorMain;
 800445e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004468:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800446c:	0e1b      	lsrs	r3, r3, #24
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	2b09      	cmp	r3, #9
 8004474:	d104      	bne.n	8004480 <UI_GetReg+0x6f0>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      }
      if (pSPD != MC_NULL)
 8004480:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8204 	beq.w	8004892 <UI_GetReg+0xb02>
      {
        bRetVal = SPD_GetS16Speed(pSPD);
 800448a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800448e:	f007 fe38 	bl	800c102 <SPD_GetS16Speed>
 8004492:	4603      	mov	r3, r0
 8004494:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 8004498:	e1fb      	b.n	8004892 <UI_GetReg+0xb02>

    case MC_PROTOCOL_REG_OBS_I_ALPHA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	7d1b      	ldrb	r3, [r3, #20]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80044b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044b6:	0f1b      	lsrs	r3, r3, #28
 80044b8:	2b09      	cmp	r3, #9
 80044ba:	d104      	bne.n	80044c6 <UI_GetReg+0x736>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80044bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80044c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044ca:	0e1b      	lsrs	r3, r3, #24
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	2b09      	cmp	r3, #9
 80044d2:	d104      	bne.n	80044de <UI_GetReg+0x74e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80044d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      }
      if (pSPD != MC_NULL)
 80044de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 81d7 	beq.w	8004896 <UI_GetReg+0xb06>
      {
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 80044e8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80044ec:	f009 f9e0 	bl	800d8b0 <STO_PLL_GetEstimatedCurrent>
 80044f0:	4603      	mov	r3, r0
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80044f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 80044fc:	e1cb      	b.n	8004896 <UI_GetReg+0xb06>

    case MC_PROTOCOL_REG_OBS_I_BETA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	7d1b      	ldrb	r3, [r3, #20]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004510:	2300      	movs	r3, #0
 8004512:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004516:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800451a:	0f1b      	lsrs	r3, r3, #28
 800451c:	2b09      	cmp	r3, #9
 800451e:	d104      	bne.n	800452a <UI_GetReg+0x79a>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004520:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800452a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800452e:	0e1b      	lsrs	r3, r3, #24
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	2b09      	cmp	r3, #9
 8004536:	d104      	bne.n	8004542 <UI_GetReg+0x7b2>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004538:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      if (pSPD != MC_NULL)
 8004542:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 81a7 	beq.w	800489a <UI_GetReg+0xb0a>
      {
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 800454c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8004550:	f009 f9ae 	bl	800d8b0 <STO_PLL_GetEstimatedCurrent>
 8004554:	4603      	mov	r3, r0
 8004556:	633b      	str	r3, [r7, #48]	; 0x30
 8004558:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800455c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 8004560:	e19b      	b.n	800489a <UI_GetReg+0xb0a>

    case MC_PROTOCOL_REG_OBS_BEMF_ALPHA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	7d1b      	ldrb	r3, [r3, #20]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004574:	2300      	movs	r3, #0
 8004576:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800457a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800457e:	0f1b      	lsrs	r3, r3, #28
 8004580:	2b09      	cmp	r3, #9
 8004582:	d104      	bne.n	800458e <UI_GetReg+0x7fe>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004584:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800458e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004592:	0e1b      	lsrs	r3, r3, #24
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	2b09      	cmp	r3, #9
 800459a:	d104      	bne.n	80045a6 <UI_GetReg+0x816>
      {
        pSPD =  pMCT->pSpeedSensorAux;
 800459c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      }
      if (pSPD != MC_NULL)
 80045a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 8177 	beq.w	800489e <UI_GetReg+0xb0e>
      {
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 80045b0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80045b4:	f009 f970 	bl	800d898 <STO_PLL_GetEstimatedBemf>
 80045b8:	4603      	mov	r3, r0
 80045ba:	637b      	str	r3, [r7, #52]	; 0x34
 80045bc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80045c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 80045c4:	e16b      	b.n	800489e <UI_GetReg+0xb0e>

    case MC_PROTOCOL_REG_OBS_BEMF_BETA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	7d1b      	ldrb	r3, [r3, #20]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80045de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045e2:	0f1b      	lsrs	r3, r3, #28
 80045e4:	2b09      	cmp	r3, #9
 80045e6:	d104      	bne.n	80045f2 <UI_GetReg+0x862>
      {
       pSPD = pMCT->pSpeedSensorMain;
 80045e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80045f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045f6:	0e1b      	lsrs	r3, r3, #24
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	2b09      	cmp	r3, #9
 80045fe:	d104      	bne.n	800460a <UI_GetReg+0x87a>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004600:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      }
      if (pSPD != MC_NULL)
 800460a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8147 	beq.w	80048a2 <UI_GetReg+0xb12>
      {
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 8004614:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004618:	f009 f93e 	bl	800d898 <STO_PLL_GetEstimatedBemf>
 800461c:	4603      	mov	r3, r0
 800461e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004620:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8004624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 8004628:	e13b      	b.n	80048a2 <UI_GetReg+0xb12>

    case MC_PROTOCOL_REG_EST_BEMF_LEVEL:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	7d1b      	ldrb	r3, [r3, #20]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800463c:	2300      	movs	r3, #0
 800463e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004642:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004646:	0f1b      	lsrs	r3, r3, #28
 8004648:	2b09      	cmp	r3, #9
 800464a:	d104      	bne.n	8004656 <UI_GetReg+0x8c6>
      {
        pSPD = pMCT->pSpeedSensorMain;
 800464c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004656:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800465a:	0e1b      	lsrs	r3, r3, #24
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	2b09      	cmp	r3, #9
 8004662:	d104      	bne.n	800466e <UI_GetReg+0x8de>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004664:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      }
      if (pSPD != MC_NULL)
 800466e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 8117 	beq.w	80048a6 <UI_GetReg+0xb16>
      {
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8004678:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800467c:	f009 f95e 	bl	800d93c <STO_PLL_GetEstimatedBemfLevel>
 8004680:	4603      	mov	r3, r0
 8004682:	141b      	asrs	r3, r3, #16
 8004684:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 8004688:	e10d      	b.n	80048a6 <UI_GetReg+0xb16>

    case MC_PROTOCOL_REG_OBS_BEMF_LEVEL:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	7d1b      	ldrb	r3, [r3, #20]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800469c:	2300      	movs	r3, #0
 800469e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80046a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046a6:	0f1b      	lsrs	r3, r3, #28
 80046a8:	2b09      	cmp	r3, #9
 80046aa:	d104      	bne.n	80046b6 <UI_GetReg+0x926>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80046ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80046b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046ba:	0e1b      	lsrs	r3, r3, #24
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	2b09      	cmp	r3, #9
 80046c2:	d104      	bne.n	80046ce <UI_GetReg+0x93e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80046c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      }
      if (pSPD != MC_NULL)
 80046ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80e9 	beq.w	80048aa <UI_GetReg+0xb1a>
      {
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 80046d8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80046dc:	f009 f932 	bl	800d944 <STO_PLL_GetObservedBemfLevel>
 80046e0:	4603      	mov	r3, r0
 80046e2:	141b      	asrs	r3, r3, #16
 80046e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 80046e8:	e0df      	b.n	80048aa <UI_GetReg+0xb1a>

    case MC_PROTOCOL_REG_MOTOR_POWER:
    {
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 80046ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f0:	4618      	mov	r0, r3
 80046f2:	f004 feb7 	bl	8009464 <MPM_GetAvrgElMotorPowerW>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80046fc:	e0d8      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_MAX_APP_SPEED:
    {
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 80046fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	4618      	mov	r0, r3
 8004706:	f007 feca 	bl	800c49e <STC_GetMaxAppPositiveMecSpeedUnit>
 800470a:	4603      	mov	r3, r0
 800470c:	461a      	mov	r2, r3
 800470e:	4613      	mov	r3, r2
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4a69      	ldr	r2, [pc, #420]	; (80048bc <UI_GetReg+0xb2c>)
 8004718:	fb82 1203 	smull	r1, r2, r2, r3
 800471c:	1092      	asrs	r2, r2, #2
 800471e:	17db      	asrs	r3, r3, #31
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004726:	e0c3      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_MIN_APP_SPEED:
    {
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8004728:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	4618      	mov	r0, r3
 8004730:	f007 fec1 	bl	800c4b6 <STC_GetMinAppNegativeMecSpeedUnit>
 8004734:	4603      	mov	r3, r0
 8004736:	461a      	mov	r2, r3
 8004738:	4613      	mov	r3, r2
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4a5e      	ldr	r2, [pc, #376]	; (80048bc <UI_GetReg+0xb2c>)
 8004742:	fb82 1203 	smull	r1, r2, r2, r3
 8004746:	1092      	asrs	r2, r2, #2
 8004748:	17db      	asrs	r3, r3, #31
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004750:	e0ae      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_MEAS:
    case MC_PROTOCOL_REG_I_Q:
    {
      bRetVal = MCI_GetIqd(pMCI).q;
 8004752:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004756:	f7fc fae5 	bl	8000d24 <MCI_GetIqd>
 800475a:	4603      	mov	r3, r0
 800475c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800475e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8004762:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004766:	e0a3      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_MEAS:
    case MC_PROTOCOL_REG_I_D:
    {
      bRetVal = MCI_GetIqd(pMCI).d;
 8004768:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800476c:	f7fc fada 	bl	8000d24 <MCI_GetIqd>
 8004770:	4603      	mov	r3, r0
 8004772:	643b      	str	r3, [r7, #64]	; 0x40
 8004774:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8004778:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800477c:	e098      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_RUC_STAGE_NBR:
    {
      if (pMCT->pRevupCtrl)
 800477e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d009      	beq.n	800479c <UI_GetReg+0xa0c>
      {
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8004788:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	4618      	mov	r0, r3
 8004790:	f008 fe04 	bl	800d39c <RUC_GetNumberOfPhases>
 8004794:	4603      	mov	r3, r0
 8004796:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      else
      {
        bRetVal = (uint32_t) 0;
      }
    }
    break;
 800479a:	e089      	b.n	80048b0 <UI_GetReg+0xb20>
        bRetVal = (uint32_t) 0;
 800479c:	2300      	movs	r3, #0
 800479e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    break;
 80047a2:	e085      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_A:
    {
      bRetVal = MCI_GetIab(pMCI).a;
 80047a4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80047a8:	f7fc fa8d 	bl	8000cc6 <MCI_GetIab>
 80047ac:	4603      	mov	r3, r0
 80047ae:	647b      	str	r3, [r7, #68]	; 0x44
 80047b0:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80047b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80047b8:	e07a      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_B:
    {
      bRetVal = MCI_GetIab(pMCI).b;
 80047ba:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80047be:	f7fc fa82 	bl	8000cc6 <MCI_GetIab>
 80047c2:	4603      	mov	r3, r0
 80047c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80047c6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80047ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80047ce:	e06f      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_ALPHA:
    {
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 80047d0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80047d4:	f7fc fa8e 	bl	8000cf4 <MCI_GetIalphabeta>
 80047d8:	4603      	mov	r3, r0
 80047da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047dc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80047e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80047e4:	e064      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_BETA:
    {
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 80047e6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80047ea:	f7fc fa83 	bl	8000cf4 <MCI_GetIalphabeta>
 80047ee:	4603      	mov	r3, r0
 80047f0:	653b      	str	r3, [r7, #80]	; 0x50
 80047f2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80047f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80047fa:	e059      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_Q_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).q;
 80047fc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004800:	f7fc faa8 	bl	8000d54 <MCI_GetIqdref>
 8004804:	4603      	mov	r3, r0
 8004806:	657b      	str	r3, [r7, #84]	; 0x54
 8004808:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800480c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004810:	e04e      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_D_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).d;
 8004812:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004816:	f7fc fa9d 	bl	8000d54 <MCI_GetIqdref>
 800481a:	4603      	mov	r3, r0
 800481c:	65bb      	str	r3, [r7, #88]	; 0x58
 800481e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8004822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004826:	e043      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_V_Q:
    {
      bRetVal = MCI_GetVqd(pMCI).q;
 8004828:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800482c:	f7fc faaa 	bl	8000d84 <MCI_GetVqd>
 8004830:	4603      	mov	r3, r0
 8004832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004834:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8004838:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800483c:	e038      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_V_D:
    {
      bRetVal = MCI_GetVqd(pMCI).d;
 800483e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004842:	f7fc fa9f 	bl	8000d84 <MCI_GetVqd>
 8004846:	4603      	mov	r3, r0
 8004848:	663b      	str	r3, [r7, #96]	; 0x60
 800484a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800484e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004852:	e02d      	b.n	80048b0 <UI_GetReg+0xb20>

   case MC_PROTOCOL_REG_V_ALPHA:
    {
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8004854:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004858:	f7fc faac 	bl	8000db4 <MCI_GetValphabeta>
 800485c:	4603      	mov	r3, r0
 800485e:	667b      	str	r3, [r7, #100]	; 0x64
 8004860:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8004864:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004868:	e022      	b.n	80048b0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_V_BETA:
    {
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 800486a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800486e:	f7fc faa1 	bl	8000db4 <MCI_GetValphabeta>
 8004872:	4603      	mov	r3, r0
 8004874:	66bb      	str	r3, [r7, #104]	; 0x68
 8004876:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800487a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800487e:	e017      	b.n	80048b0 <UI_GetReg+0xb20>

    default:
	{
      if ( success != (bool *) 0 ) 
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d013      	beq.n	80048ae <UI_GetReg+0xb1e>
      {
        *success = false;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]
      }
	}
    break;
 800488c:	e00f      	b.n	80048ae <UI_GetReg+0xb1e>
    break;
 800488e:	bf00      	nop
 8004890:	e00e      	b.n	80048b0 <UI_GetReg+0xb20>
    break;
 8004892:	bf00      	nop
 8004894:	e00c      	b.n	80048b0 <UI_GetReg+0xb20>
    break;
 8004896:	bf00      	nop
 8004898:	e00a      	b.n	80048b0 <UI_GetReg+0xb20>
    break;
 800489a:	bf00      	nop
 800489c:	e008      	b.n	80048b0 <UI_GetReg+0xb20>
    break;
 800489e:	bf00      	nop
 80048a0:	e006      	b.n	80048b0 <UI_GetReg+0xb20>
    break;
 80048a2:	bf00      	nop
 80048a4:	e004      	b.n	80048b0 <UI_GetReg+0xb20>
    break;
 80048a6:	bf00      	nop
 80048a8:	e002      	b.n	80048b0 <UI_GetReg+0xb20>
    break;
 80048aa:	bf00      	nop
 80048ac:	e000      	b.n	80048b0 <UI_GetReg+0xb20>
    break;
 80048ae:	bf00      	nop
  }
  return bRetVal;
 80048b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	37d8      	adds	r7, #216	; 0xd8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	66666667 	.word	0x66666667

080048c0 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	70fb      	strb	r3, [r7, #3]
  bool retVal = true;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	7d1b      	ldrb	r3, [r3, #20]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60bb      	str	r3, [r7, #8]

  switch (bCmdID)
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	2b0d      	cmp	r3, #13
 80048e6:	d84b      	bhi.n	8004980 <UI_ExecCmd+0xc0>
 80048e8:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <UI_ExecCmd+0x30>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004929 	.word	0x08004929
 80048f4:	08004931 	.word	0x08004931
 80048f8:	08004939 	.word	0x08004939
 80048fc:	08004987 	.word	0x08004987
 8004900:	08004987 	.word	0x08004987
 8004904:	0800494d 	.word	0x0800494d
 8004908:	08004969 	.word	0x08004969
 800490c:	08004971 	.word	0x08004971
 8004910:	08004979 	.word	0x08004979
 8004914:	08004981 	.word	0x08004981
 8004918:	08004981 	.word	0x08004981
 800491c:	08004981 	.word	0x08004981
 8004920:	08004981 	.word	0x08004981
 8004924:	08004931 	.word	0x08004931
  {
  case MC_PROTOCOL_CMD_START_MOTOR:
    {
      /* Call MCI Start motor; */
      MCI_StartMotor(pMCI);
 8004928:	68b8      	ldr	r0, [r7, #8]
 800492a:	f7fc f893 	bl	8000a54 <MCI_StartMotor>
    }
    break;
 800492e:	e02d      	b.n	800498c <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_STOP_MOTOR:
  case MC_PROTOCOL_CMD_SC_STOP:
    {
      /* Call MCI Stop motor; */
      MCI_StopMotor(pMCI);
 8004930:	68b8      	ldr	r0, [r7, #8]
 8004932:	f7fc f8a6 	bl	8000a82 <MCI_StopMotor>
    }
    break;
 8004936:	e029      	b.n	800498c <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      if (MCI_GetSTMState(pMCI) == RUN)
 8004938:	68b8      	ldr	r0, [r7, #8]
 800493a:	f7fc f931 	bl	8000ba0 <MCI_GetSTMState>
 800493e:	4603      	mov	r3, r0
 8004940:	2b06      	cmp	r3, #6
 8004942:	d122      	bne.n	800498a <UI_ExecCmd+0xca>
      {
        MCI_StopRamp(pMCI);
 8004944:	68b8      	ldr	r0, [r7, #8]
 8004946:	f7fc f991 	bl	8000c6c <MCI_StopRamp>
      }
    }
    break;
 800494a:	e01e      	b.n	800498a <UI_ExecCmd+0xca>
    break;

  case MC_PROTOCOL_CMD_START_STOP:
    {
      /* Queries the STM and a command start or stop depending on the state. */
      if (MCI_GetSTMState(pMCI) == IDLE)
 800494c:	68b8      	ldr	r0, [r7, #8]
 800494e:	f7fc f927 	bl	8000ba0 <MCI_GetSTMState>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d103      	bne.n	8004960 <UI_ExecCmd+0xa0>
      {
        MCI_StartMotor(pMCI);
 8004958:	68b8      	ldr	r0, [r7, #8]
 800495a:	f7fc f87b 	bl	8000a54 <MCI_StartMotor>
      else
      {
        MCI_StopMotor(pMCI);
      }
    }
    break;
 800495e:	e015      	b.n	800498c <UI_ExecCmd+0xcc>
        MCI_StopMotor(pMCI);
 8004960:	68b8      	ldr	r0, [r7, #8]
 8004962:	f7fc f88e 	bl	8000a82 <MCI_StopMotor>
    break;
 8004966:	e011      	b.n	800498c <UI_ExecCmd+0xcc>
    }
    break;

  case MC_PROTOCOL_CMD_FAULT_ACK:
    {
      MCI_FaultAcknowledged(pMCI);
 8004968:	68b8      	ldr	r0, [r7, #8]
 800496a:	f7fc f899 	bl	8000aa0 <MCI_FaultAcknowledged>
    }
    break;
 800496e:	e00d      	b.n	800498c <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_ENCODER_ALIGN:
    {
      MCI_EncoderAlign(pMCI);
 8004970:	68b8      	ldr	r0, [r7, #8]
 8004972:	f7fc f8a3 	bl	8000abc <MCI_EncoderAlign>
    }
    break;
 8004976:	e009      	b.n	800498c <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_IQDREF_CLEAR:
    {
      MCI_Clear_Iqdref(pMCI);
 8004978:	68b8      	ldr	r0, [r7, #8]
 800497a:	f7fc fa55 	bl	8000e28 <MCI_Clear_Iqdref>
    }
    break;
 800497e:	e005      	b.n	800498c <UI_ExecCmd+0xcc>

  default:
    {
    retVal = false;
 8004980:	2300      	movs	r3, #0
 8004982:	73fb      	strb	r3, [r7, #15]
	}
    break;
 8004984:	e002      	b.n	800498c <UI_ExecCmd+0xcc>
    break;
 8004986:	bf00      	nop
 8004988:	e000      	b.n	800498c <UI_ExecCmd+0xcc>
    break;
 800498a:	bf00      	nop
  }
  return retVal;
 800498c:	7bfb      	ldrb	r3, [r7, #15]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop

08004998 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds. 
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	7d1b      	ldrb	r3, [r3, #20]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	617b      	str	r3, [r7, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <UI_ExecSpeedRamp+0x4c>)
 80049c2:	fb82 1203 	smull	r1, r2, r2, r3
 80049c6:	441a      	add	r2, r3
 80049c8:	1152      	asrs	r2, r2, #5
 80049ca:	17db      	asrs	r3, r3, #31
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	b21b      	sxth	r3, r3
 80049d0:	88fa      	ldrh	r2, [r7, #6]
 80049d2:	4619      	mov	r1, r3
 80049d4:	6978      	ldr	r0, [r7, #20]
 80049d6:	f7fb ffe7 	bl	80009a8 <MCI_ExecSpeedRamp>
  return true;
 80049da:	2301      	movs	r3, #1
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	88888889 	.word	0x88888889

080049e8 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	807b      	strh	r3, [r7, #2]
 80049f4:	4613      	mov	r3, r2
 80049f6:	803b      	strh	r3, [r7, #0]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	7d1b      	ldrb	r3, [r3, #20]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8004a08:	883a      	ldrh	r2, [r7, #0]
 8004a0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7fb ffe6 	bl	80009e2 <MCI_ExecTorqueRamp>
  return true;
 8004a16:	2301      	movs	r3, #1
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <UI_GetRevupData>:
  *         
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	72fb      	strb	r3, [r7, #11]
  bool hRetVal = true;
 8004a30:	2301      	movs	r3, #1
 8004a32:	75fb      	strb	r3, [r7, #23]

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	7d1b      	ldrb	r3, [r3, #20]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	613b      	str	r3, [r7, #16]
  if (pRevupCtrl)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01b      	beq.n	8004a84 <UI_GetRevupData+0x64>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8004a4c:	7afb      	ldrb	r3, [r7, #11]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	6938      	ldr	r0, [r7, #16]
 8004a52:	f008 fc8d 	bl	800d370 <RUC_GetPhaseDurationms>
 8004a56:	4603      	mov	r3, r0
 8004a58:	461a      	mov	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	801a      	strh	r2, [r3, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8004a5e:	7afb      	ldrb	r3, [r7, #11]
 8004a60:	4619      	mov	r1, r3
 8004a62:	6938      	ldr	r0, [r7, #16]
 8004a64:	f008 fc8a 	bl	800d37c <RUC_GetPhaseFinalMecSpeedUnit>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	801a      	strh	r2, [r3, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8004a70:	7afb      	ldrb	r3, [r7, #11]
 8004a72:	4619      	mov	r1, r3
 8004a74:	6938      	ldr	r0, [r7, #16]
 8004a76:	f008 fc89 	bl	800d38c <RUC_GetPhaseFinalTorque>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	801a      	strh	r2, [r3, #0]
 8004a82:	e001      	b.n	8004a88 <UI_GetRevupData+0x68>
  }
  else
  {
    hRetVal = false;
 8004a84:	2300      	movs	r3, #0
 8004a86:	75fb      	strb	r3, [r7, #23]
  }
  return hRetVal;
 8004a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	4608      	mov	r0, r1
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	72fb      	strb	r3, [r7, #11]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	813b      	strh	r3, [r7, #8]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	80fb      	strh	r3, [r7, #6]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	7d1b      	ldrb	r3, [r3, #20]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	617b      	str	r3, [r7, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8004abe:	893a      	ldrh	r2, [r7, #8]
 8004ac0:	7afb      	ldrb	r3, [r7, #11]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6978      	ldr	r0, [r7, #20]
 8004ac6:	f008 fc41 	bl	800d34c <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8004aca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ace:	7afb      	ldrb	r3, [r7, #11]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6978      	ldr	r0, [r7, #20]
 8004ad4:	f008 fc40 	bl	800d358 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8004ad8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004adc:	7afb      	ldrb	r3, [r7, #11]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6978      	ldr	r0, [r7, #20]
 8004ae2:	f008 fc3f 	bl	800d364 <RUC_SetPhaseFinalTorque>
  return true;
 8004ae6:	2301      	movs	r3, #1
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame. 
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	807b      	strh	r3, [r7, #2]
 8004afc:	4613      	mov	r3, r2
 8004afe:	803b      	strh	r3, [r7, #0]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	7d1b      	ldrb	r3, [r3, #20]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]
  qd_t currComp;
  currComp.q = hIqRef;
 8004b10:	887b      	ldrh	r3, [r7, #2]
 8004b12:	813b      	strh	r3, [r7, #8]
  currComp.d = hIdRef;
 8004b14:	883b      	ldrh	r3, [r7, #0]
 8004b16:	817b      	strh	r3, [r7, #10]
  MCI_SetCurrentReferences(pMCI,currComp);
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7fb ff7e 	bl	8000a1c <MCI_SetCurrentReferences>
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <UI_GetMPInfo>:
  * @param  pMPInfo: The returned list of register.
  *         It is populated by this function.
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
    return false;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b44:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <SystemInit+0x28>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	4a07      	ldr	r2, [pc, #28]	; (8004b68 <SystemInit+0x28>)
 8004b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b54:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <SystemInit+0x28>)
 8004b56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b5a:	609a      	str	r2, [r3, #8]
#endif
}
 8004b5c:	bf00      	nop
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	e000ed00 	.word	0xe000ed00

08004b6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <HAL_Init+0x28>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a07      	ldr	r2, [pc, #28]	; (8004b94 <HAL_Init+0x28>)
 8004b76:	f043 0310 	orr.w	r3, r3, #16
 8004b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b7c:	2003      	movs	r0, #3
 8004b7e:	f001 fb51 	bl	8006224 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b82:	2004      	movs	r0, #4
 8004b84:	f000 f808 	bl	8004b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b88:	f7fe fc0e 	bl	80033a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40022000 	.word	0x40022000

08004b98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <HAL_InitTick+0x54>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <HAL_InitTick+0x58>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f001 fb69 	bl	800628e <HAL_SYSTICK_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e00e      	b.n	8004be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b0f      	cmp	r3, #15
 8004bca:	d80a      	bhi.n	8004be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bcc:	2200      	movs	r2, #0
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd4:	f001 fb31 	bl	800623a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bd8:	4a06      	ldr	r2, [pc, #24]	; (8004bf4 <HAL_InitTick+0x5c>)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	e000      	b.n	8004be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20000690 	.word	0x20000690
 8004bf0:	20000698 	.word	0x20000698
 8004bf4:	20000694 	.word	0x20000694

08004bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <HAL_IncTick+0x20>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <HAL_IncTick+0x24>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4413      	add	r3, r2
 8004c08:	4a04      	ldr	r2, [pc, #16]	; (8004c1c <HAL_IncTick+0x24>)
 8004c0a:	6013      	str	r3, [r2, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000698 	.word	0x20000698
 8004c1c:	20000aac 	.word	0x20000aac

08004c20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  return uwTick;  
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <HAL_GetTick+0x14>)
 8004c26:	681b      	ldr	r3, [r3, #0]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000aac 	.word	0x20000aac

08004c38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b09a      	sub	sp, #104	; 0x68
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e1c9      	b.n	8004fec <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d176      	bne.n	8004d58 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d152      	bne.n	8004d18 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7fe fbaf 	bl	80033f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d13b      	bne.n	8004d18 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 f90f 	bl	8005ec4 <ADC_Disable>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	f003 0310 	and.w	r3, r3, #16
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d12f      	bne.n	8004d18 <HAL_ADC_Init+0xe0>
 8004cb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d12b      	bne.n	8004d18 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004cc8:	f023 0302 	bic.w	r3, r3, #2
 8004ccc:	f043 0202 	orr.w	r2, r3, #2
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ce2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cf2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004cf4:	4b86      	ldr	r3, [pc, #536]	; (8004f10 <HAL_ADC_Init+0x2d8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a86      	ldr	r2, [pc, #536]	; (8004f14 <HAL_ADC_Init+0x2dc>)
 8004cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfe:	0c9a      	lsrs	r2, r3, #18
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d0a:	e002      	b.n	8004d12 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1f9      	bne.n	8004d0c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d34:	d110      	bne.n	8004d58 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f023 0312 	bic.w	r3, r3, #18
 8004d3e:	f043 0210 	orr.w	r2, r3, #16
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4a:	f043 0201 	orr.w	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f040 8136 	bne.w	8004fd2 <HAL_ADC_Init+0x39a>
 8004d66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f040 8131 	bne.w	8004fd2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f040 8129 	bne.w	8004fd2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004d88:	f043 0202 	orr.w	r2, r3, #2
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d98:	d004      	beq.n	8004da4 <HAL_ADC_Init+0x16c>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a5e      	ldr	r2, [pc, #376]	; (8004f18 <HAL_ADC_Init+0x2e0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d101      	bne.n	8004da8 <HAL_ADC_Init+0x170>
 8004da4:	4b5d      	ldr	r3, [pc, #372]	; (8004f1c <HAL_ADC_Init+0x2e4>)
 8004da6:	e000      	b.n	8004daa <HAL_ADC_Init+0x172>
 8004da8:	4b5d      	ldr	r3, [pc, #372]	; (8004f20 <HAL_ADC_Init+0x2e8>)
 8004daa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004db4:	d102      	bne.n	8004dbc <HAL_ADC_Init+0x184>
 8004db6:	4b58      	ldr	r3, [pc, #352]	; (8004f18 <HAL_ADC_Init+0x2e0>)
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	e01a      	b.n	8004df2 <HAL_ADC_Init+0x1ba>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a55      	ldr	r2, [pc, #340]	; (8004f18 <HAL_ADC_Init+0x2e0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d103      	bne.n	8004dce <HAL_ADC_Init+0x196>
 8004dc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	e011      	b.n	8004df2 <HAL_ADC_Init+0x1ba>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a54      	ldr	r2, [pc, #336]	; (8004f24 <HAL_ADC_Init+0x2ec>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d102      	bne.n	8004dde <HAL_ADC_Init+0x1a6>
 8004dd8:	4b53      	ldr	r3, [pc, #332]	; (8004f28 <HAL_ADC_Init+0x2f0>)
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e009      	b.n	8004df2 <HAL_ADC_Init+0x1ba>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a51      	ldr	r2, [pc, #324]	; (8004f28 <HAL_ADC_Init+0x2f0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d102      	bne.n	8004dee <HAL_ADC_Init+0x1b6>
 8004de8:	4b4e      	ldr	r3, [pc, #312]	; (8004f24 <HAL_ADC_Init+0x2ec>)
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	e001      	b.n	8004df2 <HAL_ADC_Init+0x1ba>
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 0303 	and.w	r3, r3, #3
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d108      	bne.n	8004e12 <HAL_ADC_Init+0x1da>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_ADC_Init+0x1da>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_ADC_Init+0x1dc>
 8004e12:	2300      	movs	r3, #0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d11c      	bne.n	8004e52 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004e18:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d010      	beq.n	8004e40 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d107      	bne.n	8004e3a <HAL_ADC_Init+0x202>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_ADC_Init+0x202>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <HAL_ADC_Init+0x204>
 8004e3a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d108      	bne.n	8004e52 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e50:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	7e5b      	ldrb	r3, [r3, #25]
 8004e56:	035b      	lsls	r3, r3, #13
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e5c:	2a01      	cmp	r2, #1
 8004e5e:	d002      	beq.n	8004e66 <HAL_ADC_Init+0x22e>
 8004e60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e64:	e000      	b.n	8004e68 <HAL_ADC_Init+0x230>
 8004e66:	2200      	movs	r2, #0
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d11b      	bne.n	8004ebe <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	7e5b      	ldrb	r3, [r3, #25]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d109      	bne.n	8004ea2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	3b01      	subs	r3, #1
 8004e94:	045a      	lsls	r2, r3, #17
 8004e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e9e:	663b      	str	r3, [r7, #96]	; 0x60
 8004ea0:	e00d      	b.n	8004ebe <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004eaa:	f043 0220 	orr.w	r2, r3, #32
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	f043 0201 	orr.w	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d03a      	beq.n	8004f3c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a16      	ldr	r2, [pc, #88]	; (8004f24 <HAL_ADC_Init+0x2ec>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d004      	beq.n	8004eda <HAL_ADC_Init+0x2a2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a14      	ldr	r2, [pc, #80]	; (8004f28 <HAL_ADC_Init+0x2f0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d128      	bne.n	8004f2c <HAL_ADC_Init+0x2f4>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ede:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004ee2:	d012      	beq.n	8004f0a <HAL_ADC_Init+0x2d2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eec:	d00a      	beq.n	8004f04 <HAL_ADC_Init+0x2cc>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004ef6:	d002      	beq.n	8004efe <HAL_ADC_Init+0x2c6>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	e018      	b.n	8004f30 <HAL_ADC_Init+0x2f8>
 8004efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f02:	e015      	b.n	8004f30 <HAL_ADC_Init+0x2f8>
 8004f04:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004f08:	e012      	b.n	8004f30 <HAL_ADC_Init+0x2f8>
 8004f0a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004f0e:	e00f      	b.n	8004f30 <HAL_ADC_Init+0x2f8>
 8004f10:	20000690 	.word	0x20000690
 8004f14:	431bde83 	.word	0x431bde83
 8004f18:	50000100 	.word	0x50000100
 8004f1c:	50000300 	.word	0x50000300
 8004f20:	50000700 	.word	0x50000700
 8004f24:	50000400 	.word	0x50000400
 8004f28:	50000500 	.word	0x50000500
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f34:	4313      	orrs	r3, r2
 8004f36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d114      	bne.n	8004f74 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6812      	ldr	r2, [r2, #0]
 8004f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f58:	f023 0302 	bic.w	r3, r3, #2
 8004f5c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	7e1b      	ldrb	r3, [r3, #24]
 8004f62:	039a      	lsls	r2, r3, #14
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f70:	4313      	orrs	r3, r2
 8004f72:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	4b1e      	ldr	r3, [pc, #120]	; (8004ff4 <HAL_ADC_Init+0x3bc>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6812      	ldr	r2, [r2, #0]
 8004f82:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004f84:	430b      	orrs	r3, r1
 8004f86:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d10c      	bne.n	8004faa <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	f023 010f 	bic.w	r1, r3, #15
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	1e5a      	subs	r2, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8004fa8:	e007      	b.n	8004fba <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 020f 	bic.w	r2, r2, #15
 8004fb8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	f023 0303 	bic.w	r3, r3, #3
 8004fc8:	f043 0201 	orr.w	r2, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40
 8004fd0:	e00a      	b.n	8004fe8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	f023 0312 	bic.w	r3, r3, #18
 8004fda:	f043 0210 	orr.w	r2, r3, #16
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004fe8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3768      	adds	r7, #104	; 0x68
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	fff0c007 	.word	0xfff0c007

08004ff8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b09b      	sub	sp, #108	; 0x6c
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_ADC_ConfigChannel+0x22>
 8005016:	2302      	movs	r3, #2
 8005018:	e2cb      	b.n	80055b2 <HAL_ADC_ConfigChannel+0x5ba>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	f040 82af 	bne.w	8005590 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b04      	cmp	r3, #4
 8005038:	d81c      	bhi.n	8005074 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	4413      	add	r3, r2
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	461a      	mov	r2, r3
 800504e:	231f      	movs	r3, #31
 8005050:	4093      	lsls	r3, r2
 8005052:	43db      	mvns	r3, r3
 8005054:	4019      	ands	r1, r3
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	fa00 f203 	lsl.w	r2, r0, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	631a      	str	r2, [r3, #48]	; 0x30
 8005072:	e063      	b.n	800513c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b09      	cmp	r3, #9
 800507a:	d81e      	bhi.n	80050ba <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	4613      	mov	r3, r2
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	4413      	add	r3, r2
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	3b1e      	subs	r3, #30
 8005090:	221f      	movs	r2, #31
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	43db      	mvns	r3, r3
 8005098:	4019      	ands	r1, r3
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	4413      	add	r3, r2
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	3b1e      	subs	r3, #30
 80050ac:	fa00 f203 	lsl.w	r2, r0, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	635a      	str	r2, [r3, #52]	; 0x34
 80050b8:	e040      	b.n	800513c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b0e      	cmp	r3, #14
 80050c0:	d81e      	bhi.n	8005100 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	4613      	mov	r3, r2
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	4413      	add	r3, r2
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	3b3c      	subs	r3, #60	; 0x3c
 80050d6:	221f      	movs	r2, #31
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	43db      	mvns	r3, r3
 80050de:	4019      	ands	r1, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4413      	add	r3, r2
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	3b3c      	subs	r3, #60	; 0x3c
 80050f2:	fa00 f203 	lsl.w	r2, r0, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38
 80050fe:	e01d      	b.n	800513c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	4413      	add	r3, r2
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	3b5a      	subs	r3, #90	; 0x5a
 8005114:	221f      	movs	r2, #31
 8005116:	fa02 f303 	lsl.w	r3, r2, r3
 800511a:	43db      	mvns	r3, r3
 800511c:	4019      	ands	r1, r3
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	4613      	mov	r3, r2
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	4413      	add	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	3b5a      	subs	r3, #90	; 0x5a
 8005130:	fa00 f203 	lsl.w	r2, r0, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
 8005146:	2b00      	cmp	r3, #0
 8005148:	f040 80e5 	bne.w	8005316 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b09      	cmp	r3, #9
 8005152:	d91c      	bls.n	800518e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6999      	ldr	r1, [r3, #24]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4613      	mov	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4413      	add	r3, r2
 8005164:	3b1e      	subs	r3, #30
 8005166:	2207      	movs	r2, #7
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	43db      	mvns	r3, r3
 800516e:	4019      	ands	r1, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	6898      	ldr	r0, [r3, #8]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	4413      	add	r3, r2
 800517e:	3b1e      	subs	r3, #30
 8005180:	fa00 f203 	lsl.w	r2, r0, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	619a      	str	r2, [r3, #24]
 800518c:	e019      	b.n	80051c2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6959      	ldr	r1, [r3, #20]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	4413      	add	r3, r2
 800519e:	2207      	movs	r2, #7
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	43db      	mvns	r3, r3
 80051a6:	4019      	ands	r1, r3
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	6898      	ldr	r0, [r3, #8]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	4413      	add	r3, r2
 80051b6:	fa00 f203 	lsl.w	r2, r0, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695a      	ldr	r2, [r3, #20]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	08db      	lsrs	r3, r3, #3
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	3b01      	subs	r3, #1
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d84f      	bhi.n	8005284 <HAL_ADC_ConfigChannel+0x28c>
 80051e4:	a201      	add	r2, pc, #4	; (adr r2, 80051ec <HAL_ADC_ConfigChannel+0x1f4>)
 80051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ea:	bf00      	nop
 80051ec:	080051fd 	.word	0x080051fd
 80051f0:	0800521f 	.word	0x0800521f
 80051f4:	08005241 	.word	0x08005241
 80051f8:	08005263 	.word	0x08005263
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005202:	4b9f      	ldr	r3, [pc, #636]	; (8005480 <HAL_ADC_ConfigChannel+0x488>)
 8005204:	4013      	ands	r3, r2
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	6812      	ldr	r2, [r2, #0]
 800520a:	0691      	lsls	r1, r2, #26
 800520c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800520e:	430a      	orrs	r2, r1
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800521a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800521c:	e07e      	b.n	800531c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005224:	4b96      	ldr	r3, [pc, #600]	; (8005480 <HAL_ADC_ConfigChannel+0x488>)
 8005226:	4013      	ands	r3, r2
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	0691      	lsls	r1, r2, #26
 800522e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005230:	430a      	orrs	r2, r1
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800523c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800523e:	e06d      	b.n	800531c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005246:	4b8e      	ldr	r3, [pc, #568]	; (8005480 <HAL_ADC_ConfigChannel+0x488>)
 8005248:	4013      	ands	r3, r2
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	0691      	lsls	r1, r2, #26
 8005250:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005252:	430a      	orrs	r2, r1
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800525e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005260:	e05c      	b.n	800531c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005268:	4b85      	ldr	r3, [pc, #532]	; (8005480 <HAL_ADC_ConfigChannel+0x488>)
 800526a:	4013      	ands	r3, r2
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	0691      	lsls	r1, r2, #26
 8005272:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005274:	430a      	orrs	r2, r1
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005280:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005282:	e04b      	b.n	800531c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800528a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	069b      	lsls	r3, r3, #26
 8005294:	429a      	cmp	r2, r3
 8005296:	d107      	bne.n	80052a8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80052a6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	069b      	lsls	r3, r3, #26
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d107      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80052ca:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	069b      	lsls	r3, r3, #26
 80052dc:	429a      	cmp	r2, r3
 80052de:	d107      	bne.n	80052f0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80052ee:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	069b      	lsls	r3, r3, #26
 8005300:	429a      	cmp	r2, r3
 8005302:	d10a      	bne.n	800531a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005312:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005314:	e001      	b.n	800531a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8005316:	bf00      	nop
 8005318:	e000      	b.n	800531c <HAL_ADC_ConfigChannel+0x324>
      break;
 800531a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b01      	cmp	r3, #1
 8005328:	d108      	bne.n	800533c <HAL_ADC_ConfigChannel+0x344>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_ADC_ConfigChannel+0x344>
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <HAL_ADC_ConfigChannel+0x346>
 800533c:	2300      	movs	r3, #0
 800533e:	2b00      	cmp	r3, #0
 8005340:	f040 8131 	bne.w	80055a6 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d00f      	beq.n	800536c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2201      	movs	r2, #1
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	43da      	mvns	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	400a      	ands	r2, r1
 8005366:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800536a:	e049      	b.n	8005400 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2201      	movs	r2, #1
 800537a:	409a      	lsls	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b09      	cmp	r3, #9
 800538c:	d91c      	bls.n	80053c8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6999      	ldr	r1, [r3, #24]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4613      	mov	r3, r2
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	4413      	add	r3, r2
 800539e:	3b1b      	subs	r3, #27
 80053a0:	2207      	movs	r2, #7
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	43db      	mvns	r3, r3
 80053a8:	4019      	ands	r1, r3
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6898      	ldr	r0, [r3, #8]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4613      	mov	r3, r2
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	4413      	add	r3, r2
 80053b8:	3b1b      	subs	r3, #27
 80053ba:	fa00 f203 	lsl.w	r2, r0, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	619a      	str	r2, [r3, #24]
 80053c6:	e01b      	b.n	8005400 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6959      	ldr	r1, [r3, #20]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	4613      	mov	r3, r2
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	4413      	add	r3, r2
 80053da:	2207      	movs	r2, #7
 80053dc:	fa02 f303 	lsl.w	r3, r2, r3
 80053e0:	43db      	mvns	r3, r3
 80053e2:	4019      	ands	r1, r3
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	6898      	ldr	r0, [r3, #8]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	4613      	mov	r3, r2
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	4413      	add	r3, r2
 80053f4:	fa00 f203 	lsl.w	r2, r0, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005408:	d004      	beq.n	8005414 <HAL_ADC_ConfigChannel+0x41c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <HAL_ADC_ConfigChannel+0x48c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d101      	bne.n	8005418 <HAL_ADC_ConfigChannel+0x420>
 8005414:	4b1c      	ldr	r3, [pc, #112]	; (8005488 <HAL_ADC_ConfigChannel+0x490>)
 8005416:	e000      	b.n	800541a <HAL_ADC_ConfigChannel+0x422>
 8005418:	4b1c      	ldr	r3, [pc, #112]	; (800548c <HAL_ADC_ConfigChannel+0x494>)
 800541a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b10      	cmp	r3, #16
 8005422:	d105      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800542c:	2b00      	cmp	r3, #0
 800542e:	d015      	beq.n	800545c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005434:	2b11      	cmp	r3, #17
 8005436:	d105      	bne.n	8005444 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00b      	beq.n	800545c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005448:	2b12      	cmp	r3, #18
 800544a:	f040 80ac 	bne.w	80055a6 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800544e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005456:	2b00      	cmp	r3, #0
 8005458:	f040 80a5 	bne.w	80055a6 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005464:	d102      	bne.n	800546c <HAL_ADC_ConfigChannel+0x474>
 8005466:	4b07      	ldr	r3, [pc, #28]	; (8005484 <HAL_ADC_ConfigChannel+0x48c>)
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	e023      	b.n	80054b4 <HAL_ADC_ConfigChannel+0x4bc>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a04      	ldr	r2, [pc, #16]	; (8005484 <HAL_ADC_ConfigChannel+0x48c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d10c      	bne.n	8005490 <HAL_ADC_ConfigChannel+0x498>
 8005476:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	e01a      	b.n	80054b4 <HAL_ADC_ConfigChannel+0x4bc>
 800547e:	bf00      	nop
 8005480:	83fff000 	.word	0x83fff000
 8005484:	50000100 	.word	0x50000100
 8005488:	50000300 	.word	0x50000300
 800548c:	50000700 	.word	0x50000700
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a4a      	ldr	r2, [pc, #296]	; (80055c0 <HAL_ADC_ConfigChannel+0x5c8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d102      	bne.n	80054a0 <HAL_ADC_ConfigChannel+0x4a8>
 800549a:	4b4a      	ldr	r3, [pc, #296]	; (80055c4 <HAL_ADC_ConfigChannel+0x5cc>)
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	e009      	b.n	80054b4 <HAL_ADC_ConfigChannel+0x4bc>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a47      	ldr	r2, [pc, #284]	; (80055c4 <HAL_ADC_ConfigChannel+0x5cc>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d102      	bne.n	80054b0 <HAL_ADC_ConfigChannel+0x4b8>
 80054aa:	4b45      	ldr	r3, [pc, #276]	; (80055c0 <HAL_ADC_ConfigChannel+0x5c8>)
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	e001      	b.n	80054b4 <HAL_ADC_ConfigChannel+0x4bc>
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d108      	bne.n	80054d4 <HAL_ADC_ConfigChannel+0x4dc>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_ADC_ConfigChannel+0x4dc>
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <HAL_ADC_ConfigChannel+0x4de>
 80054d4:	2300      	movs	r3, #0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d150      	bne.n	800557c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80054da:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d010      	beq.n	8005502 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d107      	bne.n	80054fc <HAL_ADC_ConfigChannel+0x504>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_ADC_ConfigChannel+0x504>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <HAL_ADC_ConfigChannel+0x506>
 80054fc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d13c      	bne.n	800557c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b10      	cmp	r3, #16
 8005508:	d11d      	bne.n	8005546 <HAL_ADC_ConfigChannel+0x54e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005512:	d118      	bne.n	8005546 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800551c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800551e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005520:	4b29      	ldr	r3, [pc, #164]	; (80055c8 <HAL_ADC_ConfigChannel+0x5d0>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a29      	ldr	r2, [pc, #164]	; (80055cc <HAL_ADC_ConfigChannel+0x5d4>)
 8005526:	fba2 2303 	umull	r2, r3, r2, r3
 800552a:	0c9a      	lsrs	r2, r3, #18
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005536:	e002      	b.n	800553e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	3b01      	subs	r3, #1
 800553c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1f9      	bne.n	8005538 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005544:	e02e      	b.n	80055a4 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b11      	cmp	r3, #17
 800554c:	d10b      	bne.n	8005566 <HAL_ADC_ConfigChannel+0x56e>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005556:	d106      	bne.n	8005566 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005562:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005564:	e01e      	b.n	80055a4 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b12      	cmp	r3, #18
 800556c:	d11a      	bne.n	80055a4 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800556e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005578:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800557a:	e013      	b.n	80055a4 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	f043 0220 	orr.w	r2, r3, #32
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800558e:	e00a      	b.n	80055a6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	f043 0220 	orr.w	r2, r3, #32
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80055a2:	e000      	b.n	80055a6 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80055a4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80055ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	376c      	adds	r7, #108	; 0x6c
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	50000400 	.word	0x50000400
 80055c4:	50000500 	.word	0x50000500
 80055c8:	20000690 	.word	0x20000690
 80055cc:	431bde83 	.word	0x431bde83

080055d0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b09d      	sub	sp, #116	; 0x74
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d101      	bne.n	80055f6 <HAL_ADCEx_InjectedConfigChannel+0x26>
 80055f2:	2302      	movs	r3, #2
 80055f4:	e365      	b.n	8005cc2 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800560a:	2b01      	cmp	r3, #1
 800560c:	d151      	bne.n	80056b2 <HAL_ADCEx_InjectedConfigChannel+0xe2>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d143      	bne.n	800569e <HAL_ADCEx_InjectedConfigChannel+0xce>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d02b      	beq.n	8005676 <HAL_ADCEx_InjectedConfigChannel+0xa6>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	021a      	lsls	r2, r3, #8
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4984      	ldr	r1, [pc, #528]	; (800583c <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 800562a:	428b      	cmp	r3, r1
 800562c:	d004      	beq.n	8005638 <HAL_ADCEx_InjectedConfigChannel+0x68>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4983      	ldr	r1, [pc, #524]	; (8005840 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 8005634:	428b      	cmp	r3, r1
 8005636:	d114      	bne.n	8005662 <HAL_ADCEx_InjectedConfigChannel+0x92>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	2b08      	cmp	r3, #8
 800563e:	d00e      	beq.n	800565e <HAL_ADCEx_InjectedConfigChannel+0x8e>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	2b14      	cmp	r3, #20
 8005646:	d008      	beq.n	800565a <HAL_ADCEx_InjectedConfigChannel+0x8a>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	2b1c      	cmp	r3, #28
 800564e:	d002      	beq.n	8005656 <HAL_ADCEx_InjectedConfigChannel+0x86>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	e007      	b.n	8005666 <HAL_ADCEx_InjectedConfigChannel+0x96>
 8005656:	2310      	movs	r3, #16
 8005658:	e005      	b.n	8005666 <HAL_ADCEx_InjectedConfigChannel+0x96>
 800565a:	231c      	movs	r3, #28
 800565c:	e003      	b.n	8005666 <HAL_ADCEx_InjectedConfigChannel+0x96>
 800565e:	2334      	movs	r3, #52	; 0x34
 8005660:	e001      	b.n	8005666 <HAL_ADCEx_InjectedConfigChannel+0x96>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	431a      	orrs	r2, r3
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	4313      	orrs	r3, r2
 800566e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005670:	4313      	orrs	r3, r2
 8005672:	66bb      	str	r3, [r7, #104]	; 0x68
 8005674:	e005      	b.n	8005682 <HAL_ADCEx_InjectedConfigChannel+0xb2>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800567e:	4313      	orrs	r3, r2
 8005680:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005688:	4b6e      	ldr	r3, [pc, #440]	; (8005844 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 800568a:	4013      	ands	r3, r2
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6812      	ldr	r2, [r2, #0]
 8005690:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005692:	430b      	orrs	r3, r1
 8005694:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800569a:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800569c:	e07f      	b.n	800579e <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f043 0220 	orr.w	r2, r3, #32
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80056b0:	e075      	b.n	800579e <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d140      	bne.n	800573c <HAL_ADCEx_InjectedConfigChannel+0x16c>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d02d      	beq.n	800572c <HAL_ADCEx_InjectedConfigChannel+0x15c>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	1e59      	subs	r1, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4857      	ldr	r0, [pc, #348]	; (800583c <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 80056e0:	4283      	cmp	r3, r0
 80056e2:	d004      	beq.n	80056ee <HAL_ADCEx_InjectedConfigChannel+0x11e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4855      	ldr	r0, [pc, #340]	; (8005840 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 80056ea:	4283      	cmp	r3, r0
 80056ec:	d114      	bne.n	8005718 <HAL_ADCEx_InjectedConfigChannel+0x148>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d00e      	beq.n	8005714 <HAL_ADCEx_InjectedConfigChannel+0x144>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	2b14      	cmp	r3, #20
 80056fc:	d008      	beq.n	8005710 <HAL_ADCEx_InjectedConfigChannel+0x140>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	2b1c      	cmp	r3, #28
 8005704:	d002      	beq.n	800570c <HAL_ADCEx_InjectedConfigChannel+0x13c>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	e007      	b.n	800571c <HAL_ADCEx_InjectedConfigChannel+0x14c>
 800570c:	2310      	movs	r3, #16
 800570e:	e005      	b.n	800571c <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8005710:	231c      	movs	r3, #28
 8005712:	e003      	b.n	800571c <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8005714:	2334      	movs	r3, #52	; 0x34
 8005716:	e001      	b.n	800571c <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	4319      	orrs	r1, r3
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	430b      	orrs	r3, r1
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	649a      	str	r2, [r3, #72]	; 0x48
 800572a:	e007      	b.n	800573c <HAL_ADCEx_InjectedConfigChannel+0x16c>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	3b01      	subs	r3, #1
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	4613      	mov	r3, r2
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	4413      	add	r3, r2
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	3302      	adds	r3, #2
 800574e:	221f      	movs	r2, #31
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	43db      	mvns	r3, r3
 8005756:	4019      	ands	r1, r3
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	4413      	add	r3, r2
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	3302      	adds	r3, #2
 800576a:	fa00 f303 	lsl.w	r3, r0, r3
 800576e:	ea41 0203 	orr.w	r2, r1, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577a:	1e5a      	subs	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10a      	bne.n	800579e <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800578e:	4b2d      	ldr	r3, [pc, #180]	; (8005844 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 8005790:	4013      	ands	r3, r2
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6812      	ldr	r2, [r2, #0]
 800579a:	430b      	orrs	r3, r1
 800579c:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d12d      	bne.n	8005808 <HAL_ADCEx_InjectedConfigChannel+0x238>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	7f5b      	ldrb	r3, [r3, #29]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d110      	bne.n	80057d6 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	7f9b      	ldrb	r3, [r3, #30]
 80057c2:	055a      	lsls	r2, r3, #21
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	7f1b      	ldrb	r3, [r3, #28]
 80057c8:	051b      	lsls	r3, r3, #20
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	60da      	str	r2, [r3, #12]
 80057d4:	e018      	b.n	8005808 <HAL_ADCEx_InjectedConfigChannel+0x238>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	7f9b      	ldrb	r3, [r3, #30]
 80057e4:	055a      	lsls	r2, r3, #21
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	7f1b      	ldrb	r3, [r3, #28]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d108      	bne.n	8005808 <HAL_ADCEx_InjectedConfigChannel+0x238>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	f043 0220 	orr.w	r2, r3, #32
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	2b00      	cmp	r3, #0
 8005814:	f040 8111 	bne.w	8005a3a <HAL_ADCEx_InjectedConfigChannel+0x46a>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d113      	bne.n	8005848 <HAL_ADCEx_InjectedConfigChannel+0x278>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	7f5b      	ldrb	r3, [r3, #29]
 800582e:	065a      	lsls	r2, r3, #25
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	60da      	str	r2, [r3, #12]
 8005838:	e01b      	b.n	8005872 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 800583a:	bf00      	nop
 800583c:	50000400 	.word	0x50000400
 8005840:	50000500 	.word	0x50000500
 8005844:	82082000 	.word	0x82082000
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005856:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	7f5b      	ldrb	r3, [r3, #29]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d108      	bne.n	8005872 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	f043 0220 	orr.w	r2, r3, #32
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b09      	cmp	r3, #9
 8005878:	d91c      	bls.n	80058b4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6999      	ldr	r1, [r3, #24]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	4613      	mov	r3, r2
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	4413      	add	r3, r2
 800588a:	3b1e      	subs	r3, #30
 800588c:	2207      	movs	r2, #7
 800588e:	fa02 f303 	lsl.w	r3, r2, r3
 8005892:	43db      	mvns	r3, r3
 8005894:	4019      	ands	r1, r3
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6898      	ldr	r0, [r3, #8]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4613      	mov	r3, r2
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	4413      	add	r3, r2
 80058a4:	3b1e      	subs	r3, #30
 80058a6:	fa00 f203 	lsl.w	r2, r0, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	619a      	str	r2, [r3, #24]
 80058b2:	e019      	b.n	80058e8 <HAL_ADCEx_InjectedConfigChannel+0x318>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6959      	ldr	r1, [r3, #20]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4613      	mov	r3, r2
 80058c0:	005b      	lsls	r3, r3, #1
 80058c2:	4413      	add	r3, r2
 80058c4:	2207      	movs	r2, #7
 80058c6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ca:	43db      	mvns	r3, r3
 80058cc:	4019      	ands	r1, r3
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	6898      	ldr	r0, [r3, #8]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4613      	mov	r3, r2
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	4413      	add	r3, r2
 80058dc:	fa00 f203 	lsl.w	r2, r0, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	695a      	ldr	r2, [r3, #20]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	08db      	lsrs	r3, r3, #3
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	3b01      	subs	r3, #1
 8005906:	2b03      	cmp	r3, #3
 8005908:	d84e      	bhi.n	80059a8 <HAL_ADCEx_InjectedConfigChannel+0x3d8>
 800590a:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 800590c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005910:	08005921 	.word	0x08005921
 8005914:	08005943 	.word	0x08005943
 8005918:	08005965 	.word	0x08005965
 800591c:	08005987 	.word	0x08005987
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005926:	4b9f      	ldr	r3, [pc, #636]	; (8005ba4 <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8005928:	4013      	ands	r3, r2
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	6812      	ldr	r2, [r2, #0]
 800592e:	0691      	lsls	r1, r2, #26
 8005930:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005932:	430a      	orrs	r2, r1
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800593e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8005940:	e07e      	b.n	8005a40 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005948:	4b96      	ldr	r3, [pc, #600]	; (8005ba4 <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 800594a:	4013      	ands	r3, r2
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	0691      	lsls	r1, r2, #26
 8005952:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005954:	430a      	orrs	r2, r1
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005960:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8005962:	e06d      	b.n	8005a40 <HAL_ADCEx_InjectedConfigChannel+0x470>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800596a:	4b8e      	ldr	r3, [pc, #568]	; (8005ba4 <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 800596c:	4013      	ands	r3, r2
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	6812      	ldr	r2, [r2, #0]
 8005972:	0691      	lsls	r1, r2, #26
 8005974:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005976:	430a      	orrs	r2, r1
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005982:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8005984:	e05c      	b.n	8005a40 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800598c:	4b85      	ldr	r3, [pc, #532]	; (8005ba4 <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 800598e:	4013      	ands	r3, r2
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	6812      	ldr	r2, [r2, #0]
 8005994:	0691      	lsls	r1, r2, #26
 8005996:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005998:	430a      	orrs	r2, r1
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80059a4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80059a6:	e04b      	b.n	8005a40 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	069b      	lsls	r3, r3, #26
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d107      	bne.n	80059cc <HAL_ADCEx_InjectedConfigChannel+0x3fc>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80059ca:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	069b      	lsls	r3, r3, #26
 80059dc:	429a      	cmp	r2, r3
 80059de:	d107      	bne.n	80059f0 <HAL_ADCEx_InjectedConfigChannel+0x420>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80059ee:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	069b      	lsls	r3, r3, #26
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d107      	bne.n	8005a14 <HAL_ADCEx_InjectedConfigChannel+0x444>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005a12:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	069b      	lsls	r3, r3, #26
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d10a      	bne.n	8005a3e <HAL_ADCEx_InjectedConfigChannel+0x46e>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005a36:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005a38:	e001      	b.n	8005a3e <HAL_ADCEx_InjectedConfigChannel+0x46e>
    }
    
  }
 8005a3a:	bf00      	nop
 8005a3c:	e000      	b.n	8005a40 <HAL_ADCEx_InjectedConfigChannel+0x470>
      break;
 8005a3e:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d108      	bne.n	8005a60 <HAL_ADCEx_InjectedConfigChannel+0x490>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_ADCEx_InjectedConfigChannel+0x490>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e000      	b.n	8005a62 <HAL_ADCEx_InjectedConfigChannel+0x492>
 8005a60:	2300      	movs	r3, #0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f040 8127 	bne.w	8005cb6 <HAL_ADCEx_InjectedConfigChannel+0x6e6>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d00f      	beq.n	8005a90 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a82:	43da      	mvns	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	400a      	ands	r2, r1
 8005a8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005a8e:	e049      	b.n	8005b24 <HAL_ADCEx_InjectedConfigChannel+0x554>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	409a      	lsls	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b09      	cmp	r3, #9
 8005ab0:	d91c      	bls.n	8005aec <HAL_ADCEx_InjectedConfigChannel+0x51c>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6999      	ldr	r1, [r3, #24]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	4613      	mov	r3, r2
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	4413      	add	r3, r2
 8005ac2:	3b1b      	subs	r3, #27
 8005ac4:	2207      	movs	r2, #7
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	43db      	mvns	r3, r3
 8005acc:	4019      	ands	r1, r3
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	6898      	ldr	r0, [r3, #8]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	4413      	add	r3, r2
 8005adc:	3b1b      	subs	r3, #27
 8005ade:	fa00 f203 	lsl.w	r2, r0, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	619a      	str	r2, [r3, #24]
 8005aea:	e01b      	b.n	8005b24 <HAL_ADCEx_InjectedConfigChannel+0x554>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6959      	ldr	r1, [r3, #20]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	4613      	mov	r3, r2
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	4413      	add	r3, r2
 8005afe:	2207      	movs	r2, #7
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	43db      	mvns	r3, r3
 8005b06:	4019      	ands	r1, r3
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	6898      	ldr	r0, [r3, #8]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	4613      	mov	r3, r2
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	4413      	add	r3, r2
 8005b18:	fa00 f203 	lsl.w	r2, r0, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b2c:	d004      	beq.n	8005b38 <HAL_ADCEx_InjectedConfigChannel+0x568>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1d      	ldr	r2, [pc, #116]	; (8005ba8 <HAL_ADCEx_InjectedConfigChannel+0x5d8>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d101      	bne.n	8005b3c <HAL_ADCEx_InjectedConfigChannel+0x56c>
 8005b38:	4b1c      	ldr	r3, [pc, #112]	; (8005bac <HAL_ADCEx_InjectedConfigChannel+0x5dc>)
 8005b3a:	e000      	b.n	8005b3e <HAL_ADCEx_InjectedConfigChannel+0x56e>
 8005b3c:	4b1c      	ldr	r3, [pc, #112]	; (8005bb0 <HAL_ADCEx_InjectedConfigChannel+0x5e0>)
 8005b3e:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b10      	cmp	r3, #16
 8005b46:	d105      	bne.n	8005b54 <HAL_ADCEx_InjectedConfigChannel+0x584>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005b48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d015      	beq.n	8005b80 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005b58:	2b11      	cmp	r3, #17
 8005b5a:	d105      	bne.n	8005b68 <HAL_ADCEx_InjectedConfigChannel+0x598>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005b5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00b      	beq.n	8005b80 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005b6c:	2b12      	cmp	r3, #18
 8005b6e:	f040 80a2 	bne.w	8005cb6 <HAL_ADCEx_InjectedConfigChannel+0x6e6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f040 809b 	bne.w	8005cb6 <HAL_ADCEx_InjectedConfigChannel+0x6e6>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b88:	d102      	bne.n	8005b90 <HAL_ADCEx_InjectedConfigChannel+0x5c0>
 8005b8a:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <HAL_ADCEx_InjectedConfigChannel+0x5d8>)
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	e023      	b.n	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a04      	ldr	r2, [pc, #16]	; (8005ba8 <HAL_ADCEx_InjectedConfigChannel+0x5d8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d10c      	bne.n	8005bb4 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8005b9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	e01a      	b.n	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8005ba2:	bf00      	nop
 8005ba4:	83fff000 	.word	0x83fff000
 8005ba8:	50000100 	.word	0x50000100
 8005bac:	50000300 	.word	0x50000300
 8005bb0:	50000700 	.word	0x50000700
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a45      	ldr	r2, [pc, #276]	; (8005cd0 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d102      	bne.n	8005bc4 <HAL_ADCEx_InjectedConfigChannel+0x5f4>
 8005bbe:	4b45      	ldr	r3, [pc, #276]	; (8005cd4 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	e009      	b.n	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a42      	ldr	r2, [pc, #264]	; (8005cd4 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d102      	bne.n	8005bd4 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8005bce:	4b40      	ldr	r3, [pc, #256]	; (8005cd0 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	e001      	b.n	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d108      	bne.n	8005bf8 <HAL_ADCEx_InjectedConfigChannel+0x628>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_ADCEx_InjectedConfigChannel+0x628>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e000      	b.n	8005bfa <HAL_ADCEx_InjectedConfigChannel+0x62a>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d150      	bne.n	8005ca0 <HAL_ADCEx_InjectedConfigChannel+0x6d0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005bfe:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d010      	beq.n	8005c26 <HAL_ADCEx_InjectedConfigChannel+0x656>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f003 0303 	and.w	r3, r3, #3
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d107      	bne.n	8005c20 <HAL_ADCEx_InjectedConfigChannel+0x650>
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_ADCEx_InjectedConfigChannel+0x650>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e000      	b.n	8005c22 <HAL_ADCEx_InjectedConfigChannel+0x652>
 8005c20:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d13c      	bne.n	8005ca0 <HAL_ADCEx_InjectedConfigChannel+0x6d0>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b10      	cmp	r3, #16
 8005c2c:	d11d      	bne.n	8005c6a <HAL_ADCEx_InjectedConfigChannel+0x69a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c36:	d118      	bne.n	8005c6a <HAL_ADCEx_InjectedConfigChannel+0x69a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c42:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c44:	4b24      	ldr	r3, [pc, #144]	; (8005cd8 <HAL_ADCEx_InjectedConfigChannel+0x708>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a24      	ldr	r2, [pc, #144]	; (8005cdc <HAL_ADCEx_InjectedConfigChannel+0x70c>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	0c9a      	lsrs	r2, r3, #18
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8005c5a:	e002      	b.n	8005c62 <HAL_ADCEx_InjectedConfigChannel+0x692>
          {
            wait_loop_index--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1f9      	bne.n	8005c5c <HAL_ADCEx_InjectedConfigChannel+0x68c>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005c68:	e024      	b.n	8005cb4 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b11      	cmp	r3, #17
 8005c70:	d10b      	bne.n	8005c8a <HAL_ADCEx_InjectedConfigChannel+0x6ba>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c7a:	d106      	bne.n	8005c8a <HAL_ADCEx_InjectedConfigChannel+0x6ba>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005c7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c86:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005c88:	e014      	b.n	8005cb4 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b12      	cmp	r3, #18
 8005c90:	d110      	bne.n	8005cb4 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c9c:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005c9e:	e009      	b.n	8005cb4 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	f043 0220 	orr.w	r2, r3, #32
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8005cb2:	e000      	b.n	8005cb6 <HAL_ADCEx_InjectedConfigChannel+0x6e6>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005cb4:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005cbe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3774      	adds	r7, #116	; 0x74
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	50000400 	.word	0x50000400
 8005cd4:	50000500 	.word	0x50000500
 8005cd8:	20000690 	.word	0x20000690
 8005cdc:	431bde83 	.word	0x431bde83

08005ce0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b099      	sub	sp, #100	; 0x64
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cf8:	d102      	bne.n	8005d00 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8005cfa:	4b6d      	ldr	r3, [pc, #436]	; (8005eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005cfc:	60bb      	str	r3, [r7, #8]
 8005cfe:	e01a      	b.n	8005d36 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a6a      	ldr	r2, [pc, #424]	; (8005eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d103      	bne.n	8005d12 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8005d0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005d0e:	60bb      	str	r3, [r7, #8]
 8005d10:	e011      	b.n	8005d36 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a67      	ldr	r2, [pc, #412]	; (8005eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d102      	bne.n	8005d22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005d1c:	4b66      	ldr	r3, [pc, #408]	; (8005eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005d1e:	60bb      	str	r3, [r7, #8]
 8005d20:	e009      	b.n	8005d36 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a64      	ldr	r2, [pc, #400]	; (8005eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d102      	bne.n	8005d32 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005d2c:	4b61      	ldr	r3, [pc, #388]	; (8005eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005d2e:	60bb      	str	r3, [r7, #8]
 8005d30:	e001      	b.n	8005d36 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005d32:	2300      	movs	r3, #0
 8005d34:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0b0      	b.n	8005ea2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d101      	bne.n	8005d4e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	e0a9      	b.n	8005ea2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f040 808d 	bne.w	8005e80 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f040 8086 	bne.w	8005e80 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d7c:	d004      	beq.n	8005d88 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a4b      	ldr	r2, [pc, #300]	; (8005eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d101      	bne.n	8005d8c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005d88:	4b4c      	ldr	r3, [pc, #304]	; (8005ebc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8005d8a:	e000      	b.n	8005d8e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005d8c:	4b4c      	ldr	r3, [pc, #304]	; (8005ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8005d8e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d040      	beq.n	8005e1a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	6859      	ldr	r1, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005daa:	035b      	lsls	r3, r3, #13
 8005dac:	430b      	orrs	r3, r1
 8005dae:	431a      	orrs	r2, r3
 8005db0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005db2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d108      	bne.n	8005dd4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e000      	b.n	8005dd6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d15c      	bne.n	8005e94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d107      	bne.n	8005df6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8005df6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d14b      	bne.n	8005e94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005dfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005e04:	f023 030f 	bic.w	r3, r3, #15
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	6811      	ldr	r1, [r2, #0]
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	6892      	ldr	r2, [r2, #8]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	431a      	orrs	r2, r3
 8005e14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e16:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e18:	e03c      	b.n	8005e94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e24:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d108      	bne.n	8005e46 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e000      	b.n	8005e48 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005e46:	2300      	movs	r3, #0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d123      	bne.n	8005e94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d107      	bne.n	8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005e68:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d112      	bne.n	8005e94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005e76:	f023 030f 	bic.w	r3, r3, #15
 8005e7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e7c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e7e:	e009      	b.n	8005e94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	f043 0220 	orr.w	r2, r3, #32
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005e92:	e000      	b.n	8005e96 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e94:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005e9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3764      	adds	r7, #100	; 0x64
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	50000100 	.word	0x50000100
 8005eb4:	50000400 	.word	0x50000400
 8005eb8:	50000500 	.word	0x50000500
 8005ebc:	50000300 	.word	0x50000300
 8005ec0:	50000700 	.word	0x50000700

08005ec4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d108      	bne.n	8005ef0 <ADC_Disable+0x2c>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d101      	bne.n	8005ef0 <ADC_Disable+0x2c>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e000      	b.n	8005ef2 <ADC_Disable+0x2e>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d040      	beq.n	8005f78 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f003 030d 	and.w	r3, r3, #13
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d10f      	bne.n	8005f24 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0202 	orr.w	r2, r2, #2
 8005f12:	609a      	str	r2, [r3, #8]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2203      	movs	r2, #3
 8005f1a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005f1c:	f7fe fe80 	bl	8004c20 <HAL_GetTick>
 8005f20:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005f22:	e022      	b.n	8005f6a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	f043 0210 	orr.w	r2, r3, #16
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f34:	f043 0201 	orr.w	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e01c      	b.n	8005f7a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005f40:	f7fe fe6e 	bl	8004c20 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d90d      	bls.n	8005f6a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	f043 0210 	orr.w	r2, r3, #16
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5e:	f043 0201 	orr.w	r2, r3, #1
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e007      	b.n	8005f7a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d0e3      	beq.n	8005f40 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d007      	beq.n	8005fa6 <HAL_COMP_Init+0x22>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	f003 0310 	and.w	r3, r3, #16
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	75fb      	strb	r3, [r7, #23]
 8005faa:	e064      	b.n	8006076 <HAL_COMP_Init+0xf2>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fac:	4b34      	ldr	r3, [pc, #208]	; (8006080 <HAL_COMP_Init+0xfc>)
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	4a33      	ldr	r2, [pc, #204]	; (8006080 <HAL_COMP_Init+0xfc>)
 8005fb2:	f043 0301 	orr.w	r3, r3, #1
 8005fb6:	6193      	str	r3, [r2, #24]
 8005fb8:	4b31      	ldr	r3, [pc, #196]	; (8006080 <HAL_COMP_Init+0xfc>)
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7fd fa7f 	bl	80034c8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d103      	bne.n	8005fde <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0282 	bic.w	r2, r3, #130	; 0x82
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f023 020c 	bic.w	r2, r3, #12
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 8006076:	7dfb      	ldrb	r3, [r7, #23]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40021000 	.word	0x40021000

08006084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006094:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <__NVIC_SetPriorityGrouping+0x44>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060a0:	4013      	ands	r3, r2
 80060a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060b6:	4a04      	ldr	r2, [pc, #16]	; (80060c8 <__NVIC_SetPriorityGrouping+0x44>)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	60d3      	str	r3, [r2, #12]
}
 80060bc:	bf00      	nop
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	e000ed00 	.word	0xe000ed00

080060cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060d0:	4b04      	ldr	r3, [pc, #16]	; (80060e4 <__NVIC_GetPriorityGrouping+0x18>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	0a1b      	lsrs	r3, r3, #8
 80060d6:	f003 0307 	and.w	r3, r3, #7
}
 80060da:	4618      	mov	r0, r3
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	e000ed00 	.word	0xe000ed00

080060e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	db0b      	blt.n	8006112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	f003 021f 	and.w	r2, r3, #31
 8006100:	4907      	ldr	r1, [pc, #28]	; (8006120 <__NVIC_EnableIRQ+0x38>)
 8006102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	2001      	movs	r0, #1
 800610a:	fa00 f202 	lsl.w	r2, r0, r2
 800610e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	e000e100 	.word	0xe000e100

08006124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	4603      	mov	r3, r0
 800612c:	6039      	str	r1, [r7, #0]
 800612e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006134:	2b00      	cmp	r3, #0
 8006136:	db0a      	blt.n	800614e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	b2da      	uxtb	r2, r3
 800613c:	490c      	ldr	r1, [pc, #48]	; (8006170 <__NVIC_SetPriority+0x4c>)
 800613e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006142:	0112      	lsls	r2, r2, #4
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	440b      	add	r3, r1
 8006148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800614c:	e00a      	b.n	8006164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	b2da      	uxtb	r2, r3
 8006152:	4908      	ldr	r1, [pc, #32]	; (8006174 <__NVIC_SetPriority+0x50>)
 8006154:	79fb      	ldrb	r3, [r7, #7]
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	3b04      	subs	r3, #4
 800615c:	0112      	lsls	r2, r2, #4
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	440b      	add	r3, r1
 8006162:	761a      	strb	r2, [r3, #24]
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	e000e100 	.word	0xe000e100
 8006174:	e000ed00 	.word	0xe000ed00

08006178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006178:	b480      	push	{r7}
 800617a:	b089      	sub	sp, #36	; 0x24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f1c3 0307 	rsb	r3, r3, #7
 8006192:	2b04      	cmp	r3, #4
 8006194:	bf28      	it	cs
 8006196:	2304      	movcs	r3, #4
 8006198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	3304      	adds	r3, #4
 800619e:	2b06      	cmp	r3, #6
 80061a0:	d902      	bls.n	80061a8 <NVIC_EncodePriority+0x30>
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	3b03      	subs	r3, #3
 80061a6:	e000      	b.n	80061aa <NVIC_EncodePriority+0x32>
 80061a8:	2300      	movs	r3, #0
 80061aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061ac:	f04f 32ff 	mov.w	r2, #4294967295
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	43da      	mvns	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	401a      	ands	r2, r3
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061c0:	f04f 31ff 	mov.w	r1, #4294967295
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ca:	43d9      	mvns	r1, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061d0:	4313      	orrs	r3, r2
         );
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3724      	adds	r7, #36	; 0x24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
	...

080061e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061f0:	d301      	bcc.n	80061f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061f2:	2301      	movs	r3, #1
 80061f4:	e00f      	b.n	8006216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061f6:	4a0a      	ldr	r2, [pc, #40]	; (8006220 <SysTick_Config+0x40>)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061fe:	210f      	movs	r1, #15
 8006200:	f04f 30ff 	mov.w	r0, #4294967295
 8006204:	f7ff ff8e 	bl	8006124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <SysTick_Config+0x40>)
 800620a:	2200      	movs	r2, #0
 800620c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800620e:	4b04      	ldr	r3, [pc, #16]	; (8006220 <SysTick_Config+0x40>)
 8006210:	2207      	movs	r2, #7
 8006212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	e000e010 	.word	0xe000e010

08006224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff ff29 	bl	8006084 <__NVIC_SetPriorityGrouping>
}
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b086      	sub	sp, #24
 800623e:	af00      	add	r7, sp, #0
 8006240:	4603      	mov	r3, r0
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	607a      	str	r2, [r7, #4]
 8006246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800624c:	f7ff ff3e 	bl	80060cc <__NVIC_GetPriorityGrouping>
 8006250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	6978      	ldr	r0, [r7, #20]
 8006258:	f7ff ff8e 	bl	8006178 <NVIC_EncodePriority>
 800625c:	4602      	mov	r2, r0
 800625e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006262:	4611      	mov	r1, r2
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff ff5d 	bl	8006124 <__NVIC_SetPriority>
}
 800626a:	bf00      	nop
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b082      	sub	sp, #8
 8006276:	af00      	add	r7, sp, #0
 8006278:	4603      	mov	r3, r0
 800627a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800627c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff ff31 	bl	80060e8 <__NVIC_EnableIRQ>
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff ffa2 	bl	80061e0 <SysTick_Config>
 800629c:	4603      	mov	r3, r0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80062aa:	f000 f802 	bl	80062b2 <HAL_SYSTICK_Callback>
}
 80062ae:	bf00      	nop
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80062b2:	b480      	push	{r7}
 80062b4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80062b6:	bf00      	nop
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062ce:	e154      	b.n	800657a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	2101      	movs	r1, #1
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	fa01 f303 	lsl.w	r3, r1, r3
 80062dc:	4013      	ands	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 8146 	beq.w	8006574 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d003      	beq.n	80062f8 <HAL_GPIO_Init+0x38>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b12      	cmp	r3, #18
 80062f6:	d123      	bne.n	8006340 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	08da      	lsrs	r2, r3, #3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3208      	adds	r2, #8
 8006300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006304:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	220f      	movs	r2, #15
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	43db      	mvns	r3, r3
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4013      	ands	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f003 0307 	and.w	r3, r3, #7
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	fa02 f303 	lsl.w	r3, r2, r3
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	08da      	lsrs	r2, r3, #3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3208      	adds	r2, #8
 800633a:	6939      	ldr	r1, [r7, #16]
 800633c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	2203      	movs	r2, #3
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	43db      	mvns	r3, r3
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4013      	ands	r3, r2
 8006356:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f003 0203 	and.w	r2, r3, #3
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d00b      	beq.n	8006394 <HAL_GPIO_Init+0xd4>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d007      	beq.n	8006394 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006388:	2b11      	cmp	r3, #17
 800638a:	d003      	beq.n	8006394 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	2b12      	cmp	r3, #18
 8006392:	d130      	bne.n	80063f6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	2203      	movs	r2, #3
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	43db      	mvns	r3, r3
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4013      	ands	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063ca:	2201      	movs	r2, #1
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	fa02 f303 	lsl.w	r3, r2, r3
 80063d2:	43db      	mvns	r3, r3
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4013      	ands	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	091b      	lsrs	r3, r3, #4
 80063e0:	f003 0201 	and.w	r2, r3, #1
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	2203      	movs	r2, #3
 8006402:	fa02 f303 	lsl.w	r3, r2, r3
 8006406:	43db      	mvns	r3, r3
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4013      	ands	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	fa02 f303 	lsl.w	r3, r2, r3
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 80a0 	beq.w	8006574 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006434:	4b58      	ldr	r3, [pc, #352]	; (8006598 <HAL_GPIO_Init+0x2d8>)
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	4a57      	ldr	r2, [pc, #348]	; (8006598 <HAL_GPIO_Init+0x2d8>)
 800643a:	f043 0301 	orr.w	r3, r3, #1
 800643e:	6193      	str	r3, [r2, #24]
 8006440:	4b55      	ldr	r3, [pc, #340]	; (8006598 <HAL_GPIO_Init+0x2d8>)
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800644c:	4a53      	ldr	r2, [pc, #332]	; (800659c <HAL_GPIO_Init+0x2dc>)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	089b      	lsrs	r3, r3, #2
 8006452:	3302      	adds	r3, #2
 8006454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006458:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f003 0303 	and.w	r3, r3, #3
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	220f      	movs	r2, #15
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	43db      	mvns	r3, r3
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4013      	ands	r3, r2
 800646e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006476:	d019      	beq.n	80064ac <HAL_GPIO_Init+0x1ec>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a49      	ldr	r2, [pc, #292]	; (80065a0 <HAL_GPIO_Init+0x2e0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d013      	beq.n	80064a8 <HAL_GPIO_Init+0x1e8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a48      	ldr	r2, [pc, #288]	; (80065a4 <HAL_GPIO_Init+0x2e4>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d00d      	beq.n	80064a4 <HAL_GPIO_Init+0x1e4>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a47      	ldr	r2, [pc, #284]	; (80065a8 <HAL_GPIO_Init+0x2e8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d007      	beq.n	80064a0 <HAL_GPIO_Init+0x1e0>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a46      	ldr	r2, [pc, #280]	; (80065ac <HAL_GPIO_Init+0x2ec>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d101      	bne.n	800649c <HAL_GPIO_Init+0x1dc>
 8006498:	2304      	movs	r3, #4
 800649a:	e008      	b.n	80064ae <HAL_GPIO_Init+0x1ee>
 800649c:	2305      	movs	r3, #5
 800649e:	e006      	b.n	80064ae <HAL_GPIO_Init+0x1ee>
 80064a0:	2303      	movs	r3, #3
 80064a2:	e004      	b.n	80064ae <HAL_GPIO_Init+0x1ee>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e002      	b.n	80064ae <HAL_GPIO_Init+0x1ee>
 80064a8:	2301      	movs	r3, #1
 80064aa:	e000      	b.n	80064ae <HAL_GPIO_Init+0x1ee>
 80064ac:	2300      	movs	r3, #0
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	f002 0203 	and.w	r2, r2, #3
 80064b4:	0092      	lsls	r2, r2, #2
 80064b6:	4093      	lsls	r3, r2
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80064be:	4937      	ldr	r1, [pc, #220]	; (800659c <HAL_GPIO_Init+0x2dc>)
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	089b      	lsrs	r3, r3, #2
 80064c4:	3302      	adds	r3, #2
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064cc:	4b38      	ldr	r3, [pc, #224]	; (80065b0 <HAL_GPIO_Init+0x2f0>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	43db      	mvns	r3, r3
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	4013      	ands	r3, r2
 80064da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80064f0:	4a2f      	ldr	r2, [pc, #188]	; (80065b0 <HAL_GPIO_Init+0x2f0>)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80064f6:	4b2e      	ldr	r3, [pc, #184]	; (80065b0 <HAL_GPIO_Init+0x2f0>)
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	43db      	mvns	r3, r3
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4013      	ands	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800651a:	4a25      	ldr	r2, [pc, #148]	; (80065b0 <HAL_GPIO_Init+0x2f0>)
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006520:	4b23      	ldr	r3, [pc, #140]	; (80065b0 <HAL_GPIO_Init+0x2f0>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	43db      	mvns	r3, r3
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4013      	ands	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006544:	4a1a      	ldr	r2, [pc, #104]	; (80065b0 <HAL_GPIO_Init+0x2f0>)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800654a:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <HAL_GPIO_Init+0x2f0>)
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	43db      	mvns	r3, r3
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4013      	ands	r3, r2
 8006558:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800656e:	4a10      	ldr	r2, [pc, #64]	; (80065b0 <HAL_GPIO_Init+0x2f0>)
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	3301      	adds	r3, #1
 8006578:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	fa22 f303 	lsr.w	r3, r2, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	f47f aea3 	bne.w	80062d0 <HAL_GPIO_Init+0x10>
  }
}
 800658a:	bf00      	nop
 800658c:	371c      	adds	r7, #28
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40021000 	.word	0x40021000
 800659c:	40010000 	.word	0x40010000
 80065a0:	48000400 	.word	0x48000400
 80065a4:	48000800 	.word	0x48000800
 80065a8:	48000c00 	.word	0x48000c00
 80065ac:	48001000 	.word	0x48001000
 80065b0:	40010400 	.word	0x40010400

080065b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	1d3b      	adds	r3, r7, #4
 80065be:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065c0:	1d3b      	adds	r3, r7, #4
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d102      	bne.n	80065ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	f000 bef4 	b.w	80073b6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065ce:	1d3b      	adds	r3, r7, #4
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 816a 	beq.w	80068b2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80065de:	4bb3      	ldr	r3, [pc, #716]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f003 030c 	and.w	r3, r3, #12
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d00c      	beq.n	8006604 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80065ea:	4bb0      	ldr	r3, [pc, #704]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f003 030c 	and.w	r3, r3, #12
 80065f2:	2b08      	cmp	r3, #8
 80065f4:	d159      	bne.n	80066aa <HAL_RCC_OscConfig+0xf6>
 80065f6:	4bad      	ldr	r3, [pc, #692]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006602:	d152      	bne.n	80066aa <HAL_RCC_OscConfig+0xf6>
 8006604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006608:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800660c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006610:	fa93 f3a3 	rbit	r3, r3
 8006614:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8006618:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800661c:	fab3 f383 	clz	r3, r3
 8006620:	b2db      	uxtb	r3, r3
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	b2db      	uxtb	r3, r3
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b01      	cmp	r3, #1
 800662e:	d102      	bne.n	8006636 <HAL_RCC_OscConfig+0x82>
 8006630:	4b9e      	ldr	r3, [pc, #632]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	e015      	b.n	8006662 <HAL_RCC_OscConfig+0xae>
 8006636:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800663a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800663e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006642:	fa93 f3a3 	rbit	r3, r3
 8006646:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800664a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800664e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006652:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006656:	fa93 f3a3 	rbit	r3, r3
 800665a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800665e:	4b93      	ldr	r3, [pc, #588]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006666:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800666a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800666e:	fa92 f2a2 	rbit	r2, r2
 8006672:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006676:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800667a:	fab2 f282 	clz	r2, r2
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	f042 0220 	orr.w	r2, r2, #32
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	f002 021f 	and.w	r2, r2, #31
 800668a:	2101      	movs	r1, #1
 800668c:	fa01 f202 	lsl.w	r2, r1, r2
 8006690:	4013      	ands	r3, r2
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 810c 	beq.w	80068b0 <HAL_RCC_OscConfig+0x2fc>
 8006698:	1d3b      	adds	r3, r7, #4
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f040 8106 	bne.w	80068b0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	f000 be86 	b.w	80073b6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066aa:	1d3b      	adds	r3, r7, #4
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b4:	d106      	bne.n	80066c4 <HAL_RCC_OscConfig+0x110>
 80066b6:	4b7d      	ldr	r3, [pc, #500]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a7c      	ldr	r2, [pc, #496]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 80066bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	e030      	b.n	8006726 <HAL_RCC_OscConfig+0x172>
 80066c4:	1d3b      	adds	r3, r7, #4
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10c      	bne.n	80066e8 <HAL_RCC_OscConfig+0x134>
 80066ce:	4b77      	ldr	r3, [pc, #476]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a76      	ldr	r2, [pc, #472]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 80066d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	4b74      	ldr	r3, [pc, #464]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a73      	ldr	r2, [pc, #460]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 80066e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	e01e      	b.n	8006726 <HAL_RCC_OscConfig+0x172>
 80066e8:	1d3b      	adds	r3, r7, #4
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066f2:	d10c      	bne.n	800670e <HAL_RCC_OscConfig+0x15a>
 80066f4:	4b6d      	ldr	r3, [pc, #436]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a6c      	ldr	r2, [pc, #432]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 80066fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	4b6a      	ldr	r3, [pc, #424]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a69      	ldr	r2, [pc, #420]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 8006706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	e00b      	b.n	8006726 <HAL_RCC_OscConfig+0x172>
 800670e:	4b67      	ldr	r3, [pc, #412]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a66      	ldr	r2, [pc, #408]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 8006714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	4b64      	ldr	r3, [pc, #400]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a63      	ldr	r2, [pc, #396]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 8006720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006724:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006726:	4b61      	ldr	r3, [pc, #388]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 8006728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672a:	f023 020f 	bic.w	r2, r3, #15
 800672e:	1d3b      	adds	r3, r7, #4
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	495d      	ldr	r1, [pc, #372]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 8006736:	4313      	orrs	r3, r2
 8006738:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800673a:	1d3b      	adds	r3, r7, #4
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d059      	beq.n	80067f8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006744:	f7fe fa6c 	bl	8004c20 <HAL_GetTick>
 8006748:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800674c:	e00a      	b.n	8006764 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800674e:	f7fe fa67 	bl	8004c20 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b64      	cmp	r3, #100	; 0x64
 800675c:	d902      	bls.n	8006764 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	f000 be29 	b.w	80073b6 <HAL_RCC_OscConfig+0xe02>
 8006764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006768:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800676c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006770:	fa93 f3a3 	rbit	r3, r3
 8006774:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006778:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677c:	fab3 f383 	clz	r3, r3
 8006780:	b2db      	uxtb	r3, r3
 8006782:	095b      	lsrs	r3, r3, #5
 8006784:	b2db      	uxtb	r3, r3
 8006786:	f043 0301 	orr.w	r3, r3, #1
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b01      	cmp	r3, #1
 800678e:	d102      	bne.n	8006796 <HAL_RCC_OscConfig+0x1e2>
 8006790:	4b46      	ldr	r3, [pc, #280]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	e015      	b.n	80067c2 <HAL_RCC_OscConfig+0x20e>
 8006796:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800679a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80067a2:	fa93 f3a3 	rbit	r3, r3
 80067a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80067aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067ae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80067b2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80067b6:	fa93 f3a3 	rbit	r3, r3
 80067ba:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80067be:	4b3b      	ldr	r3, [pc, #236]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80067c6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80067ca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80067ce:	fa92 f2a2 	rbit	r2, r2
 80067d2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80067d6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80067da:	fab2 f282 	clz	r2, r2
 80067de:	b2d2      	uxtb	r2, r2
 80067e0:	f042 0220 	orr.w	r2, r2, #32
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	f002 021f 	and.w	r2, r2, #31
 80067ea:	2101      	movs	r1, #1
 80067ec:	fa01 f202 	lsl.w	r2, r1, r2
 80067f0:	4013      	ands	r3, r2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0ab      	beq.n	800674e <HAL_RCC_OscConfig+0x19a>
 80067f6:	e05c      	b.n	80068b2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f8:	f7fe fa12 	bl	8004c20 <HAL_GetTick>
 80067fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006800:	e00a      	b.n	8006818 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006802:	f7fe fa0d 	bl	8004c20 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b64      	cmp	r3, #100	; 0x64
 8006810:	d902      	bls.n	8006818 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	f000 bdcf 	b.w	80073b6 <HAL_RCC_OscConfig+0xe02>
 8006818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800681c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006820:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006824:	fa93 f3a3 	rbit	r3, r3
 8006828:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800682c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006830:	fab3 f383 	clz	r3, r3
 8006834:	b2db      	uxtb	r3, r3
 8006836:	095b      	lsrs	r3, r3, #5
 8006838:	b2db      	uxtb	r3, r3
 800683a:	f043 0301 	orr.w	r3, r3, #1
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b01      	cmp	r3, #1
 8006842:	d102      	bne.n	800684a <HAL_RCC_OscConfig+0x296>
 8006844:	4b19      	ldr	r3, [pc, #100]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	e015      	b.n	8006876 <HAL_RCC_OscConfig+0x2c2>
 800684a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800684e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006852:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006856:	fa93 f3a3 	rbit	r3, r3
 800685a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800685e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006862:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006866:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800686a:	fa93 f3a3 	rbit	r3, r3
 800686e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006872:	4b0e      	ldr	r3, [pc, #56]	; (80068ac <HAL_RCC_OscConfig+0x2f8>)
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800687a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800687e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006882:	fa92 f2a2 	rbit	r2, r2
 8006886:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800688a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800688e:	fab2 f282 	clz	r2, r2
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	f042 0220 	orr.w	r2, r2, #32
 8006898:	b2d2      	uxtb	r2, r2
 800689a:	f002 021f 	and.w	r2, r2, #31
 800689e:	2101      	movs	r1, #1
 80068a0:	fa01 f202 	lsl.w	r2, r1, r2
 80068a4:	4013      	ands	r3, r2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1ab      	bne.n	8006802 <HAL_RCC_OscConfig+0x24e>
 80068aa:	e002      	b.n	80068b2 <HAL_RCC_OscConfig+0x2fe>
 80068ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068b2:	1d3b      	adds	r3, r7, #4
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 816f 	beq.w	8006ba0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80068c2:	4bd0      	ldr	r3, [pc, #832]	; (8006c04 <HAL_RCC_OscConfig+0x650>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f003 030c 	and.w	r3, r3, #12
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00b      	beq.n	80068e6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80068ce:	4bcd      	ldr	r3, [pc, #820]	; (8006c04 <HAL_RCC_OscConfig+0x650>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f003 030c 	and.w	r3, r3, #12
 80068d6:	2b08      	cmp	r3, #8
 80068d8:	d16c      	bne.n	80069b4 <HAL_RCC_OscConfig+0x400>
 80068da:	4bca      	ldr	r3, [pc, #808]	; (8006c04 <HAL_RCC_OscConfig+0x650>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d166      	bne.n	80069b4 <HAL_RCC_OscConfig+0x400>
 80068e6:	2302      	movs	r3, #2
 80068e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80068f0:	fa93 f3a3 	rbit	r3, r3
 80068f4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80068f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068fc:	fab3 f383 	clz	r3, r3
 8006900:	b2db      	uxtb	r3, r3
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	b2db      	uxtb	r3, r3
 8006906:	f043 0301 	orr.w	r3, r3, #1
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b01      	cmp	r3, #1
 800690e:	d102      	bne.n	8006916 <HAL_RCC_OscConfig+0x362>
 8006910:	4bbc      	ldr	r3, [pc, #752]	; (8006c04 <HAL_RCC_OscConfig+0x650>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	e013      	b.n	800693e <HAL_RCC_OscConfig+0x38a>
 8006916:	2302      	movs	r3, #2
 8006918:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800691c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006920:	fa93 f3a3 	rbit	r3, r3
 8006924:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006928:	2302      	movs	r3, #2
 800692a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800692e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006932:	fa93 f3a3 	rbit	r3, r3
 8006936:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800693a:	4bb2      	ldr	r3, [pc, #712]	; (8006c04 <HAL_RCC_OscConfig+0x650>)
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	2202      	movs	r2, #2
 8006940:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006944:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006948:	fa92 f2a2 	rbit	r2, r2
 800694c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006950:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006954:	fab2 f282 	clz	r2, r2
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	f042 0220 	orr.w	r2, r2, #32
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	f002 021f 	and.w	r2, r2, #31
 8006964:	2101      	movs	r1, #1
 8006966:	fa01 f202 	lsl.w	r2, r1, r2
 800696a:	4013      	ands	r3, r2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d007      	beq.n	8006980 <HAL_RCC_OscConfig+0x3cc>
 8006970:	1d3b      	adds	r3, r7, #4
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d002      	beq.n	8006980 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f000 bd1b 	b.w	80073b6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006980:	4ba0      	ldr	r3, [pc, #640]	; (8006c04 <HAL_RCC_OscConfig+0x650>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006988:	1d3b      	adds	r3, r7, #4
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	21f8      	movs	r1, #248	; 0xf8
 8006990:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006994:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006998:	fa91 f1a1 	rbit	r1, r1
 800699c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80069a0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80069a4:	fab1 f181 	clz	r1, r1
 80069a8:	b2c9      	uxtb	r1, r1
 80069aa:	408b      	lsls	r3, r1
 80069ac:	4995      	ldr	r1, [pc, #596]	; (8006c04 <HAL_RCC_OscConfig+0x650>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069b2:	e0f5      	b.n	8006ba0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069b4:	1d3b      	adds	r3, r7, #4
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 8085 	beq.w	8006aca <HAL_RCC_OscConfig+0x516>
 80069c0:	2301      	movs	r3, #1
 80069c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80069ca:	fa93 f3a3 	rbit	r3, r3
 80069ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80069d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069d6:	fab3 f383 	clz	r3, r3
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80069e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	461a      	mov	r2, r3
 80069e8:	2301      	movs	r3, #1
 80069ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ec:	f7fe f918 	bl	8004c20 <HAL_GetTick>
 80069f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069f4:	e00a      	b.n	8006a0c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069f6:	f7fe f913 	bl	8004c20 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d902      	bls.n	8006a0c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	f000 bcd5 	b.w	80073b6 <HAL_RCC_OscConfig+0xe02>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a12:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006a16:	fa93 f3a3 	rbit	r3, r3
 8006a1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006a1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a22:	fab3 f383 	clz	r3, r3
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	095b      	lsrs	r3, r3, #5
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d102      	bne.n	8006a3c <HAL_RCC_OscConfig+0x488>
 8006a36:	4b73      	ldr	r3, [pc, #460]	; (8006c04 <HAL_RCC_OscConfig+0x650>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	e013      	b.n	8006a64 <HAL_RCC_OscConfig+0x4b0>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006a46:	fa93 f3a3 	rbit	r3, r3
 8006a4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006a4e:	2302      	movs	r3, #2
 8006a50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006a54:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006a58:	fa93 f3a3 	rbit	r3, r3
 8006a5c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006a60:	4b68      	ldr	r3, [pc, #416]	; (8006c04 <HAL_RCC_OscConfig+0x650>)
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	2202      	movs	r2, #2
 8006a66:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006a6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006a6e:	fa92 f2a2 	rbit	r2, r2
 8006a72:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006a76:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006a7a:	fab2 f282 	clz	r2, r2
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	f042 0220 	orr.w	r2, r2, #32
 8006a84:	b2d2      	uxtb	r2, r2
 8006a86:	f002 021f 	and.w	r2, r2, #31
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8006a90:	4013      	ands	r3, r2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0af      	beq.n	80069f6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a96:	4b5b      	ldr	r3, [pc, #364]	; (8006c04 <HAL_RCC_OscConfig+0x650>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a9e:	1d3b      	adds	r3, r7, #4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	21f8      	movs	r1, #248	; 0xf8
 8006aa6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aaa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006aae:	fa91 f1a1 	rbit	r1, r1
 8006ab2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006ab6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006aba:	fab1 f181 	clz	r1, r1
 8006abe:	b2c9      	uxtb	r1, r1
 8006ac0:	408b      	lsls	r3, r1
 8006ac2:	4950      	ldr	r1, [pc, #320]	; (8006c04 <HAL_RCC_OscConfig+0x650>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	600b      	str	r3, [r1, #0]
 8006ac8:	e06a      	b.n	8006ba0 <HAL_RCC_OscConfig+0x5ec>
 8006aca:	2301      	movs	r3, #1
 8006acc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006ad4:	fa93 f3a3 	rbit	r3, r3
 8006ad8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006adc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ae0:	fab3 f383 	clz	r3, r3
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006aea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	461a      	mov	r2, r3
 8006af2:	2300      	movs	r3, #0
 8006af4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006af6:	f7fe f893 	bl	8004c20 <HAL_GetTick>
 8006afa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006afe:	e00a      	b.n	8006b16 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b00:	f7fe f88e 	bl	8004c20 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d902      	bls.n	8006b16 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	f000 bc50 	b.w	80073b6 <HAL_RCC_OscConfig+0xe02>
 8006b16:	2302      	movs	r3, #2
 8006b18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006b20:	fa93 f3a3 	rbit	r3, r3
 8006b24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b2c:	fab3 f383 	clz	r3, r3
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	095b      	lsrs	r3, r3, #5
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	f043 0301 	orr.w	r3, r3, #1
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d102      	bne.n	8006b46 <HAL_RCC_OscConfig+0x592>
 8006b40:	4b30      	ldr	r3, [pc, #192]	; (8006c04 <HAL_RCC_OscConfig+0x650>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	e013      	b.n	8006b6e <HAL_RCC_OscConfig+0x5ba>
 8006b46:	2302      	movs	r3, #2
 8006b48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b50:	fa93 f3a3 	rbit	r3, r3
 8006b54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b58:	2302      	movs	r3, #2
 8006b5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b62:	fa93 f3a3 	rbit	r3, r3
 8006b66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006b6a:	4b26      	ldr	r3, [pc, #152]	; (8006c04 <HAL_RCC_OscConfig+0x650>)
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006b74:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006b78:	fa92 f2a2 	rbit	r2, r2
 8006b7c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006b80:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006b84:	fab2 f282 	clz	r2, r2
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	f042 0220 	orr.w	r2, r2, #32
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	f002 021f 	and.w	r2, r2, #31
 8006b94:	2101      	movs	r1, #1
 8006b96:	fa01 f202 	lsl.w	r2, r1, r2
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1af      	bne.n	8006b00 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ba0:	1d3b      	adds	r3, r7, #4
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 80da 	beq.w	8006d64 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bb0:	1d3b      	adds	r3, r7, #4
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d069      	beq.n	8006c8e <HAL_RCC_OscConfig+0x6da>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006bc4:	fa93 f3a3 	rbit	r3, r3
 8006bc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bd0:	fab3 f383 	clz	r3, r3
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <HAL_RCC_OscConfig+0x654>)
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	461a      	mov	r2, r3
 8006be0:	2301      	movs	r3, #1
 8006be2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006be4:	f7fe f81c 	bl	8004c20 <HAL_GetTick>
 8006be8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bec:	e00e      	b.n	8006c0c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bee:	f7fe f817 	bl	8004c20 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d906      	bls.n	8006c0c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e3d9      	b.n	80073b6 <HAL_RCC_OscConfig+0xe02>
 8006c02:	bf00      	nop
 8006c04:	40021000 	.word	0x40021000
 8006c08:	10908120 	.word	0x10908120
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c16:	fa93 f3a3 	rbit	r3, r3
 8006c1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c1e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006c22:	2202      	movs	r2, #2
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	fa93 f2a3 	rbit	r2, r3
 8006c30:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	fa93 f2a3 	rbit	r2, r3
 8006c48:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006c4c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c4e:	4ba5      	ldr	r3, [pc, #660]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c52:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006c56:	2102      	movs	r1, #2
 8006c58:	6019      	str	r1, [r3, #0]
 8006c5a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	fa93 f1a3 	rbit	r1, r3
 8006c64:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006c68:	6019      	str	r1, [r3, #0]
  return result;
 8006c6a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	fab3 f383 	clz	r3, r3
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	f003 031f 	and.w	r3, r3, #31
 8006c80:	2101      	movs	r1, #1
 8006c82:	fa01 f303 	lsl.w	r3, r1, r3
 8006c86:	4013      	ands	r3, r2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d0b0      	beq.n	8006bee <HAL_RCC_OscConfig+0x63a>
 8006c8c:	e06a      	b.n	8006d64 <HAL_RCC_OscConfig+0x7b0>
 8006c8e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006c92:	2201      	movs	r2, #1
 8006c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c96:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	fa93 f2a3 	rbit	r2, r3
 8006ca0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006ca4:	601a      	str	r2, [r3, #0]
  return result;
 8006ca6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006caa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cac:	fab3 f383 	clz	r3, r3
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	4b8c      	ldr	r3, [pc, #560]	; (8006ee8 <HAL_RCC_OscConfig+0x934>)
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	461a      	mov	r2, r3
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cc0:	f7fd ffae 	bl	8004c20 <HAL_GetTick>
 8006cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cc8:	e009      	b.n	8006cde <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cca:	f7fd ffa9 	bl	8004c20 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e36b      	b.n	80073b6 <HAL_RCC_OscConfig+0xe02>
 8006cde:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	fa93 f2a3 	rbit	r2, r3
 8006cf0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	fa93 f2a3 	rbit	r2, r3
 8006d08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006d12:	2202      	movs	r2, #2
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	fa93 f2a3 	rbit	r2, r3
 8006d20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006d24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d26:	4b6f      	ldr	r3, [pc, #444]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d2a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006d2e:	2102      	movs	r1, #2
 8006d30:	6019      	str	r1, [r3, #0]
 8006d32:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	fa93 f1a3 	rbit	r1, r3
 8006d3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006d40:	6019      	str	r1, [r3, #0]
  return result;
 8006d42:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	fab3 f383 	clz	r3, r3
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	f003 031f 	and.w	r3, r3, #31
 8006d58:	2101      	movs	r1, #1
 8006d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5e:	4013      	ands	r3, r2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1b2      	bne.n	8006cca <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d64:	1d3b      	adds	r3, r7, #4
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0304 	and.w	r3, r3, #4
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 8158 	beq.w	8007024 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d74:	2300      	movs	r3, #0
 8006d76:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d7a:	4b5a      	ldr	r3, [pc, #360]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d112      	bne.n	8006dac <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d86:	4b57      	ldr	r3, [pc, #348]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	4a56      	ldr	r2, [pc, #344]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d90:	61d3      	str	r3, [r2, #28]
 8006d92:	4b54      	ldr	r3, [pc, #336]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006d9a:	f107 0308 	add.w	r3, r7, #8
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	f107 0308 	add.w	r3, r7, #8
 8006da4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006da6:	2301      	movs	r3, #1
 8006da8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dac:	4b4f      	ldr	r3, [pc, #316]	; (8006eec <HAL_RCC_OscConfig+0x938>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d11a      	bne.n	8006dee <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006db8:	4b4c      	ldr	r3, [pc, #304]	; (8006eec <HAL_RCC_OscConfig+0x938>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a4b      	ldr	r2, [pc, #300]	; (8006eec <HAL_RCC_OscConfig+0x938>)
 8006dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dc2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dc4:	f7fd ff2c 	bl	8004c20 <HAL_GetTick>
 8006dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dcc:	e009      	b.n	8006de2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dce:	f7fd ff27 	bl	8004c20 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b64      	cmp	r3, #100	; 0x64
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e2e9      	b.n	80073b6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006de2:	4b42      	ldr	r3, [pc, #264]	; (8006eec <HAL_RCC_OscConfig+0x938>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0ef      	beq.n	8006dce <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dee:	1d3b      	adds	r3, r7, #4
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d106      	bne.n	8006e06 <HAL_RCC_OscConfig+0x852>
 8006df8:	4b3a      	ldr	r3, [pc, #232]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	4a39      	ldr	r2, [pc, #228]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006dfe:	f043 0301 	orr.w	r3, r3, #1
 8006e02:	6213      	str	r3, [r2, #32]
 8006e04:	e02f      	b.n	8006e66 <HAL_RCC_OscConfig+0x8b2>
 8006e06:	1d3b      	adds	r3, r7, #4
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10c      	bne.n	8006e2a <HAL_RCC_OscConfig+0x876>
 8006e10:	4b34      	ldr	r3, [pc, #208]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	4a33      	ldr	r2, [pc, #204]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006e16:	f023 0301 	bic.w	r3, r3, #1
 8006e1a:	6213      	str	r3, [r2, #32]
 8006e1c:	4b31      	ldr	r3, [pc, #196]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	4a30      	ldr	r2, [pc, #192]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006e22:	f023 0304 	bic.w	r3, r3, #4
 8006e26:	6213      	str	r3, [r2, #32]
 8006e28:	e01d      	b.n	8006e66 <HAL_RCC_OscConfig+0x8b2>
 8006e2a:	1d3b      	adds	r3, r7, #4
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	2b05      	cmp	r3, #5
 8006e32:	d10c      	bne.n	8006e4e <HAL_RCC_OscConfig+0x89a>
 8006e34:	4b2b      	ldr	r3, [pc, #172]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	4a2a      	ldr	r2, [pc, #168]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006e3a:	f043 0304 	orr.w	r3, r3, #4
 8006e3e:	6213      	str	r3, [r2, #32]
 8006e40:	4b28      	ldr	r3, [pc, #160]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	4a27      	ldr	r2, [pc, #156]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	6213      	str	r3, [r2, #32]
 8006e4c:	e00b      	b.n	8006e66 <HAL_RCC_OscConfig+0x8b2>
 8006e4e:	4b25      	ldr	r3, [pc, #148]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	4a24      	ldr	r2, [pc, #144]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006e54:	f023 0301 	bic.w	r3, r3, #1
 8006e58:	6213      	str	r3, [r2, #32]
 8006e5a:	4b22      	ldr	r3, [pc, #136]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	4a21      	ldr	r2, [pc, #132]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006e60:	f023 0304 	bic.w	r3, r3, #4
 8006e64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e66:	1d3b      	adds	r3, r7, #4
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d06b      	beq.n	8006f48 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e70:	f7fd fed6 	bl	8004c20 <HAL_GetTick>
 8006e74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e78:	e00b      	b.n	8006e92 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e7a:	f7fd fed1 	bl	8004c20 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e291      	b.n	80073b6 <HAL_RCC_OscConfig+0xe02>
 8006e92:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006e96:	2202      	movs	r2, #2
 8006e98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e9a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	fa93 f2a3 	rbit	r2, r3
 8006ea4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006eae:	2202      	movs	r2, #2
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	fa93 f2a3 	rbit	r2, r3
 8006ebc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006ec0:	601a      	str	r2, [r3, #0]
  return result;
 8006ec2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006ec6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ec8:	fab3 f383 	clz	r3, r3
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	095b      	lsrs	r3, r3, #5
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	f043 0302 	orr.w	r3, r3, #2
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d109      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x93c>
 8006edc:	4b01      	ldr	r3, [pc, #4]	; (8006ee4 <HAL_RCC_OscConfig+0x930>)
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	e014      	b.n	8006f0c <HAL_RCC_OscConfig+0x958>
 8006ee2:	bf00      	nop
 8006ee4:	40021000 	.word	0x40021000
 8006ee8:	10908120 	.word	0x10908120
 8006eec:	40007000 	.word	0x40007000
 8006ef0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ef8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	fa93 f2a3 	rbit	r2, r3
 8006f02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	4bbb      	ldr	r3, [pc, #748]	; (80071f8 <HAL_RCC_OscConfig+0xc44>)
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006f10:	2102      	movs	r1, #2
 8006f12:	6011      	str	r1, [r2, #0]
 8006f14:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006f18:	6812      	ldr	r2, [r2, #0]
 8006f1a:	fa92 f1a2 	rbit	r1, r2
 8006f1e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006f22:	6011      	str	r1, [r2, #0]
  return result;
 8006f24:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006f28:	6812      	ldr	r2, [r2, #0]
 8006f2a:	fab2 f282 	clz	r2, r2
 8006f2e:	b2d2      	uxtb	r2, r2
 8006f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f34:	b2d2      	uxtb	r2, r2
 8006f36:	f002 021f 	and.w	r2, r2, #31
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8006f40:	4013      	ands	r3, r2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d099      	beq.n	8006e7a <HAL_RCC_OscConfig+0x8c6>
 8006f46:	e063      	b.n	8007010 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f48:	f7fd fe6a 	bl	8004c20 <HAL_GetTick>
 8006f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f50:	e00b      	b.n	8006f6a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f52:	f7fd fe65 	bl	8004c20 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e225      	b.n	80073b6 <HAL_RCC_OscConfig+0xe02>
 8006f6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006f6e:	2202      	movs	r2, #2
 8006f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	fa93 f2a3 	rbit	r2, r3
 8006f7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006f86:	2202      	movs	r2, #2
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	fa93 f2a3 	rbit	r2, r3
 8006f94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006f98:	601a      	str	r2, [r3, #0]
  return result;
 8006f9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006f9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fa0:	fab3 f383 	clz	r3, r3
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	095b      	lsrs	r3, r3, #5
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	f043 0302 	orr.w	r3, r3, #2
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d102      	bne.n	8006fba <HAL_RCC_OscConfig+0xa06>
 8006fb4:	4b90      	ldr	r3, [pc, #576]	; (80071f8 <HAL_RCC_OscConfig+0xc44>)
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	e00d      	b.n	8006fd6 <HAL_RCC_OscConfig+0xa22>
 8006fba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fc2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	fa93 f2a3 	rbit	r2, r3
 8006fcc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	4b89      	ldr	r3, [pc, #548]	; (80071f8 <HAL_RCC_OscConfig+0xc44>)
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006fda:	2102      	movs	r1, #2
 8006fdc:	6011      	str	r1, [r2, #0]
 8006fde:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006fe2:	6812      	ldr	r2, [r2, #0]
 8006fe4:	fa92 f1a2 	rbit	r1, r2
 8006fe8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006fec:	6011      	str	r1, [r2, #0]
  return result;
 8006fee:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006ff2:	6812      	ldr	r2, [r2, #0]
 8006ff4:	fab2 f282 	clz	r2, r2
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	f002 021f 	and.w	r2, r2, #31
 8007004:	2101      	movs	r1, #1
 8007006:	fa01 f202 	lsl.w	r2, r1, r2
 800700a:	4013      	ands	r3, r2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1a0      	bne.n	8006f52 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007010:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007014:	2b01      	cmp	r3, #1
 8007016:	d105      	bne.n	8007024 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007018:	4b77      	ldr	r3, [pc, #476]	; (80071f8 <HAL_RCC_OscConfig+0xc44>)
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	4a76      	ldr	r2, [pc, #472]	; (80071f8 <HAL_RCC_OscConfig+0xc44>)
 800701e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007022:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007024:	1d3b      	adds	r3, r7, #4
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 81c2 	beq.w	80073b4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007030:	4b71      	ldr	r3, [pc, #452]	; (80071f8 <HAL_RCC_OscConfig+0xc44>)
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f003 030c 	and.w	r3, r3, #12
 8007038:	2b08      	cmp	r3, #8
 800703a:	f000 819c 	beq.w	8007376 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800703e:	1d3b      	adds	r3, r7, #4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	2b02      	cmp	r3, #2
 8007046:	f040 8114 	bne.w	8007272 <HAL_RCC_OscConfig+0xcbe>
 800704a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800704e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007052:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007054:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	fa93 f2a3 	rbit	r2, r3
 800705e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007062:	601a      	str	r2, [r3, #0]
  return result;
 8007064:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007068:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800706a:	fab3 f383 	clz	r3, r3
 800706e:	b2db      	uxtb	r3, r3
 8007070:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007074:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	461a      	mov	r2, r3
 800707c:	2300      	movs	r3, #0
 800707e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007080:	f7fd fdce 	bl	8004c20 <HAL_GetTick>
 8007084:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007088:	e009      	b.n	800709e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800708a:	f7fd fdc9 	bl	8004c20 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e18b      	b.n	80073b6 <HAL_RCC_OscConfig+0xe02>
 800709e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80070a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	fa93 f2a3 	rbit	r2, r3
 80070b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80070b6:	601a      	str	r2, [r3, #0]
  return result;
 80070b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80070bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070be:	fab3 f383 	clz	r3, r3
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	095b      	lsrs	r3, r3, #5
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	f043 0301 	orr.w	r3, r3, #1
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d102      	bne.n	80070d8 <HAL_RCC_OscConfig+0xb24>
 80070d2:	4b49      	ldr	r3, [pc, #292]	; (80071f8 <HAL_RCC_OscConfig+0xc44>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	e01b      	b.n	8007110 <HAL_RCC_OscConfig+0xb5c>
 80070d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80070dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	fa93 f2a3 	rbit	r2, r3
 80070ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80070f0:	601a      	str	r2, [r3, #0]
 80070f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80070f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	fa93 f2a3 	rbit	r2, r3
 8007106:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	4b3a      	ldr	r3, [pc, #232]	; (80071f8 <HAL_RCC_OscConfig+0xc44>)
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007114:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007118:	6011      	str	r1, [r2, #0]
 800711a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800711e:	6812      	ldr	r2, [r2, #0]
 8007120:	fa92 f1a2 	rbit	r1, r2
 8007124:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007128:	6011      	str	r1, [r2, #0]
  return result;
 800712a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800712e:	6812      	ldr	r2, [r2, #0]
 8007130:	fab2 f282 	clz	r2, r2
 8007134:	b2d2      	uxtb	r2, r2
 8007136:	f042 0220 	orr.w	r2, r2, #32
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	f002 021f 	and.w	r2, r2, #31
 8007140:	2101      	movs	r1, #1
 8007142:	fa01 f202 	lsl.w	r2, r1, r2
 8007146:	4013      	ands	r3, r2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d19e      	bne.n	800708a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800714c:	4b2a      	ldr	r3, [pc, #168]	; (80071f8 <HAL_RCC_OscConfig+0xc44>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007154:	1d3b      	adds	r3, r7, #4
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800715a:	1d3b      	adds	r3, r7, #4
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	430b      	orrs	r3, r1
 8007162:	4925      	ldr	r1, [pc, #148]	; (80071f8 <HAL_RCC_OscConfig+0xc44>)
 8007164:	4313      	orrs	r3, r2
 8007166:	604b      	str	r3, [r1, #4]
 8007168:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800716c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007172:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	fa93 f2a3 	rbit	r2, r3
 800717c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007180:	601a      	str	r2, [r3, #0]
  return result;
 8007182:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007186:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007188:	fab3 f383 	clz	r3, r3
 800718c:	b2db      	uxtb	r3, r3
 800718e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007192:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	461a      	mov	r2, r3
 800719a:	2301      	movs	r3, #1
 800719c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800719e:	f7fd fd3f 	bl	8004c20 <HAL_GetTick>
 80071a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80071a6:	e009      	b.n	80071bc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071a8:	f7fd fd3a 	bl	8004c20 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e0fc      	b.n	80073b6 <HAL_RCC_OscConfig+0xe02>
 80071bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80071c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	fa93 f2a3 	rbit	r2, r3
 80071d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80071d4:	601a      	str	r2, [r3, #0]
  return result;
 80071d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80071da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80071dc:	fab3 f383 	clz	r3, r3
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	095b      	lsrs	r3, r3, #5
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	f043 0301 	orr.w	r3, r3, #1
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d105      	bne.n	80071fc <HAL_RCC_OscConfig+0xc48>
 80071f0:	4b01      	ldr	r3, [pc, #4]	; (80071f8 <HAL_RCC_OscConfig+0xc44>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	e01e      	b.n	8007234 <HAL_RCC_OscConfig+0xc80>
 80071f6:	bf00      	nop
 80071f8:	40021000 	.word	0x40021000
 80071fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007200:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007204:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007206:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	fa93 f2a3 	rbit	r2, r3
 8007210:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800721a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	fa93 f2a3 	rbit	r2, r3
 800722a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	4b63      	ldr	r3, [pc, #396]	; (80073c0 <HAL_RCC_OscConfig+0xe0c>)
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007238:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800723c:	6011      	str	r1, [r2, #0]
 800723e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007242:	6812      	ldr	r2, [r2, #0]
 8007244:	fa92 f1a2 	rbit	r1, r2
 8007248:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800724c:	6011      	str	r1, [r2, #0]
  return result;
 800724e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007252:	6812      	ldr	r2, [r2, #0]
 8007254:	fab2 f282 	clz	r2, r2
 8007258:	b2d2      	uxtb	r2, r2
 800725a:	f042 0220 	orr.w	r2, r2, #32
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	f002 021f 	and.w	r2, r2, #31
 8007264:	2101      	movs	r1, #1
 8007266:	fa01 f202 	lsl.w	r2, r1, r2
 800726a:	4013      	ands	r3, r2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d09b      	beq.n	80071a8 <HAL_RCC_OscConfig+0xbf4>
 8007270:	e0a0      	b.n	80073b4 <HAL_RCC_OscConfig+0xe00>
 8007272:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007276:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800727a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800727c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	fa93 f2a3 	rbit	r2, r3
 8007286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800728a:	601a      	str	r2, [r3, #0]
  return result;
 800728c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007290:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007292:	fab3 f383 	clz	r3, r3
 8007296:	b2db      	uxtb	r3, r3
 8007298:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800729c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	461a      	mov	r2, r3
 80072a4:	2300      	movs	r3, #0
 80072a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072a8:	f7fd fcba 	bl	8004c20 <HAL_GetTick>
 80072ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072b0:	e009      	b.n	80072c6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072b2:	f7fd fcb5 	bl	8004c20 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e077      	b.n	80073b6 <HAL_RCC_OscConfig+0xe02>
 80072c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80072ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	fa93 f2a3 	rbit	r2, r3
 80072da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072de:	601a      	str	r2, [r3, #0]
  return result;
 80072e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072e6:	fab3 f383 	clz	r3, r3
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	095b      	lsrs	r3, r3, #5
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	f043 0301 	orr.w	r3, r3, #1
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d102      	bne.n	8007300 <HAL_RCC_OscConfig+0xd4c>
 80072fa:	4b31      	ldr	r3, [pc, #196]	; (80073c0 <HAL_RCC_OscConfig+0xe0c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	e01b      	b.n	8007338 <HAL_RCC_OscConfig+0xd84>
 8007300:	f107 0320 	add.w	r3, r7, #32
 8007304:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007308:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800730a:	f107 0320 	add.w	r3, r7, #32
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	fa93 f2a3 	rbit	r2, r3
 8007314:	f107 031c 	add.w	r3, r7, #28
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	f107 0318 	add.w	r3, r7, #24
 800731e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	f107 0318 	add.w	r3, r7, #24
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	fa93 f2a3 	rbit	r2, r3
 800732e:	f107 0314 	add.w	r3, r7, #20
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	4b22      	ldr	r3, [pc, #136]	; (80073c0 <HAL_RCC_OscConfig+0xe0c>)
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	f107 0210 	add.w	r2, r7, #16
 800733c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007340:	6011      	str	r1, [r2, #0]
 8007342:	f107 0210 	add.w	r2, r7, #16
 8007346:	6812      	ldr	r2, [r2, #0]
 8007348:	fa92 f1a2 	rbit	r1, r2
 800734c:	f107 020c 	add.w	r2, r7, #12
 8007350:	6011      	str	r1, [r2, #0]
  return result;
 8007352:	f107 020c 	add.w	r2, r7, #12
 8007356:	6812      	ldr	r2, [r2, #0]
 8007358:	fab2 f282 	clz	r2, r2
 800735c:	b2d2      	uxtb	r2, r2
 800735e:	f042 0220 	orr.w	r2, r2, #32
 8007362:	b2d2      	uxtb	r2, r2
 8007364:	f002 021f 	and.w	r2, r2, #31
 8007368:	2101      	movs	r1, #1
 800736a:	fa01 f202 	lsl.w	r2, r1, r2
 800736e:	4013      	ands	r3, r2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d19e      	bne.n	80072b2 <HAL_RCC_OscConfig+0xcfe>
 8007374:	e01e      	b.n	80073b4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007376:	1d3b      	adds	r3, r7, #4
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e018      	b.n	80073b6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007384:	4b0e      	ldr	r3, [pc, #56]	; (80073c0 <HAL_RCC_OscConfig+0xe0c>)
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800738c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007390:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007394:	1d3b      	adds	r3, r7, #4
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	429a      	cmp	r2, r3
 800739c:	d108      	bne.n	80073b0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800739e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80073a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80073a6:	1d3b      	adds	r3, r7, #4
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d001      	beq.n	80073b4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e000      	b.n	80073b6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	40021000 	.word	0x40021000

080073c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b09e      	sub	sp, #120	; 0x78
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e162      	b.n	80076a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073dc:	4b90      	ldr	r3, [pc, #576]	; (8007620 <HAL_RCC_ClockConfig+0x25c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0307 	and.w	r3, r3, #7
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d910      	bls.n	800740c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ea:	4b8d      	ldr	r3, [pc, #564]	; (8007620 <HAL_RCC_ClockConfig+0x25c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f023 0207 	bic.w	r2, r3, #7
 80073f2:	498b      	ldr	r1, [pc, #556]	; (8007620 <HAL_RCC_ClockConfig+0x25c>)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073fa:	4b89      	ldr	r3, [pc, #548]	; (8007620 <HAL_RCC_ClockConfig+0x25c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	429a      	cmp	r2, r3
 8007406:	d001      	beq.n	800740c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e14a      	b.n	80076a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d008      	beq.n	800742a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007418:	4b82      	ldr	r3, [pc, #520]	; (8007624 <HAL_RCC_ClockConfig+0x260>)
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	497f      	ldr	r1, [pc, #508]	; (8007624 <HAL_RCC_ClockConfig+0x260>)
 8007426:	4313      	orrs	r3, r2
 8007428:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 80dc 	beq.w	80075f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d13c      	bne.n	80074ba <HAL_RCC_ClockConfig+0xf6>
 8007440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007444:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007448:	fa93 f3a3 	rbit	r3, r3
 800744c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800744e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007450:	fab3 f383 	clz	r3, r3
 8007454:	b2db      	uxtb	r3, r3
 8007456:	095b      	lsrs	r3, r3, #5
 8007458:	b2db      	uxtb	r3, r3
 800745a:	f043 0301 	orr.w	r3, r3, #1
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	d102      	bne.n	800746a <HAL_RCC_ClockConfig+0xa6>
 8007464:	4b6f      	ldr	r3, [pc, #444]	; (8007624 <HAL_RCC_ClockConfig+0x260>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	e00f      	b.n	800748a <HAL_RCC_ClockConfig+0xc6>
 800746a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800746e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007470:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007472:	fa93 f3a3 	rbit	r3, r3
 8007476:	667b      	str	r3, [r7, #100]	; 0x64
 8007478:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800747c:	663b      	str	r3, [r7, #96]	; 0x60
 800747e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007480:	fa93 f3a3 	rbit	r3, r3
 8007484:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007486:	4b67      	ldr	r3, [pc, #412]	; (8007624 <HAL_RCC_ClockConfig+0x260>)
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800748e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007490:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007492:	fa92 f2a2 	rbit	r2, r2
 8007496:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007498:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800749a:	fab2 f282 	clz	r2, r2
 800749e:	b2d2      	uxtb	r2, r2
 80074a0:	f042 0220 	orr.w	r2, r2, #32
 80074a4:	b2d2      	uxtb	r2, r2
 80074a6:	f002 021f 	and.w	r2, r2, #31
 80074aa:	2101      	movs	r1, #1
 80074ac:	fa01 f202 	lsl.w	r2, r1, r2
 80074b0:	4013      	ands	r3, r2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d17b      	bne.n	80075ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e0f3      	b.n	80076a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d13c      	bne.n	800753c <HAL_RCC_ClockConfig+0x178>
 80074c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ca:	fa93 f3a3 	rbit	r3, r3
 80074ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80074d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074d2:	fab3 f383 	clz	r3, r3
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	095b      	lsrs	r3, r3, #5
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	f043 0301 	orr.w	r3, r3, #1
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d102      	bne.n	80074ec <HAL_RCC_ClockConfig+0x128>
 80074e6:	4b4f      	ldr	r3, [pc, #316]	; (8007624 <HAL_RCC_ClockConfig+0x260>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	e00f      	b.n	800750c <HAL_RCC_ClockConfig+0x148>
 80074ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074f4:	fa93 f3a3 	rbit	r3, r3
 80074f8:	647b      	str	r3, [r7, #68]	; 0x44
 80074fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007502:	fa93 f3a3 	rbit	r3, r3
 8007506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007508:	4b46      	ldr	r3, [pc, #280]	; (8007624 <HAL_RCC_ClockConfig+0x260>)
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007510:	63ba      	str	r2, [r7, #56]	; 0x38
 8007512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007514:	fa92 f2a2 	rbit	r2, r2
 8007518:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800751a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800751c:	fab2 f282 	clz	r2, r2
 8007520:	b2d2      	uxtb	r2, r2
 8007522:	f042 0220 	orr.w	r2, r2, #32
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	f002 021f 	and.w	r2, r2, #31
 800752c:	2101      	movs	r1, #1
 800752e:	fa01 f202 	lsl.w	r2, r1, r2
 8007532:	4013      	ands	r3, r2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d13a      	bne.n	80075ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e0b2      	b.n	80076a2 <HAL_RCC_ClockConfig+0x2de>
 800753c:	2302      	movs	r3, #2
 800753e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	fa93 f3a3 	rbit	r3, r3
 8007546:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800754a:	fab3 f383 	clz	r3, r3
 800754e:	b2db      	uxtb	r3, r3
 8007550:	095b      	lsrs	r3, r3, #5
 8007552:	b2db      	uxtb	r3, r3
 8007554:	f043 0301 	orr.w	r3, r3, #1
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b01      	cmp	r3, #1
 800755c:	d102      	bne.n	8007564 <HAL_RCC_ClockConfig+0x1a0>
 800755e:	4b31      	ldr	r3, [pc, #196]	; (8007624 <HAL_RCC_ClockConfig+0x260>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	e00d      	b.n	8007580 <HAL_RCC_ClockConfig+0x1bc>
 8007564:	2302      	movs	r3, #2
 8007566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756a:	fa93 f3a3 	rbit	r3, r3
 800756e:	627b      	str	r3, [r7, #36]	; 0x24
 8007570:	2302      	movs	r3, #2
 8007572:	623b      	str	r3, [r7, #32]
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	fa93 f3a3 	rbit	r3, r3
 800757a:	61fb      	str	r3, [r7, #28]
 800757c:	4b29      	ldr	r3, [pc, #164]	; (8007624 <HAL_RCC_ClockConfig+0x260>)
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	2202      	movs	r2, #2
 8007582:	61ba      	str	r2, [r7, #24]
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	fa92 f2a2 	rbit	r2, r2
 800758a:	617a      	str	r2, [r7, #20]
  return result;
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	fab2 f282 	clz	r2, r2
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	f042 0220 	orr.w	r2, r2, #32
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	f002 021f 	and.w	r2, r2, #31
 800759e:	2101      	movs	r1, #1
 80075a0:	fa01 f202 	lsl.w	r2, r1, r2
 80075a4:	4013      	ands	r3, r2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e079      	b.n	80076a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075ae:	4b1d      	ldr	r3, [pc, #116]	; (8007624 <HAL_RCC_ClockConfig+0x260>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f023 0203 	bic.w	r2, r3, #3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	491a      	ldr	r1, [pc, #104]	; (8007624 <HAL_RCC_ClockConfig+0x260>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075c0:	f7fd fb2e 	bl	8004c20 <HAL_GetTick>
 80075c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075c6:	e00a      	b.n	80075de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075c8:	f7fd fb2a 	bl	8004c20 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d901      	bls.n	80075de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e061      	b.n	80076a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075de:	4b11      	ldr	r3, [pc, #68]	; (8007624 <HAL_RCC_ClockConfig+0x260>)
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f003 020c 	and.w	r2, r3, #12
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d1eb      	bne.n	80075c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075f0:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <HAL_RCC_ClockConfig+0x25c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d214      	bcs.n	8007628 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075fe:	4b08      	ldr	r3, [pc, #32]	; (8007620 <HAL_RCC_ClockConfig+0x25c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f023 0207 	bic.w	r2, r3, #7
 8007606:	4906      	ldr	r1, [pc, #24]	; (8007620 <HAL_RCC_ClockConfig+0x25c>)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	4313      	orrs	r3, r2
 800760c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800760e:	4b04      	ldr	r3, [pc, #16]	; (8007620 <HAL_RCC_ClockConfig+0x25c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	429a      	cmp	r2, r3
 800761a:	d005      	beq.n	8007628 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e040      	b.n	80076a2 <HAL_RCC_ClockConfig+0x2de>
 8007620:	40022000 	.word	0x40022000
 8007624:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b00      	cmp	r3, #0
 8007632:	d008      	beq.n	8007646 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007634:	4b1d      	ldr	r3, [pc, #116]	; (80076ac <HAL_RCC_ClockConfig+0x2e8>)
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	491a      	ldr	r1, [pc, #104]	; (80076ac <HAL_RCC_ClockConfig+0x2e8>)
 8007642:	4313      	orrs	r3, r2
 8007644:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0308 	and.w	r3, r3, #8
 800764e:	2b00      	cmp	r3, #0
 8007650:	d009      	beq.n	8007666 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007652:	4b16      	ldr	r3, [pc, #88]	; (80076ac <HAL_RCC_ClockConfig+0x2e8>)
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	4912      	ldr	r1, [pc, #72]	; (80076ac <HAL_RCC_ClockConfig+0x2e8>)
 8007662:	4313      	orrs	r3, r2
 8007664:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007666:	f000 f829 	bl	80076bc <HAL_RCC_GetSysClockFreq>
 800766a:	4601      	mov	r1, r0
 800766c:	4b0f      	ldr	r3, [pc, #60]	; (80076ac <HAL_RCC_ClockConfig+0x2e8>)
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007674:	22f0      	movs	r2, #240	; 0xf0
 8007676:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	fa92 f2a2 	rbit	r2, r2
 800767e:	60fa      	str	r2, [r7, #12]
  return result;
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	fab2 f282 	clz	r2, r2
 8007686:	b2d2      	uxtb	r2, r2
 8007688:	40d3      	lsrs	r3, r2
 800768a:	4a09      	ldr	r2, [pc, #36]	; (80076b0 <HAL_RCC_ClockConfig+0x2ec>)
 800768c:	5cd3      	ldrb	r3, [r2, r3]
 800768e:	fa21 f303 	lsr.w	r3, r1, r3
 8007692:	4a08      	ldr	r2, [pc, #32]	; (80076b4 <HAL_RCC_ClockConfig+0x2f0>)
 8007694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007696:	4b08      	ldr	r3, [pc, #32]	; (80076b8 <HAL_RCC_ClockConfig+0x2f4>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4618      	mov	r0, r3
 800769c:	f7fd fa7c 	bl	8004b98 <HAL_InitTick>
  
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3778      	adds	r7, #120	; 0x78
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	40021000 	.word	0x40021000
 80076b0:	0800dc80 	.word	0x0800dc80
 80076b4:	20000690 	.word	0x20000690
 80076b8:	20000694 	.word	0x20000694

080076bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076bc:	b480      	push	{r7}
 80076be:	b08b      	sub	sp, #44	; 0x2c
 80076c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	61fb      	str	r3, [r7, #28]
 80076c6:	2300      	movs	r3, #0
 80076c8:	61bb      	str	r3, [r7, #24]
 80076ca:	2300      	movs	r3, #0
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24
 80076ce:	2300      	movs	r3, #0
 80076d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80076d6:	4b29      	ldr	r3, [pc, #164]	; (800777c <HAL_RCC_GetSysClockFreq+0xc0>)
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f003 030c 	and.w	r3, r3, #12
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d002      	beq.n	80076ec <HAL_RCC_GetSysClockFreq+0x30>
 80076e6:	2b08      	cmp	r3, #8
 80076e8:	d003      	beq.n	80076f2 <HAL_RCC_GetSysClockFreq+0x36>
 80076ea:	e03c      	b.n	8007766 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80076ec:	4b24      	ldr	r3, [pc, #144]	; (8007780 <HAL_RCC_GetSysClockFreq+0xc4>)
 80076ee:	623b      	str	r3, [r7, #32]
      break;
 80076f0:	e03c      	b.n	800776c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80076f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80076fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	fa92 f2a2 	rbit	r2, r2
 8007704:	607a      	str	r2, [r7, #4]
  return result;
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	fab2 f282 	clz	r2, r2
 800770c:	b2d2      	uxtb	r2, r2
 800770e:	40d3      	lsrs	r3, r2
 8007710:	4a1c      	ldr	r2, [pc, #112]	; (8007784 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007712:	5cd3      	ldrb	r3, [r2, r3]
 8007714:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007716:	4b19      	ldr	r3, [pc, #100]	; (800777c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	220f      	movs	r2, #15
 8007720:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	fa92 f2a2 	rbit	r2, r2
 8007728:	60fa      	str	r2, [r7, #12]
  return result;
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	fab2 f282 	clz	r2, r2
 8007730:	b2d2      	uxtb	r2, r2
 8007732:	40d3      	lsrs	r3, r2
 8007734:	4a14      	ldr	r2, [pc, #80]	; (8007788 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007736:	5cd3      	ldrb	r3, [r2, r3]
 8007738:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d008      	beq.n	8007756 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007744:	4a0e      	ldr	r2, [pc, #56]	; (8007780 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	fbb2 f2f3 	udiv	r2, r2, r3
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	fb02 f303 	mul.w	r3, r2, r3
 8007752:	627b      	str	r3, [r7, #36]	; 0x24
 8007754:	e004      	b.n	8007760 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	4a0c      	ldr	r2, [pc, #48]	; (800778c <HAL_RCC_GetSysClockFreq+0xd0>)
 800775a:	fb02 f303 	mul.w	r3, r2, r3
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	623b      	str	r3, [r7, #32]
      break;
 8007764:	e002      	b.n	800776c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007766:	4b06      	ldr	r3, [pc, #24]	; (8007780 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007768:	623b      	str	r3, [r7, #32]
      break;
 800776a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800776c:	6a3b      	ldr	r3, [r7, #32]
}
 800776e:	4618      	mov	r0, r3
 8007770:	372c      	adds	r7, #44	; 0x2c
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40021000 	.word	0x40021000
 8007780:	007a1200 	.word	0x007a1200
 8007784:	0800dc98 	.word	0x0800dc98
 8007788:	0800dca8 	.word	0x0800dca8
 800778c:	003d0900 	.word	0x003d0900

08007790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007790:	b480      	push	{r7}
 8007792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007794:	4b03      	ldr	r3, [pc, #12]	; (80077a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007796:	681b      	ldr	r3, [r3, #0]
}
 8007798:	4618      	mov	r0, r3
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000690 	.word	0x20000690

080077a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80077ae:	f7ff ffef 	bl	8007790 <HAL_RCC_GetHCLKFreq>
 80077b2:	4601      	mov	r1, r0
 80077b4:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80077c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	fa92 f2a2 	rbit	r2, r2
 80077c8:	603a      	str	r2, [r7, #0]
  return result;
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	fab2 f282 	clz	r2, r2
 80077d0:	b2d2      	uxtb	r2, r2
 80077d2:	40d3      	lsrs	r3, r2
 80077d4:	4a04      	ldr	r2, [pc, #16]	; (80077e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80077d6:	5cd3      	ldrb	r3, [r2, r3]
 80077d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	40021000 	.word	0x40021000
 80077e8:	0800dc90 	.word	0x0800dc90

080077ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80077f2:	f7ff ffcd 	bl	8007790 <HAL_RCC_GetHCLKFreq>
 80077f6:	4601      	mov	r1, r0
 80077f8:	4b0b      	ldr	r3, [pc, #44]	; (8007828 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007800:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007804:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	fa92 f2a2 	rbit	r2, r2
 800780c:	603a      	str	r2, [r7, #0]
  return result;
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	fab2 f282 	clz	r2, r2
 8007814:	b2d2      	uxtb	r2, r2
 8007816:	40d3      	lsrs	r3, r2
 8007818:	4a04      	ldr	r2, [pc, #16]	; (800782c <HAL_RCC_GetPCLK2Freq+0x40>)
 800781a:	5cd3      	ldrb	r3, [r2, r3]
 800781c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	40021000 	.word	0x40021000
 800782c:	0800dc90 	.word	0x0800dc90

08007830 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b092      	sub	sp, #72	; 0x48
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 80d7 	beq.w	80079fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800784e:	2300      	movs	r3, #0
 8007850:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007854:	4b4e      	ldr	r3, [pc, #312]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007856:	69db      	ldr	r3, [r3, #28]
 8007858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10e      	bne.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007860:	4b4b      	ldr	r3, [pc, #300]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007862:	69db      	ldr	r3, [r3, #28]
 8007864:	4a4a      	ldr	r2, [pc, #296]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800786a:	61d3      	str	r3, [r2, #28]
 800786c:	4b48      	ldr	r3, [pc, #288]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007874:	60bb      	str	r3, [r7, #8]
 8007876:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007878:	2301      	movs	r3, #1
 800787a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800787e:	4b45      	ldr	r3, [pc, #276]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007886:	2b00      	cmp	r3, #0
 8007888:	d118      	bne.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800788a:	4b42      	ldr	r3, [pc, #264]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a41      	ldr	r2, [pc, #260]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007894:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007896:	f7fd f9c3 	bl	8004c20 <HAL_GetTick>
 800789a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800789c:	e008      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800789e:	f7fd f9bf 	bl	8004c20 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	2b64      	cmp	r3, #100	; 0x64
 80078aa:	d901      	bls.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e169      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078b0:	4b38      	ldr	r3, [pc, #224]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0f0      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80078bc:	4b34      	ldr	r3, [pc, #208]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80078c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f000 8084 	beq.w	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078d8:	429a      	cmp	r2, r3
 80078da:	d07c      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078dc:	4b2c      	ldr	r3, [pc, #176]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80078ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	fa93 f3a3 	rbit	r3, r3
 80078f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80078f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80078f6:	fab3 f383 	clz	r3, r3
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	461a      	mov	r2, r3
 80078fe:	4b26      	ldr	r3, [pc, #152]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007900:	4413      	add	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	461a      	mov	r2, r3
 8007906:	2301      	movs	r3, #1
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800790e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007912:	fa93 f3a3 	rbit	r3, r3
 8007916:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800791a:	fab3 f383 	clz	r3, r3
 800791e:	b2db      	uxtb	r3, r3
 8007920:	461a      	mov	r2, r3
 8007922:	4b1d      	ldr	r3, [pc, #116]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007924:	4413      	add	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	461a      	mov	r2, r3
 800792a:	2300      	movs	r3, #0
 800792c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800792e:	4a18      	ldr	r2, [pc, #96]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007932:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	d04b      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800793e:	f7fd f96f 	bl	8004c20 <HAL_GetTick>
 8007942:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007944:	e00a      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007946:	f7fd f96b 	bl	8004c20 <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	f241 3288 	movw	r2, #5000	; 0x1388
 8007954:	4293      	cmp	r3, r2
 8007956:	d901      	bls.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e113      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800795c:	2302      	movs	r3, #2
 800795e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	fa93 f3a3 	rbit	r3, r3
 8007966:	627b      	str	r3, [r7, #36]	; 0x24
 8007968:	2302      	movs	r3, #2
 800796a:	623b      	str	r3, [r7, #32]
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	fa93 f3a3 	rbit	r3, r3
 8007972:	61fb      	str	r3, [r7, #28]
  return result;
 8007974:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007976:	fab3 f383 	clz	r3, r3
 800797a:	b2db      	uxtb	r3, r3
 800797c:	095b      	lsrs	r3, r3, #5
 800797e:	b2db      	uxtb	r3, r3
 8007980:	f043 0302 	orr.w	r3, r3, #2
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b02      	cmp	r3, #2
 8007988:	d108      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800798a:	4b01      	ldr	r3, [pc, #4]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	e00d      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007990:	40021000 	.word	0x40021000
 8007994:	40007000 	.word	0x40007000
 8007998:	10908100 	.word	0x10908100
 800799c:	2302      	movs	r3, #2
 800799e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	fa93 f3a3 	rbit	r3, r3
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	4b78      	ldr	r3, [pc, #480]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	2202      	movs	r2, #2
 80079ae:	613a      	str	r2, [r7, #16]
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	fa92 f2a2 	rbit	r2, r2
 80079b6:	60fa      	str	r2, [r7, #12]
  return result;
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	fab2 f282 	clz	r2, r2
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079c4:	b2d2      	uxtb	r2, r2
 80079c6:	f002 021f 	and.w	r2, r2, #31
 80079ca:	2101      	movs	r1, #1
 80079cc:	fa01 f202 	lsl.w	r2, r1, r2
 80079d0:	4013      	ands	r3, r2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d0b7      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80079d6:	4b6d      	ldr	r3, [pc, #436]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	496a      	ldr	r1, [pc, #424]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80079e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d105      	bne.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079f0:	4b66      	ldr	r3, [pc, #408]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079f2:	69db      	ldr	r3, [r3, #28]
 80079f4:	4a65      	ldr	r2, [pc, #404]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d008      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a08:	4b60      	ldr	r3, [pc, #384]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0c:	f023 0203 	bic.w	r2, r3, #3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	495d      	ldr	r1, [pc, #372]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d008      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a26:	4b59      	ldr	r3, [pc, #356]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	4956      	ldr	r1, [pc, #344]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d008      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a44:	4b51      	ldr	r3, [pc, #324]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	494e      	ldr	r1, [pc, #312]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0320 	and.w	r3, r3, #32
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d008      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a62:	4b4a      	ldr	r3, [pc, #296]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a66:	f023 0210 	bic.w	r2, r3, #16
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	4947      	ldr	r1, [pc, #284]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d008      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007a80:	4b42      	ldr	r3, [pc, #264]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8c:	493f      	ldr	r1, [pc, #252]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d008      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a9e:	4b3b      	ldr	r3, [pc, #236]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa2:	f023 0220 	bic.w	r2, r3, #32
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	4938      	ldr	r1, [pc, #224]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007aac:	4313      	orrs	r3, r2
 8007aae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0308 	and.w	r3, r3, #8
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d008      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007abc:	4b33      	ldr	r3, [pc, #204]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	4930      	ldr	r1, [pc, #192]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0310 	and.w	r3, r3, #16
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d008      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007ada:	4b2c      	ldr	r3, [pc, #176]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ade:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	4929      	ldr	r1, [pc, #164]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d008      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007af8:	4b24      	ldr	r3, [pc, #144]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b04:	4921      	ldr	r1, [pc, #132]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d008      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007b16:	4b1d      	ldr	r3, [pc, #116]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	491a      	ldr	r1, [pc, #104]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d008      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007b34:	4b15      	ldr	r3, [pc, #84]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b38:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	4912      	ldr	r1, [pc, #72]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d008      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007b52:	4b0e      	ldr	r3, [pc, #56]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	490b      	ldr	r1, [pc, #44]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d008      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007b70:	4b06      	ldr	r3, [pc, #24]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7c:	4903      	ldr	r1, [pc, #12]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3748      	adds	r7, #72	; 0x48
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	40021000 	.word	0x40021000

08007b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e01d      	b.n	8007bde <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d106      	bne.n	8007bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7fb fcfc 	bl	80035b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	3304      	adds	r3, #4
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4610      	mov	r0, r2
 8007bd0:	f000 f998 	bl	8007f04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b082      	sub	sp, #8
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e01d      	b.n	8007c34 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d106      	bne.n	8007c12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f815 	bl	8007c3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2202      	movs	r2, #2
 8007c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	3304      	adds	r3, #4
 8007c22:	4619      	mov	r1, r3
 8007c24:	4610      	mov	r0, r2
 8007c26:	f000 f96d 	bl	8007f04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007c66:	2302      	movs	r3, #2
 8007c68:	e105      	b.n	8007e76 <HAL_TIM_PWM_ConfigChannel+0x226>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2202      	movs	r2, #2
 8007c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b14      	cmp	r3, #20
 8007c7e:	f200 80f0 	bhi.w	8007e62 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007c82:	a201      	add	r2, pc, #4	; (adr r2, 8007c88 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c88:	08007cdd 	.word	0x08007cdd
 8007c8c:	08007e63 	.word	0x08007e63
 8007c90:	08007e63 	.word	0x08007e63
 8007c94:	08007e63 	.word	0x08007e63
 8007c98:	08007d1d 	.word	0x08007d1d
 8007c9c:	08007e63 	.word	0x08007e63
 8007ca0:	08007e63 	.word	0x08007e63
 8007ca4:	08007e63 	.word	0x08007e63
 8007ca8:	08007d5f 	.word	0x08007d5f
 8007cac:	08007e63 	.word	0x08007e63
 8007cb0:	08007e63 	.word	0x08007e63
 8007cb4:	08007e63 	.word	0x08007e63
 8007cb8:	08007d9f 	.word	0x08007d9f
 8007cbc:	08007e63 	.word	0x08007e63
 8007cc0:	08007e63 	.word	0x08007e63
 8007cc4:	08007e63 	.word	0x08007e63
 8007cc8:	08007de1 	.word	0x08007de1
 8007ccc:	08007e63 	.word	0x08007e63
 8007cd0:	08007e63 	.word	0x08007e63
 8007cd4:	08007e63 	.word	0x08007e63
 8007cd8:	08007e21 	.word	0x08007e21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68b9      	ldr	r1, [r7, #8]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 f99e 	bl	8008024 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	699a      	ldr	r2, [r3, #24]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0208 	orr.w	r2, r2, #8
 8007cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699a      	ldr	r2, [r3, #24]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 0204 	bic.w	r2, r2, #4
 8007d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6999      	ldr	r1, [r3, #24]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	691a      	ldr	r2, [r3, #16]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	619a      	str	r2, [r3, #24]
      break;
 8007d1a:	e0a3      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68b9      	ldr	r1, [r7, #8]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 fa0e 	bl	8008144 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	699a      	ldr	r2, [r3, #24]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	699a      	ldr	r2, [r3, #24]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6999      	ldr	r1, [r3, #24]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	021a      	lsls	r2, r3, #8
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	619a      	str	r2, [r3, #24]
      break;
 8007d5c:	e082      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68b9      	ldr	r1, [r7, #8]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 fa77 	bl	8008258 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	69da      	ldr	r2, [r3, #28]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f042 0208 	orr.w	r2, r2, #8
 8007d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	69da      	ldr	r2, [r3, #28]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 0204 	bic.w	r2, r2, #4
 8007d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	69d9      	ldr	r1, [r3, #28]
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	61da      	str	r2, [r3, #28]
      break;
 8007d9c:	e062      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68b9      	ldr	r1, [r7, #8]
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 fadf 	bl	8008368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	69da      	ldr	r2, [r3, #28]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69da      	ldr	r2, [r3, #28]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	69d9      	ldr	r1, [r3, #28]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	021a      	lsls	r2, r3, #8
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	61da      	str	r2, [r3, #28]
      break;
 8007dde:	e041      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68b9      	ldr	r1, [r7, #8]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fb28 	bl	800843c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0208 	orr.w	r2, r2, #8
 8007dfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0204 	bic.w	r2, r2, #4
 8007e0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	691a      	ldr	r2, [r3, #16]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e1e:	e021      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 fb6c 	bl	8008504 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	021a      	lsls	r2, r3, #8
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e60:	e000      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8007e62:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop

08007e80 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e031      	b.n	8007efc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fb90 	bl	80085d0 <TIM_SlaveTimer_SetConfig>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d009      	beq.n	8007eca <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e018      	b.n	8007efc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68da      	ldr	r2, [r3, #12]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ed8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68da      	ldr	r2, [r3, #12]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ee8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a3c      	ldr	r2, [pc, #240]	; (8008008 <TIM_Base_SetConfig+0x104>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d00f      	beq.n	8007f3c <TIM_Base_SetConfig+0x38>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f22:	d00b      	beq.n	8007f3c <TIM_Base_SetConfig+0x38>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a39      	ldr	r2, [pc, #228]	; (800800c <TIM_Base_SetConfig+0x108>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d007      	beq.n	8007f3c <TIM_Base_SetConfig+0x38>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a38      	ldr	r2, [pc, #224]	; (8008010 <TIM_Base_SetConfig+0x10c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d003      	beq.n	8007f3c <TIM_Base_SetConfig+0x38>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a37      	ldr	r2, [pc, #220]	; (8008014 <TIM_Base_SetConfig+0x110>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d108      	bne.n	8007f4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a2d      	ldr	r2, [pc, #180]	; (8008008 <TIM_Base_SetConfig+0x104>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d01b      	beq.n	8007f8e <TIM_Base_SetConfig+0x8a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f5c:	d017      	beq.n	8007f8e <TIM_Base_SetConfig+0x8a>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a2a      	ldr	r2, [pc, #168]	; (800800c <TIM_Base_SetConfig+0x108>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d013      	beq.n	8007f8e <TIM_Base_SetConfig+0x8a>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a29      	ldr	r2, [pc, #164]	; (8008010 <TIM_Base_SetConfig+0x10c>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d00f      	beq.n	8007f8e <TIM_Base_SetConfig+0x8a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a28      	ldr	r2, [pc, #160]	; (8008014 <TIM_Base_SetConfig+0x110>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d00b      	beq.n	8007f8e <TIM_Base_SetConfig+0x8a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a27      	ldr	r2, [pc, #156]	; (8008018 <TIM_Base_SetConfig+0x114>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d007      	beq.n	8007f8e <TIM_Base_SetConfig+0x8a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a26      	ldr	r2, [pc, #152]	; (800801c <TIM_Base_SetConfig+0x118>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d003      	beq.n	8007f8e <TIM_Base_SetConfig+0x8a>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a25      	ldr	r2, [pc, #148]	; (8008020 <TIM_Base_SetConfig+0x11c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d108      	bne.n	8007fa0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	689a      	ldr	r2, [r3, #8]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a10      	ldr	r2, [pc, #64]	; (8008008 <TIM_Base_SetConfig+0x104>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00f      	beq.n	8007fec <TIM_Base_SetConfig+0xe8>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a11      	ldr	r2, [pc, #68]	; (8008014 <TIM_Base_SetConfig+0x110>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00b      	beq.n	8007fec <TIM_Base_SetConfig+0xe8>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a10      	ldr	r2, [pc, #64]	; (8008018 <TIM_Base_SetConfig+0x114>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d007      	beq.n	8007fec <TIM_Base_SetConfig+0xe8>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a0f      	ldr	r2, [pc, #60]	; (800801c <TIM_Base_SetConfig+0x118>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d003      	beq.n	8007fec <TIM_Base_SetConfig+0xe8>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a0e      	ldr	r2, [pc, #56]	; (8008020 <TIM_Base_SetConfig+0x11c>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d103      	bne.n	8007ff4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	691a      	ldr	r2, [r3, #16]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	615a      	str	r2, [r3, #20]
}
 8007ffa:	bf00      	nop
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	40012c00 	.word	0x40012c00
 800800c:	40000400 	.word	0x40000400
 8008010:	40000800 	.word	0x40000800
 8008014:	40013400 	.word	0x40013400
 8008018:	40014000 	.word	0x40014000
 800801c:	40014400 	.word	0x40014400
 8008020:	40014800 	.word	0x40014800

08008024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	f023 0201 	bic.w	r2, r3, #1
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 0303 	bic.w	r3, r3, #3
 800805e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	4313      	orrs	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f023 0302 	bic.w	r3, r3, #2
 8008070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	4313      	orrs	r3, r2
 800807a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a2c      	ldr	r2, [pc, #176]	; (8008130 <TIM_OC1_SetConfig+0x10c>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d00f      	beq.n	80080a4 <TIM_OC1_SetConfig+0x80>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a2b      	ldr	r2, [pc, #172]	; (8008134 <TIM_OC1_SetConfig+0x110>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d00b      	beq.n	80080a4 <TIM_OC1_SetConfig+0x80>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a2a      	ldr	r2, [pc, #168]	; (8008138 <TIM_OC1_SetConfig+0x114>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d007      	beq.n	80080a4 <TIM_OC1_SetConfig+0x80>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a29      	ldr	r2, [pc, #164]	; (800813c <TIM_OC1_SetConfig+0x118>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d003      	beq.n	80080a4 <TIM_OC1_SetConfig+0x80>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a28      	ldr	r2, [pc, #160]	; (8008140 <TIM_OC1_SetConfig+0x11c>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d10c      	bne.n	80080be <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	f023 0308 	bic.w	r3, r3, #8
 80080aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f023 0304 	bic.w	r3, r3, #4
 80080bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a1b      	ldr	r2, [pc, #108]	; (8008130 <TIM_OC1_SetConfig+0x10c>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d00f      	beq.n	80080e6 <TIM_OC1_SetConfig+0xc2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a1a      	ldr	r2, [pc, #104]	; (8008134 <TIM_OC1_SetConfig+0x110>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d00b      	beq.n	80080e6 <TIM_OC1_SetConfig+0xc2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a19      	ldr	r2, [pc, #100]	; (8008138 <TIM_OC1_SetConfig+0x114>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d007      	beq.n	80080e6 <TIM_OC1_SetConfig+0xc2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a18      	ldr	r2, [pc, #96]	; (800813c <TIM_OC1_SetConfig+0x118>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d003      	beq.n	80080e6 <TIM_OC1_SetConfig+0xc2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a17      	ldr	r2, [pc, #92]	; (8008140 <TIM_OC1_SetConfig+0x11c>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d111      	bne.n	800810a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4313      	orrs	r3, r2
 8008108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	621a      	str	r2, [r3, #32]
}
 8008124:	bf00      	nop
 8008126:	371c      	adds	r7, #28
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	40012c00 	.word	0x40012c00
 8008134:	40013400 	.word	0x40013400
 8008138:	40014000 	.word	0x40014000
 800813c:	40014400 	.word	0x40014400
 8008140:	40014800 	.word	0x40014800

08008144 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	f023 0210 	bic.w	r2, r3, #16
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800817e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	021b      	lsls	r3, r3, #8
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f023 0320 	bic.w	r3, r3, #32
 8008192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	011b      	lsls	r3, r3, #4
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	4313      	orrs	r3, r2
 800819e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a28      	ldr	r2, [pc, #160]	; (8008244 <TIM_OC2_SetConfig+0x100>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d003      	beq.n	80081b0 <TIM_OC2_SetConfig+0x6c>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a27      	ldr	r2, [pc, #156]	; (8008248 <TIM_OC2_SetConfig+0x104>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d10d      	bne.n	80081cc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	011b      	lsls	r3, r3, #4
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a1d      	ldr	r2, [pc, #116]	; (8008244 <TIM_OC2_SetConfig+0x100>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d00f      	beq.n	80081f4 <TIM_OC2_SetConfig+0xb0>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a1c      	ldr	r2, [pc, #112]	; (8008248 <TIM_OC2_SetConfig+0x104>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d00b      	beq.n	80081f4 <TIM_OC2_SetConfig+0xb0>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a1b      	ldr	r2, [pc, #108]	; (800824c <TIM_OC2_SetConfig+0x108>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d007      	beq.n	80081f4 <TIM_OC2_SetConfig+0xb0>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a1a      	ldr	r2, [pc, #104]	; (8008250 <TIM_OC2_SetConfig+0x10c>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d003      	beq.n	80081f4 <TIM_OC2_SetConfig+0xb0>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a19      	ldr	r2, [pc, #100]	; (8008254 <TIM_OC2_SetConfig+0x110>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d113      	bne.n	800821c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081fa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008202:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	4313      	orrs	r3, r2
 800820e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	4313      	orrs	r3, r2
 800821a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	621a      	str	r2, [r3, #32]
}
 8008236:	bf00      	nop
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	40012c00 	.word	0x40012c00
 8008248:	40013400 	.word	0x40013400
 800824c:	40014000 	.word	0x40014000
 8008250:	40014400 	.word	0x40014400
 8008254:	40014800 	.word	0x40014800

08008258 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800828a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f023 0303 	bic.w	r3, r3, #3
 8008292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	4313      	orrs	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	021b      	lsls	r3, r3, #8
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a27      	ldr	r2, [pc, #156]	; (8008354 <TIM_OC3_SetConfig+0xfc>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d003      	beq.n	80082c2 <TIM_OC3_SetConfig+0x6a>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a26      	ldr	r2, [pc, #152]	; (8008358 <TIM_OC3_SetConfig+0x100>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d10d      	bne.n	80082de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082dc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a1c      	ldr	r2, [pc, #112]	; (8008354 <TIM_OC3_SetConfig+0xfc>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00f      	beq.n	8008306 <TIM_OC3_SetConfig+0xae>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a1b      	ldr	r2, [pc, #108]	; (8008358 <TIM_OC3_SetConfig+0x100>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d00b      	beq.n	8008306 <TIM_OC3_SetConfig+0xae>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a1a      	ldr	r2, [pc, #104]	; (800835c <TIM_OC3_SetConfig+0x104>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d007      	beq.n	8008306 <TIM_OC3_SetConfig+0xae>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a19      	ldr	r2, [pc, #100]	; (8008360 <TIM_OC3_SetConfig+0x108>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d003      	beq.n	8008306 <TIM_OC3_SetConfig+0xae>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a18      	ldr	r2, [pc, #96]	; (8008364 <TIM_OC3_SetConfig+0x10c>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d113      	bne.n	800832e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800830c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	011b      	lsls	r3, r3, #4
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	4313      	orrs	r3, r2
 8008320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	011b      	lsls	r3, r3, #4
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	4313      	orrs	r3, r2
 800832c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	685a      	ldr	r2, [r3, #4]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	621a      	str	r2, [r3, #32]
}
 8008348:	bf00      	nop
 800834a:	371c      	adds	r7, #28
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	40012c00 	.word	0x40012c00
 8008358:	40013400 	.word	0x40013400
 800835c:	40014000 	.word	0x40014000
 8008360:	40014400 	.word	0x40014400
 8008364:	40014800 	.word	0x40014800

08008368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800839a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	021b      	lsls	r3, r3, #8
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	031b      	lsls	r3, r3, #12
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a18      	ldr	r2, [pc, #96]	; (8008428 <TIM_OC4_SetConfig+0xc0>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d00f      	beq.n	80083ec <TIM_OC4_SetConfig+0x84>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a17      	ldr	r2, [pc, #92]	; (800842c <TIM_OC4_SetConfig+0xc4>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d00b      	beq.n	80083ec <TIM_OC4_SetConfig+0x84>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a16      	ldr	r2, [pc, #88]	; (8008430 <TIM_OC4_SetConfig+0xc8>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d007      	beq.n	80083ec <TIM_OC4_SetConfig+0x84>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a15      	ldr	r2, [pc, #84]	; (8008434 <TIM_OC4_SetConfig+0xcc>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d003      	beq.n	80083ec <TIM_OC4_SetConfig+0x84>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a14      	ldr	r2, [pc, #80]	; (8008438 <TIM_OC4_SetConfig+0xd0>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d109      	bne.n	8008400 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	019b      	lsls	r3, r3, #6
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	621a      	str	r2, [r3, #32]
}
 800841a:	bf00      	nop
 800841c:	371c      	adds	r7, #28
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	40012c00 	.word	0x40012c00
 800842c:	40013400 	.word	0x40013400
 8008430:	40014000 	.word	0x40014000
 8008434:	40014400 	.word	0x40014400
 8008438:	40014800 	.word	0x40014800

0800843c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800846a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	4313      	orrs	r3, r2
 8008478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008480:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	041b      	lsls	r3, r3, #16
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	4313      	orrs	r3, r2
 800848c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a17      	ldr	r2, [pc, #92]	; (80084f0 <TIM_OC5_SetConfig+0xb4>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d00f      	beq.n	80084b6 <TIM_OC5_SetConfig+0x7a>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a16      	ldr	r2, [pc, #88]	; (80084f4 <TIM_OC5_SetConfig+0xb8>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d00b      	beq.n	80084b6 <TIM_OC5_SetConfig+0x7a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a15      	ldr	r2, [pc, #84]	; (80084f8 <TIM_OC5_SetConfig+0xbc>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d007      	beq.n	80084b6 <TIM_OC5_SetConfig+0x7a>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a14      	ldr	r2, [pc, #80]	; (80084fc <TIM_OC5_SetConfig+0xc0>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d003      	beq.n	80084b6 <TIM_OC5_SetConfig+0x7a>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a13      	ldr	r2, [pc, #76]	; (8008500 <TIM_OC5_SetConfig+0xc4>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d109      	bne.n	80084ca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	021b      	lsls	r3, r3, #8
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	621a      	str	r2, [r3, #32]
}
 80084e4:	bf00      	nop
 80084e6:	371c      	adds	r7, #28
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	40012c00 	.word	0x40012c00
 80084f4:	40013400 	.word	0x40013400
 80084f8:	40014000 	.word	0x40014000
 80084fc:	40014400 	.word	0x40014400
 8008500:	40014800 	.word	0x40014800

08008504 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008504:	b480      	push	{r7}
 8008506:	b087      	sub	sp, #28
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800852a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	021b      	lsls	r3, r3, #8
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	4313      	orrs	r3, r2
 8008542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800854a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	051b      	lsls	r3, r3, #20
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	4313      	orrs	r3, r2
 8008556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a18      	ldr	r2, [pc, #96]	; (80085bc <TIM_OC6_SetConfig+0xb8>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d00f      	beq.n	8008580 <TIM_OC6_SetConfig+0x7c>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a17      	ldr	r2, [pc, #92]	; (80085c0 <TIM_OC6_SetConfig+0xbc>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d00b      	beq.n	8008580 <TIM_OC6_SetConfig+0x7c>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a16      	ldr	r2, [pc, #88]	; (80085c4 <TIM_OC6_SetConfig+0xc0>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d007      	beq.n	8008580 <TIM_OC6_SetConfig+0x7c>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a15      	ldr	r2, [pc, #84]	; (80085c8 <TIM_OC6_SetConfig+0xc4>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d003      	beq.n	8008580 <TIM_OC6_SetConfig+0x7c>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a14      	ldr	r2, [pc, #80]	; (80085cc <TIM_OC6_SetConfig+0xc8>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d109      	bne.n	8008594 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008586:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	029b      	lsls	r3, r3, #10
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	4313      	orrs	r3, r2
 8008592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	621a      	str	r2, [r3, #32]
}
 80085ae:	bf00      	nop
 80085b0:	371c      	adds	r7, #28
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	40012c00 	.word	0x40012c00
 80085c0:	40013400 	.word	0x40013400
 80085c4:	40014000 	.word	0x40014000
 80085c8:	40014400 	.word	0x40014400
 80085cc:	40014800 	.word	0x40014800

080085d0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085fa:	f023 0307 	bic.w	r3, r3, #7
 80085fe:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	4313      	orrs	r3, r2
 8008608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	2b30      	cmp	r3, #48	; 0x30
 8008618:	d05c      	beq.n	80086d4 <TIM_SlaveTimer_SetConfig+0x104>
 800861a:	2b30      	cmp	r3, #48	; 0x30
 800861c:	d806      	bhi.n	800862c <TIM_SlaveTimer_SetConfig+0x5c>
 800861e:	2b10      	cmp	r3, #16
 8008620:	d058      	beq.n	80086d4 <TIM_SlaveTimer_SetConfig+0x104>
 8008622:	2b20      	cmp	r3, #32
 8008624:	d056      	beq.n	80086d4 <TIM_SlaveTimer_SetConfig+0x104>
 8008626:	2b00      	cmp	r3, #0
 8008628:	d054      	beq.n	80086d4 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800862a:	e054      	b.n	80086d6 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 800862c:	2b50      	cmp	r3, #80	; 0x50
 800862e:	d03d      	beq.n	80086ac <TIM_SlaveTimer_SetConfig+0xdc>
 8008630:	2b50      	cmp	r3, #80	; 0x50
 8008632:	d802      	bhi.n	800863a <TIM_SlaveTimer_SetConfig+0x6a>
 8008634:	2b40      	cmp	r3, #64	; 0x40
 8008636:	d010      	beq.n	800865a <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8008638:	e04d      	b.n	80086d6 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 800863a:	2b60      	cmp	r3, #96	; 0x60
 800863c:	d040      	beq.n	80086c0 <TIM_SlaveTimer_SetConfig+0xf0>
 800863e:	2b70      	cmp	r3, #112	; 0x70
 8008640:	d000      	beq.n	8008644 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8008642:	e048      	b.n	80086d6 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6818      	ldr	r0, [r3, #0]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	68d9      	ldr	r1, [r3, #12]
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	689a      	ldr	r2, [r3, #8]
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	f000 f8a3 	bl	800879e <TIM_ETR_SetConfig>
      break;
 8008658:	e03d      	b.n	80086d6 <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b05      	cmp	r3, #5
 8008660:	d101      	bne.n	8008666 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e038      	b.n	80086d8 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6a1b      	ldr	r3, [r3, #32]
 800866c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	6a1a      	ldr	r2, [r3, #32]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0201 	bic.w	r2, r2, #1
 800867c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800868c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	011b      	lsls	r3, r3, #4
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	621a      	str	r2, [r3, #32]
      break;
 80086aa:	e014      	b.n	80086d6 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6818      	ldr	r0, [r3, #0]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	6899      	ldr	r1, [r3, #8]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	461a      	mov	r2, r3
 80086ba:	f000 f811 	bl	80086e0 <TIM_TI1_ConfigInputStage>
      break;
 80086be:	e00a      	b.n	80086d6 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	6899      	ldr	r1, [r3, #8]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	461a      	mov	r2, r3
 80086ce:	f000 f836 	bl	800873e <TIM_TI2_ConfigInputStage>
      break;
 80086d2:	e000      	b.n	80086d6 <TIM_SlaveTimer_SetConfig+0x106>
      break;
 80086d4:	bf00      	nop
  }
  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	f023 0201 	bic.w	r2, r3, #1
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800870a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	011b      	lsls	r3, r3, #4
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	4313      	orrs	r3, r2
 8008714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f023 030a 	bic.w	r3, r3, #10
 800871c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	4313      	orrs	r3, r2
 8008724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	621a      	str	r2, [r3, #32]
}
 8008732:	bf00      	nop
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800873e:	b480      	push	{r7}
 8008740:	b087      	sub	sp, #28
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	f023 0210 	bic.w	r2, r3, #16
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008768:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	031b      	lsls	r3, r3, #12
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	4313      	orrs	r3, r2
 8008772:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800877a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	011b      	lsls	r3, r3, #4
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	4313      	orrs	r3, r2
 8008784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	621a      	str	r2, [r3, #32]
}
 8008792:	bf00      	nop
 8008794:	371c      	adds	r7, #28
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800879e:	b480      	push	{r7}
 80087a0:	b087      	sub	sp, #28
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	607a      	str	r2, [r7, #4]
 80087aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	021a      	lsls	r2, r3, #8
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	431a      	orrs	r2, r3
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	609a      	str	r2, [r3, #8]
}
 80087d2:	bf00      	nop
 80087d4:	371c      	adds	r7, #28
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
	...

080087e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087f4:	2302      	movs	r3, #2
 80087f6:	e063      	b.n	80088c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a2b      	ldr	r2, [pc, #172]	; (80088cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d004      	beq.n	800882c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a2a      	ldr	r2, [pc, #168]	; (80088d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d108      	bne.n	800883e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008832:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008844:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4313      	orrs	r3, r2
 800884e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a1b      	ldr	r2, [pc, #108]	; (80088cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d018      	beq.n	8008894 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800886a:	d013      	beq.n	8008894 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a18      	ldr	r2, [pc, #96]	; (80088d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d00e      	beq.n	8008894 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a17      	ldr	r2, [pc, #92]	; (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d009      	beq.n	8008894 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a12      	ldr	r2, [pc, #72]	; (80088d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d004      	beq.n	8008894 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a13      	ldr	r2, [pc, #76]	; (80088dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d10c      	bne.n	80088ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800889a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	40012c00 	.word	0x40012c00
 80088d0:	40013400 	.word	0x40013400
 80088d4:	40000400 	.word	0x40000400
 80088d8:	40000800 	.word	0x40000800
 80088dc:	40014000 	.word	0x40014000

080088e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d101      	bne.n	80088fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80088f8:	2302      	movs	r3, #2
 80088fa:	e065      	b.n	80089c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	4313      	orrs	r3, r2
 8008910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	4313      	orrs	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	4313      	orrs	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4313      	orrs	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	4313      	orrs	r3, r2
 8008956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008962:	4313      	orrs	r3, r2
 8008964:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	041b      	lsls	r3, r3, #16
 8008972:	4313      	orrs	r3, r2
 8008974:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a16      	ldr	r2, [pc, #88]	; (80089d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d004      	beq.n	800898a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a14      	ldr	r2, [pc, #80]	; (80089d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d115      	bne.n	80089b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	051b      	lsls	r3, r3, #20
 8008996:	4313      	orrs	r3, r2
 8008998:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	40012c00 	.word	0x40012c00
 80089d8:	40013400 	.word	0x40013400

080089dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e040      	b.n	8008a70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d106      	bne.n	8008a04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7fa fe60 	bl	80036c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2224      	movs	r2, #36	; 0x24
 8008a08:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f022 0201 	bic.w	r2, r2, #1
 8008a18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f82c 	bl	8008a78 <UART_SetConfig>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d101      	bne.n	8008a2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e022      	b.n	8008a70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d002      	beq.n	8008a38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fa3a 	bl	8008eac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689a      	ldr	r2, [r3, #8]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f042 0201 	orr.w	r2, r2, #1
 8008a66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fac1 	bl	8008ff0 <UART_CheckIdleState>
 8008a6e:	4603      	mov	r3, r0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	431a      	orrs	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	431a      	orrs	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008aaa:	f023 030c 	bic.w	r3, r3, #12
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	6812      	ldr	r2, [r2, #0]
 8008ab2:	6939      	ldr	r1, [r7, #16]
 8008ab4:	430b      	orrs	r3, r1
 8008ab6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	68da      	ldr	r2, [r3, #12]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a1b      	ldr	r3, [r3, #32]
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4aa9      	ldr	r2, [pc, #676]	; (8008d9c <UART_SetConfig+0x324>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d121      	bne.n	8008b40 <UART_SetConfig+0xc8>
 8008afc:	4ba8      	ldr	r3, [pc, #672]	; (8008da0 <UART_SetConfig+0x328>)
 8008afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b00:	f003 0303 	and.w	r3, r3, #3
 8008b04:	2b03      	cmp	r3, #3
 8008b06:	d817      	bhi.n	8008b38 <UART_SetConfig+0xc0>
 8008b08:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <UART_SetConfig+0x98>)
 8008b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0e:	bf00      	nop
 8008b10:	08008b21 	.word	0x08008b21
 8008b14:	08008b2d 	.word	0x08008b2d
 8008b18:	08008b33 	.word	0x08008b33
 8008b1c:	08008b27 	.word	0x08008b27
 8008b20:	2301      	movs	r3, #1
 8008b22:	77fb      	strb	r3, [r7, #31]
 8008b24:	e0b2      	b.n	8008c8c <UART_SetConfig+0x214>
 8008b26:	2302      	movs	r3, #2
 8008b28:	77fb      	strb	r3, [r7, #31]
 8008b2a:	e0af      	b.n	8008c8c <UART_SetConfig+0x214>
 8008b2c:	2304      	movs	r3, #4
 8008b2e:	77fb      	strb	r3, [r7, #31]
 8008b30:	e0ac      	b.n	8008c8c <UART_SetConfig+0x214>
 8008b32:	2308      	movs	r3, #8
 8008b34:	77fb      	strb	r3, [r7, #31]
 8008b36:	e0a9      	b.n	8008c8c <UART_SetConfig+0x214>
 8008b38:	2310      	movs	r3, #16
 8008b3a:	77fb      	strb	r3, [r7, #31]
 8008b3c:	bf00      	nop
 8008b3e:	e0a5      	b.n	8008c8c <UART_SetConfig+0x214>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a97      	ldr	r2, [pc, #604]	; (8008da4 <UART_SetConfig+0x32c>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d123      	bne.n	8008b92 <UART_SetConfig+0x11a>
 8008b4a:	4b95      	ldr	r3, [pc, #596]	; (8008da0 <UART_SetConfig+0x328>)
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b56:	d012      	beq.n	8008b7e <UART_SetConfig+0x106>
 8008b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b5c:	d802      	bhi.n	8008b64 <UART_SetConfig+0xec>
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d007      	beq.n	8008b72 <UART_SetConfig+0xfa>
 8008b62:	e012      	b.n	8008b8a <UART_SetConfig+0x112>
 8008b64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b68:	d00c      	beq.n	8008b84 <UART_SetConfig+0x10c>
 8008b6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b6e:	d003      	beq.n	8008b78 <UART_SetConfig+0x100>
 8008b70:	e00b      	b.n	8008b8a <UART_SetConfig+0x112>
 8008b72:	2300      	movs	r3, #0
 8008b74:	77fb      	strb	r3, [r7, #31]
 8008b76:	e089      	b.n	8008c8c <UART_SetConfig+0x214>
 8008b78:	2302      	movs	r3, #2
 8008b7a:	77fb      	strb	r3, [r7, #31]
 8008b7c:	e086      	b.n	8008c8c <UART_SetConfig+0x214>
 8008b7e:	2304      	movs	r3, #4
 8008b80:	77fb      	strb	r3, [r7, #31]
 8008b82:	e083      	b.n	8008c8c <UART_SetConfig+0x214>
 8008b84:	2308      	movs	r3, #8
 8008b86:	77fb      	strb	r3, [r7, #31]
 8008b88:	e080      	b.n	8008c8c <UART_SetConfig+0x214>
 8008b8a:	2310      	movs	r3, #16
 8008b8c:	77fb      	strb	r3, [r7, #31]
 8008b8e:	bf00      	nop
 8008b90:	e07c      	b.n	8008c8c <UART_SetConfig+0x214>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a84      	ldr	r2, [pc, #528]	; (8008da8 <UART_SetConfig+0x330>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d123      	bne.n	8008be4 <UART_SetConfig+0x16c>
 8008b9c:	4b80      	ldr	r3, [pc, #512]	; (8008da0 <UART_SetConfig+0x328>)
 8008b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008ba4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ba8:	d012      	beq.n	8008bd0 <UART_SetConfig+0x158>
 8008baa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008bae:	d802      	bhi.n	8008bb6 <UART_SetConfig+0x13e>
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d007      	beq.n	8008bc4 <UART_SetConfig+0x14c>
 8008bb4:	e012      	b.n	8008bdc <UART_SetConfig+0x164>
 8008bb6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008bba:	d00c      	beq.n	8008bd6 <UART_SetConfig+0x15e>
 8008bbc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008bc0:	d003      	beq.n	8008bca <UART_SetConfig+0x152>
 8008bc2:	e00b      	b.n	8008bdc <UART_SetConfig+0x164>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	77fb      	strb	r3, [r7, #31]
 8008bc8:	e060      	b.n	8008c8c <UART_SetConfig+0x214>
 8008bca:	2302      	movs	r3, #2
 8008bcc:	77fb      	strb	r3, [r7, #31]
 8008bce:	e05d      	b.n	8008c8c <UART_SetConfig+0x214>
 8008bd0:	2304      	movs	r3, #4
 8008bd2:	77fb      	strb	r3, [r7, #31]
 8008bd4:	e05a      	b.n	8008c8c <UART_SetConfig+0x214>
 8008bd6:	2308      	movs	r3, #8
 8008bd8:	77fb      	strb	r3, [r7, #31]
 8008bda:	e057      	b.n	8008c8c <UART_SetConfig+0x214>
 8008bdc:	2310      	movs	r3, #16
 8008bde:	77fb      	strb	r3, [r7, #31]
 8008be0:	bf00      	nop
 8008be2:	e053      	b.n	8008c8c <UART_SetConfig+0x214>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a70      	ldr	r2, [pc, #448]	; (8008dac <UART_SetConfig+0x334>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d123      	bne.n	8008c36 <UART_SetConfig+0x1be>
 8008bee:	4b6c      	ldr	r3, [pc, #432]	; (8008da0 <UART_SetConfig+0x328>)
 8008bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bfa:	d012      	beq.n	8008c22 <UART_SetConfig+0x1aa>
 8008bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c00:	d802      	bhi.n	8008c08 <UART_SetConfig+0x190>
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d007      	beq.n	8008c16 <UART_SetConfig+0x19e>
 8008c06:	e012      	b.n	8008c2e <UART_SetConfig+0x1b6>
 8008c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c0c:	d00c      	beq.n	8008c28 <UART_SetConfig+0x1b0>
 8008c0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c12:	d003      	beq.n	8008c1c <UART_SetConfig+0x1a4>
 8008c14:	e00b      	b.n	8008c2e <UART_SetConfig+0x1b6>
 8008c16:	2300      	movs	r3, #0
 8008c18:	77fb      	strb	r3, [r7, #31]
 8008c1a:	e037      	b.n	8008c8c <UART_SetConfig+0x214>
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	77fb      	strb	r3, [r7, #31]
 8008c20:	e034      	b.n	8008c8c <UART_SetConfig+0x214>
 8008c22:	2304      	movs	r3, #4
 8008c24:	77fb      	strb	r3, [r7, #31]
 8008c26:	e031      	b.n	8008c8c <UART_SetConfig+0x214>
 8008c28:	2308      	movs	r3, #8
 8008c2a:	77fb      	strb	r3, [r7, #31]
 8008c2c:	e02e      	b.n	8008c8c <UART_SetConfig+0x214>
 8008c2e:	2310      	movs	r3, #16
 8008c30:	77fb      	strb	r3, [r7, #31]
 8008c32:	bf00      	nop
 8008c34:	e02a      	b.n	8008c8c <UART_SetConfig+0x214>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a5d      	ldr	r2, [pc, #372]	; (8008db0 <UART_SetConfig+0x338>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d123      	bne.n	8008c88 <UART_SetConfig+0x210>
 8008c40:	4b57      	ldr	r3, [pc, #348]	; (8008da0 <UART_SetConfig+0x328>)
 8008c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c44:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c4c:	d012      	beq.n	8008c74 <UART_SetConfig+0x1fc>
 8008c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c52:	d802      	bhi.n	8008c5a <UART_SetConfig+0x1e2>
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d007      	beq.n	8008c68 <UART_SetConfig+0x1f0>
 8008c58:	e012      	b.n	8008c80 <UART_SetConfig+0x208>
 8008c5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c5e:	d00c      	beq.n	8008c7a <UART_SetConfig+0x202>
 8008c60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008c64:	d003      	beq.n	8008c6e <UART_SetConfig+0x1f6>
 8008c66:	e00b      	b.n	8008c80 <UART_SetConfig+0x208>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	77fb      	strb	r3, [r7, #31]
 8008c6c:	e00e      	b.n	8008c8c <UART_SetConfig+0x214>
 8008c6e:	2302      	movs	r3, #2
 8008c70:	77fb      	strb	r3, [r7, #31]
 8008c72:	e00b      	b.n	8008c8c <UART_SetConfig+0x214>
 8008c74:	2304      	movs	r3, #4
 8008c76:	77fb      	strb	r3, [r7, #31]
 8008c78:	e008      	b.n	8008c8c <UART_SetConfig+0x214>
 8008c7a:	2308      	movs	r3, #8
 8008c7c:	77fb      	strb	r3, [r7, #31]
 8008c7e:	e005      	b.n	8008c8c <UART_SetConfig+0x214>
 8008c80:	2310      	movs	r3, #16
 8008c82:	77fb      	strb	r3, [r7, #31]
 8008c84:	bf00      	nop
 8008c86:	e001      	b.n	8008c8c <UART_SetConfig+0x214>
 8008c88:	2310      	movs	r3, #16
 8008c8a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	69db      	ldr	r3, [r3, #28]
 8008c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c94:	f040 808e 	bne.w	8008db4 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8008c98:	7ffb      	ldrb	r3, [r7, #31]
 8008c9a:	2b08      	cmp	r3, #8
 8008c9c:	d85e      	bhi.n	8008d5c <UART_SetConfig+0x2e4>
 8008c9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ca4 <UART_SetConfig+0x22c>)
 8008ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca4:	08008cc9 	.word	0x08008cc9
 8008ca8:	08008ce9 	.word	0x08008ce9
 8008cac:	08008d09 	.word	0x08008d09
 8008cb0:	08008d5d 	.word	0x08008d5d
 8008cb4:	08008d25 	.word	0x08008d25
 8008cb8:	08008d5d 	.word	0x08008d5d
 8008cbc:	08008d5d 	.word	0x08008d5d
 8008cc0:	08008d5d 	.word	0x08008d5d
 8008cc4:	08008d45 	.word	0x08008d45
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cc8:	f7fe fd6e 	bl	80077a8 <HAL_RCC_GetPCLK1Freq>
 8008ccc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	005a      	lsls	r2, r3, #1
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	085b      	lsrs	r3, r3, #1
 8008cd8:	441a      	add	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	61bb      	str	r3, [r7, #24]
        break;
 8008ce6:	e03c      	b.n	8008d62 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ce8:	f7fe fd80 	bl	80077ec <HAL_RCC_GetPCLK2Freq>
 8008cec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	005a      	lsls	r2, r3, #1
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	085b      	lsrs	r3, r3, #1
 8008cf8:	441a      	add	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	61bb      	str	r3, [r7, #24]
        break;
 8008d06:	e02c      	b.n	8008d62 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	085b      	lsrs	r3, r3, #1
 8008d0e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8008d12:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	6852      	ldr	r2, [r2, #4]
 8008d1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	61bb      	str	r3, [r7, #24]
        break;
 8008d22:	e01e      	b.n	8008d62 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d24:	f7fe fcca 	bl	80076bc <HAL_RCC_GetSysClockFreq>
 8008d28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	005a      	lsls	r2, r3, #1
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	085b      	lsrs	r3, r3, #1
 8008d34:	441a      	add	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	61bb      	str	r3, [r7, #24]
        break;
 8008d42:	e00e      	b.n	8008d62 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	085b      	lsrs	r3, r3, #1
 8008d4a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	61bb      	str	r3, [r7, #24]
        break;
 8008d5a:	e002      	b.n	8008d62 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	75fb      	strb	r3, [r7, #23]
        break;
 8008d60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2b0f      	cmp	r3, #15
 8008d66:	d916      	bls.n	8008d96 <UART_SetConfig+0x31e>
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d6e:	d212      	bcs.n	8008d96 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	f023 030f 	bic.w	r3, r3, #15
 8008d78:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	085b      	lsrs	r3, r3, #1
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	f003 0307 	and.w	r3, r3, #7
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	897b      	ldrh	r3, [r7, #10]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	897a      	ldrh	r2, [r7, #10]
 8008d92:	60da      	str	r2, [r3, #12]
 8008d94:	e07e      	b.n	8008e94 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	75fb      	strb	r3, [r7, #23]
 8008d9a:	e07b      	b.n	8008e94 <UART_SetConfig+0x41c>
 8008d9c:	40013800 	.word	0x40013800
 8008da0:	40021000 	.word	0x40021000
 8008da4:	40004400 	.word	0x40004400
 8008da8:	40004800 	.word	0x40004800
 8008dac:	40004c00 	.word	0x40004c00
 8008db0:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8008db4:	7ffb      	ldrb	r3, [r7, #31]
 8008db6:	2b08      	cmp	r3, #8
 8008db8:	d85b      	bhi.n	8008e72 <UART_SetConfig+0x3fa>
 8008dba:	a201      	add	r2, pc, #4	; (adr r2, 8008dc0 <UART_SetConfig+0x348>)
 8008dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc0:	08008de5 	.word	0x08008de5
 8008dc4:	08008e03 	.word	0x08008e03
 8008dc8:	08008e21 	.word	0x08008e21
 8008dcc:	08008e73 	.word	0x08008e73
 8008dd0:	08008e3d 	.word	0x08008e3d
 8008dd4:	08008e73 	.word	0x08008e73
 8008dd8:	08008e73 	.word	0x08008e73
 8008ddc:	08008e73 	.word	0x08008e73
 8008de0:	08008e5b 	.word	0x08008e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008de4:	f7fe fce0 	bl	80077a8 <HAL_RCC_GetPCLK1Freq>
 8008de8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	085a      	lsrs	r2, r3, #1
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	441a      	add	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	61bb      	str	r3, [r7, #24]
        break;
 8008e00:	e03a      	b.n	8008e78 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e02:	f7fe fcf3 	bl	80077ec <HAL_RCC_GetPCLK2Freq>
 8008e06:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	085a      	lsrs	r2, r3, #1
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	441a      	add	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	61bb      	str	r3, [r7, #24]
        break;
 8008e1e:	e02b      	b.n	8008e78 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	085b      	lsrs	r3, r3, #1
 8008e26:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8008e2a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	6852      	ldr	r2, [r2, #4]
 8008e32:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	61bb      	str	r3, [r7, #24]
        break;
 8008e3a:	e01d      	b.n	8008e78 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e3c:	f7fe fc3e 	bl	80076bc <HAL_RCC_GetSysClockFreq>
 8008e40:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	085a      	lsrs	r2, r3, #1
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	441a      	add	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	61bb      	str	r3, [r7, #24]
        break;
 8008e58:	e00e      	b.n	8008e78 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	085b      	lsrs	r3, r3, #1
 8008e60:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	61bb      	str	r3, [r7, #24]
        break;
 8008e70:	e002      	b.n	8008e78 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	75fb      	strb	r3, [r7, #23]
        break;
 8008e76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	2b0f      	cmp	r3, #15
 8008e7c:	d908      	bls.n	8008e90 <UART_SetConfig+0x418>
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e84:	d204      	bcs.n	8008e90 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	60da      	str	r2, [r3, #12]
 8008e8e:	e001      	b.n	8008e94 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3720      	adds	r7, #32
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop

08008eac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00a      	beq.n	8008ed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eda:	f003 0302 	and.w	r3, r3, #2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00a      	beq.n	8008ef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00a      	beq.n	8008f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	430a      	orrs	r2, r1
 8008f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	f003 0308 	and.w	r3, r3, #8
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00a      	beq.n	8008f3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f40:	f003 0310 	and.w	r3, r3, #16
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00a      	beq.n	8008f5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f62:	f003 0320 	and.w	r3, r3, #32
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00a      	beq.n	8008f80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	430a      	orrs	r2, r1
 8008f7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d01a      	beq.n	8008fc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008faa:	d10a      	bne.n	8008fc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	605a      	str	r2, [r3, #4]
  }
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af02      	add	r7, sp, #8
 8008ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008ffe:	f7fb fe0f 	bl	8004c20 <HAL_GetTick>
 8009002:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0308 	and.w	r3, r3, #8
 800900e:	2b08      	cmp	r3, #8
 8009010:	d10e      	bne.n	8009030 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009012:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f82a 	bl	800907a <UART_WaitOnFlagUntilTimeout>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e020      	b.n	8009072 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0304 	and.w	r3, r3, #4
 800903a:	2b04      	cmp	r3, #4
 800903c:	d10e      	bne.n	800905c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800903e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f814 	bl	800907a <UART_WaitOnFlagUntilTimeout>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e00a      	b.n	8009072 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2220      	movs	r2, #32
 8009060:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2220      	movs	r2, #32
 8009066:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	603b      	str	r3, [r7, #0]
 8009086:	4613      	mov	r3, r2
 8009088:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800908a:	e05d      	b.n	8009148 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009092:	d059      	beq.n	8009148 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009094:	f7fb fdc4 	bl	8004c20 <HAL_GetTick>
 8009098:	4602      	mov	r2, r0
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d302      	bcc.n	80090aa <UART_WaitOnFlagUntilTimeout+0x30>
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d11b      	bne.n	80090e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80090b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689a      	ldr	r2, [r3, #8]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f022 0201 	bic.w	r2, r2, #1
 80090c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2220      	movs	r2, #32
 80090ce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2220      	movs	r2, #32
 80090d4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e042      	b.n	8009168 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 0304 	and.w	r3, r3, #4
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d02b      	beq.n	8009148 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090fe:	d123      	bne.n	8009148 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009108:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009118:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	689a      	ldr	r2, [r3, #8]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f022 0201 	bic.w	r2, r2, #1
 8009128:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2220      	movs	r2, #32
 800912e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2220      	movs	r2, #32
 8009134:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2220      	movs	r2, #32
 800913a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e00f      	b.n	8009168 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	69da      	ldr	r2, [r3, #28]
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	4013      	ands	r3, r2
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	429a      	cmp	r2, r3
 8009156:	bf0c      	ite	eq
 8009158:	2301      	moveq	r3, #1
 800915a:	2300      	movne	r3, #0
 800915c:	b2db      	uxtb	r3, r3
 800915e:	461a      	mov	r2, r3
 8009160:	79fb      	ldrb	r3, [r7, #7]
 8009162:	429a      	cmp	r2, r3
 8009164:	d092      	beq.n	800908c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <VBS_GetAvBusVoltage_d>:
  * @brief  It return latest averaged Vbus measurement expressed in u16Volt
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  return ( pHandle->AvBusVoltage_d );
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	88db      	ldrh	r3, [r3, #6]
}
 800917c:	4618      	mov	r0, r3
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volts
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volts
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	88db      	ldrh	r3, [r3, #6]
 8009194:	60fb      	str	r3, [r7, #12]
  temp *= pHandle->ConversionFactor;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	885b      	ldrh	r3, [r3, #2]
 800919a:	461a      	mov	r2, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	fb02 f303 	mul.w	r3, r2, r3
 80091a2:	60fb      	str	r3, [r7, #12]
  temp /= 65536u;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	0c1b      	lsrs	r3, r3, #16
 80091a8:	60fb      	str	r3, [r7, #12]

  return ( ( uint16_t )temp );
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	b29b      	uxth	r3, r3
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 80091ba:	b480      	push	{r7}
 80091bc:	b089      	sub	sp, #36	; 0x24
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	6039      	str	r1, [r7, #0]
  uint16_t table_element;
  uint32_t uw_temp;
  int32_t  sw_temp;
  qd_t local_vqd = Vqd;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	60fb      	str	r3, [r7, #12]

  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80091c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80091cc:	f9b7 2000 	ldrsh.w	r2, [r7]
 80091d0:	fb02 f203 	mul.w	r2, r2, r3
            ( int32_t )( Vqd.d ) * Vqd.d;
 80091d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80091d8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80091dc:	fb01 f303 	mul.w	r3, r1, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80091e0:	4413      	add	r3, r2
 80091e2:	61fb      	str	r3, [r7, #28]

  uw_temp = ( uint32_t ) sw_temp;
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	61bb      	str	r3, [r7, #24]

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	461a      	mov	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	881b      	ldrh	r3, [r3, #0]
 80091f2:	fb03 f302 	mul.w	r3, r3, r2
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d930      	bls.n	800925e <Circle_Limitation+0xa4>
  {

    uw_temp /= ( uint32_t )( 16777216 );
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	0e1b      	lsrs	r3, r3, #24
 8009200:	61bb      	str	r3, [r7, #24]

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8009208:	461a      	mov	r2, r3
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	1a9b      	subs	r3, r3, r2
 800920e:	61bb      	str	r3, [r7, #24]

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	b2db      	uxtb	r3, r3
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	005b      	lsls	r3, r3, #1
 8009218:	4413      	add	r3, r2
 800921a:	889b      	ldrh	r3, [r3, #4]
 800921c:	82fb      	strh	r3, [r7, #22]

    sw_temp = Vqd.q * ( int32_t )table_element;
 800921e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009222:	461a      	mov	r2, r3
 8009224:	8afb      	ldrh	r3, [r7, #22]
 8009226:	fb03 f302 	mul.w	r3, r3, r2
 800922a:	61fb      	str	r3, [r7, #28]
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	2b00      	cmp	r3, #0
 8009230:	da02      	bge.n	8009238 <Circle_Limitation+0x7e>
 8009232:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8009236:	337f      	adds	r3, #127	; 0x7f
 8009238:	13db      	asrs	r3, r3, #15
 800923a:	b21b      	sxth	r3, r3
 800923c:	81bb      	strh	r3, [r7, #12]

    sw_temp = Vqd.d * ( int32_t )( table_element );
 800923e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009242:	461a      	mov	r2, r3
 8009244:	8afb      	ldrh	r3, [r7, #22]
 8009246:	fb03 f302 	mul.w	r3, r3, r2
 800924a:	61fb      	str	r3, [r7, #28]
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	2b00      	cmp	r3, #0
 8009250:	da02      	bge.n	8009258 <Circle_Limitation+0x9e>
 8009252:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8009256:	337f      	adds	r3, #127	; 0x7f
 8009258:	13db      	asrs	r3, r3, #15
 800925a:	b21b      	sxth	r3, r3
 800925c:	81fb      	strh	r3, [r7, #14]
  }

  return ( local_vqd );
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	613b      	str	r3, [r7, #16]
 8009262:	2300      	movs	r3, #0
 8009264:	8a3a      	ldrh	r2, [r7, #16]
 8009266:	f362 030f 	bfi	r3, r2, #0, #16
 800926a:	8a7a      	ldrh	r2, [r7, #18]
 800926c:	f362 431f 	bfi	r3, r2, #16, #16
}
 8009270:	4618      	mov	r0, r3
 8009272:	3724      	adds	r7, #36	; 0x24
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <FCP_Init>:
 * @todo Complete documentation
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  pHandle->RxTimeoutCountdown = 0;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	825a      	strh	r2, [r3, #18]

  pHandle->TxFrame.Code = 0x0;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	751a      	strb	r2, [r3, #20]
  pHandle->TxFrame.Size = 0;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	755a      	strb	r2, [r3, #21]
  pHandle->TxFrame.FrameCRC = 0;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
  pHandle->TxFrameLevel = 0;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  pHandle->RxFrame.Code = 0x0;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
  pHandle->RxFrame.Size = 0;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
}
 80092d6:	bf00      	nop
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <FCP_SetClient>:
__weak void FCP_SetClient( FCP_Handle_t * pHandle,
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
 80092e2:	b480      	push	{r7}
 80092e4:	b085      	sub	sp, #20
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	60f8      	str	r0, [r7, #12]
 80092ea:	60b9      	str	r1, [r7, #8]
 80092ec:	607a      	str	r2, [r7, #4]
 80092ee:	603b      	str	r3, [r7, #0]
  if ( MC_NULL != pHandle )
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00b      	beq.n	800930e <FCP_SetClient+0x2c>
  {
    pHandle->ClientEntity = pClient;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	601a      	str	r2, [r3, #0]
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	605a      	str	r2, [r3, #4]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	609a      	str	r2, [r3, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	69ba      	ldr	r2, [r7, #24]
 800930c:	60da      	str	r2, [r3, #12]
  }
}
 800930e:	bf00      	nop
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <FCP_CalcCRC>:
    pHandle->RxTimeout = Timeout;
  }
}

__weak uint8_t FCP_CalcCRC( FCP_Frame_t * pFrame )
{
 800931a:	b480      	push	{r7}
 800931c:	b085      	sub	sp, #20
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  uint8_t nCRC = 0;
 8009322:	2300      	movs	r3, #0
 8009324:	73fb      	strb	r3, [r7, #15]
  uint16_t nSum = 0;
 8009326:	2300      	movs	r3, #0
 8009328:	81bb      	strh	r3, [r7, #12]
  uint8_t idx;

  if( MC_NULL != pFrame )
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d027      	beq.n	8009380 <FCP_CalcCRC+0x66>
  {
    nSum += pFrame->Code;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	b29a      	uxth	r2, r3
 8009336:	89bb      	ldrh	r3, [r7, #12]
 8009338:	4413      	add	r3, r2
 800933a:	81bb      	strh	r3, [r7, #12]
    nSum += pFrame->Size;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	785b      	ldrb	r3, [r3, #1]
 8009340:	b29a      	uxth	r2, r3
 8009342:	89bb      	ldrh	r3, [r7, #12]
 8009344:	4413      	add	r3, r2
 8009346:	81bb      	strh	r3, [r7, #12]

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8009348:	2300      	movs	r3, #0
 800934a:	72fb      	strb	r3, [r7, #11]
 800934c:	e00a      	b.n	8009364 <FCP_CalcCRC+0x4a>
    {
      nSum += pFrame->Buffer[idx];
 800934e:	7afb      	ldrb	r3, [r7, #11]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	4413      	add	r3, r2
 8009354:	789b      	ldrb	r3, [r3, #2]
 8009356:	b29a      	uxth	r2, r3
 8009358:	89bb      	ldrh	r3, [r7, #12]
 800935a:	4413      	add	r3, r2
 800935c:	81bb      	strh	r3, [r7, #12]
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800935e:	7afb      	ldrb	r3, [r7, #11]
 8009360:	3301      	adds	r3, #1
 8009362:	72fb      	strb	r3, [r7, #11]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	785b      	ldrb	r3, [r3, #1]
 8009368:	7afa      	ldrb	r2, [r7, #11]
 800936a:	429a      	cmp	r2, r3
 800936c:	d3ef      	bcc.n	800934e <FCP_CalcCRC+0x34>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
 800936e:	89bb      	ldrh	r3, [r7, #12]
 8009370:	73fb      	strb	r3, [r7, #15]
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8009372:	89bb      	ldrh	r3, [r7, #12]
 8009374:	0a1b      	lsrs	r3, r3, #8
 8009376:	b29b      	uxth	r3, r3
 8009378:	b2da      	uxtb	r2, r3
 800937a:	7bfb      	ldrb	r3, [r7, #15]
 800937c:	4413      	add	r3, r2
 800937e:	73fb      	strb	r3, [r7, #15]
  }

  return nCRC ;
 8009380:	7bfb      	ldrb	r3, [r7, #15]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3714      	adds	r7, #20
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 800938e:	b480      	push	{r7}
 8009390:	b085      	sub	sp, #20
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009396:	2300      	movs	r3, #0
 8009398:	81fb      	strh	r3, [r7, #14]
 800939a:	e007      	b.n	80093ac <MPM_Clear+0x1e>
  {
    pHandle->hMeasBuffer[i] = 0;
 800939c:	89fa      	ldrh	r2, [r7, #14]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2100      	movs	r1, #0
 80093a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80093a6:	89fb      	ldrh	r3, [r7, #14]
 80093a8:	3301      	adds	r3, #1
 80093aa:	81fb      	strh	r3, [r7, #14]
 80093ac:	89fb      	ldrh	r3, [r7, #14]
 80093ae:	2b7f      	cmp	r3, #127	; 0x7f
 80093b0:	d9f4      	bls.n	800939c <MPM_Clear+0xe>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

}
 80093c2:	bf00      	nop
 80093c4:	3714      	adds	r7, #20
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <MPM_CalcElMotorPower>:
  *         motor power.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak int16_t MPM_CalcElMotorPower( MotorPowMeas_Handle_t * pHandle, int16_t CurrentMotorPower )
{
 80093ce:	b480      	push	{r7}
 80093d0:	b085      	sub	sp, #20
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	460b      	mov	r3, r1
 80093d8:	807b      	strh	r3, [r7, #2]
  uint16_t i;
  int32_t wAux = 0;
 80093da:	2300      	movs	r3, #0
 80093dc:	60bb      	str	r3, [r7, #8]

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80093e4:	4619      	mov	r1, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	887a      	ldrh	r2, [r7, #2]
 80093ea:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
  pHandle->hNextMeasBufferIndex++;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8009400:	3301      	adds	r3, #1
 8009402:	b29a      	uxth	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8009410:	2b7f      	cmp	r3, #127	; 0x7f
 8009412:	d903      	bls.n	800941c <MPM_CalcElMotorPower+0x4e>
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800941c:	2300      	movs	r3, #0
 800941e:	81fb      	strh	r3, [r7, #14]
 8009420:	e00a      	b.n	8009438 <MPM_CalcElMotorPower+0x6a>
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8009422:	89fa      	ldrh	r2, [r7, #14]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800942a:	461a      	mov	r2, r3
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	4413      	add	r3, r2
 8009430:	60bb      	str	r3, [r7, #8]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009432:	89fb      	ldrh	r3, [r7, #14]
 8009434:	3301      	adds	r3, #1
 8009436:	81fb      	strh	r3, [r7, #14]
 8009438:	89fb      	ldrh	r3, [r7, #14]
 800943a:	2b7f      	cmp	r3, #127	; 0x7f
 800943c:	d9f1      	bls.n	8009422 <MPM_CalcElMotorPower+0x54>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2b00      	cmp	r3, #0
 8009442:	da00      	bge.n	8009446 <MPM_CalcElMotorPower+0x78>
 8009444:	337f      	adds	r3, #127	; 0x7f
 8009446:	11db      	asrs	r3, r3, #7
 8009448:	60bb      	str	r3, [r7, #8]
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	b21a      	sxth	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
 8009454:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <MPM_GetAvrgElMotorPowerW>:
  *         expressed in watt.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  return ( pHandle->hAvrgElMotorPowerW );
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
}
 8009472:	4618      	mov	r0, r3
 8009474:	370c      	adds	r7, #12
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <NTC_SetFaultState>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Updated internal fault status
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
 800947e:	b480      	push	{r7}
 8009480:	b085      	sub	sp, #20
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	8a1a      	ldrh	r2, [r3, #16]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	8b5b      	ldrh	r3, [r3, #26]
 800948e:	429a      	cmp	r2, r3
 8009490:	d902      	bls.n	8009498 <NTC_SetFaultState+0x1a>
  {
    hFault = MC_OVER_TEMP;
 8009492:	2308      	movs	r3, #8
 8009494:	81fb      	strh	r3, [r7, #14]
 8009496:	e00b      	b.n	80094b0 <NTC_SetFaultState+0x32>
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	8a1a      	ldrh	r2, [r3, #16]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	8b9b      	ldrh	r3, [r3, #28]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d202      	bcs.n	80094aa <NTC_SetFaultState+0x2c>
  {
    hFault = MC_NO_ERROR;
 80094a4:	2300      	movs	r3, #0
 80094a6:	81fb      	strh	r3, [r7, #14]
 80094a8:	e002      	b.n	80094b0 <NTC_SetFaultState+0x32>
  }
  else
  {
    hFault = pHandle->hFaultState;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	8adb      	ldrh	r3, [r3, #22]
 80094ae:	81fb      	strh	r3, [r7, #14]
  }
  return hFault;
 80094b0:	89fb      	ldrh	r3, [r7, #14]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <NTC_Init>:
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 *
 *  @p pPWMnCurrentSensor : Handle on the PWMC component to be used for regular conversions
 */
__weak void NTC_Init( NTC_Handle_t * pHandle )
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b082      	sub	sp, #8
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]

  if ( pHandle->bSensorType == REAL_SENSOR )
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10d      	bne.n	80094ea <NTC_Init+0x2c>
  {
    /* Need to be register with RegularConvManager */
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3304      	adds	r3, #4
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7f9 fc5e 	bl	8002d94 <RCM_RegisterRegConv>
 80094d8:	4603      	mov	r3, r0
 80094da:	461a      	mov	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    NTC_Clear( pHandle );
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f80c 	bl	8009500 <NTC_Clear>
  {
    pHandle->hFaultState = MC_NO_ERROR;
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
  }

}
 80094e8:	e006      	b.n	80094f8 <NTC_Init+0x3a>
    pHandle->hFaultState = MC_NO_ERROR;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	82da      	strh	r2, [r3, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	8a5a      	ldrh	r2, [r3, #18]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	821a      	strh	r2, [r3, #16]
}
 80094f8:	bf00      	nop
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <NTC_Clear>:
 * @brief Initializes internal average temperature computed value
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  pHandle->hAvTemp_d = 0u;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	821a      	strh	r2, [r3, #16]
}
 800950e:	bf00      	nop
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr

0800951a <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d12e      	bne.n	8009588 <NTC_CalcAvTemp+0x6e>
  {
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009530:	4618      	mov	r0, r3
 8009532:	f7f9 fce5 	bl	8002f00 <RCM_ExecRegularConv>
 8009536:	4603      	mov	r3, r0
 8009538:	81fb      	strh	r3, [r7, #14]

    if ( hAux != 0xFFFFu )
 800953a:	89fb      	ldrh	r3, [r7, #14]
 800953c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009540:	4293      	cmp	r3, r2
 8009542:	d019      	beq.n	8009578 <NTC_CalcAvTemp+0x5e>
    {
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	8b1b      	ldrh	r3, [r3, #24]
 8009548:	3b01      	subs	r3, #1
 800954a:	60bb      	str	r3, [r7, #8]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	8a1b      	ldrh	r3, [r3, #16]
 8009550:	461a      	mov	r2, r3
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	fb02 f303 	mul.w	r3, r2, r3
 8009558:	60bb      	str	r3, [r7, #8]
      wtemp += hAux;
 800955a:	89fb      	ldrh	r3, [r7, #14]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	4413      	add	r3, r2
 8009560:	60bb      	str	r3, [r7, #8]
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	8b1b      	ldrh	r3, [r3, #24]
 8009566:	461a      	mov	r2, r3
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	fbb3 f3f2 	udiv	r3, r3, r2
 800956e:	60bb      	str	r3, [r7, #8]

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	b29a      	uxth	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	821a      	strh	r2, [r3, #16]
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff ff80 	bl	800947e <NTC_SetFaultState>
 800957e:	4603      	mov	r3, r0
 8009580:	461a      	mov	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	82da      	strh	r2, [r3, #22]
 8009586:	e002      	b.n	800958e <NTC_CalcAvTemp+0x74>
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	82da      	strh	r2, [r3, #22]
  }

  return ( pHandle->hFaultState );
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	8adb      	ldrh	r3, [r3, #22]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <NTC_GetAvTemp_C>:
  * @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @r AverageTemperature : Latest averaged temperature measured (in Celsius degrees)
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
 800959a:	b480      	push	{r7}
 800959c:	b085      	sub	sp, #20
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d11d      	bne.n	80095e6 <NTC_GetAvTemp_C+0x4c>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	8a1b      	ldrh	r3, [r3, #16]
 80095ae:	60fb      	str	r3, [r7, #12]
    wTemp -= ( int32_t )( pHandle->wV0 );
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a1b      	ldr	r3, [r3, #32]
 80095b4:	461a      	mov	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	1a9b      	subs	r3, r3, r2
 80095ba:	60fb      	str	r3, [r7, #12]
    wTemp *= pHandle->hSensitivity;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80095c2:	461a      	mov	r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	fb02 f303 	mul.w	r3, r2, r3
 80095ca:	60fb      	str	r3, [r7, #12]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	da02      	bge.n	80095d8 <NTC_GetAvTemp_C+0x3e>
 80095d2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80095d6:	33ff      	adds	r3, #255	; 0xff
 80095d8:	141b      	asrs	r3, r3, #16
 80095da:	461a      	mov	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80095e0:	4413      	add	r3, r2
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	e002      	b.n	80095ec <NTC_GetAvTemp_C+0x52>
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	8a9b      	ldrh	r3, [r3, #20]
 80095ea:	60fb      	str	r3, [r7, #12]
  }
  return ( ( int16_t )wTemp );
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	b21b      	sxth	r3, r3
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <PID_HandleInit>:
 * @brief  It initializes the handle
 * @param  pHandle: handler of the current instance of the PID component
 * @retval None
 */
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f9b3 2000 	ldrsh.w	r2, [r3]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	809a      	strh	r2, [r3, #4]
  pHandle->hKiGain =  pHandle->hDefKiGain;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	80da      	strh	r2, [r3, #6]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	845a      	strh	r2, [r3, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	609a      	str	r2, [r3, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800962e:	bf00      	nop
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <PID_SetKP>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
 800963a:	b480      	push	{r7}
 800963c:	b083      	sub	sp, #12
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	807b      	strh	r3, [r7, #2]
  pHandle->hKpGain = hKpGain;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	887a      	ldrh	r2, [r7, #2]
 800964a:	809a      	strh	r2, [r3, #4]
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <PID_SetKI>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	807b      	strh	r3, [r7, #2]
  pHandle->hKiGain = hKiGain;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	887a      	ldrh	r2, [r7, #2]
 8009668:	80da      	strh	r2, [r3, #6]
}
 800966a:	bf00      	nop
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <PID_GetKP>:
 * @brief  It returns the Kp gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
 8009676:	b480      	push	{r7}
 8009678:	b083      	sub	sp, #12
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKpGain );
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8009684:	4618      	mov	r0, r3
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <PID_GetKI>:
 * @brief  It returns the Ki gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKiGain );
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <PID_SetIntegralTerm>:
 * pHandle: handler of the current instance of the PID component
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
 80096aa:	b480      	push	{r7}
 80096ac:	b083      	sub	sp, #12
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	6039      	str	r1, [r7, #0]
  pHandle->wIntegralTerm = wIntegralTermValue;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	609a      	str	r2, [r3, #8]

  return;
 80096ba:	bf00      	nop
}
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <PID_GetKPDivisor>:
 * @brief  It returns the Kp gain divisor
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
 80096c6:	b480      	push	{r7}
 80096c8:	b083      	sub	sp, #12
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKpDivisor );
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	8b1b      	ldrh	r3, [r3, #24]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <PID_GetKIDivisor>:
 * @brief  It returns the Ki gain divisor of the passed PI object
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
 80096de:	b480      	push	{r7}
 80096e0:	b083      	sub	sp, #12
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKiDivisor );
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	8b5b      	ldrh	r3, [r3, #26]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	370c      	adds	r7, #12
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <PID_SetKD>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
 80096f6:	b480      	push	{r7}
 80096f8:	b083      	sub	sp, #12
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	460b      	mov	r3, r1
 8009700:	807b      	strh	r3, [r7, #2]
  pHandle->hKdGain = hKdGain;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	887a      	ldrh	r2, [r7, #2]
 8009706:	845a      	strh	r2, [r3, #34]	; 0x22
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <PID_GetKD>:
 * @brief  It returns the Kd gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  return pHandle->hKdGain;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
}
 8009722:	4618      	mov	r0, r3
 8009724:	370c      	adds	r7, #12
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
	...

08009730 <PI_Controller>:
 * @param  wProcessVarError: current process variable error, intended as the reference
 *         value minus the present process variable value
 * @retval computed PI output
 */
__weak int16_t PI_Controller( PID_Handle_t * pHandle, int32_t wProcessVarError )
{
 8009730:	b480      	push	{r7}
 8009732:	b089      	sub	sp, #36	; 0x24
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  int32_t wProportional_Term, wIntegral_Term, wOutput_32, wIntegral_sum_temp;
  int32_t wDischarge = 0;
 800973a:	2300      	movs	r3, #0
 800973c:	617b      	str	r3, [r7, #20]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	8a9b      	ldrh	r3, [r3, #20]
 8009742:	827b      	strh	r3, [r7, #18]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	8adb      	ldrh	r3, [r3, #22]
 8009748:	823b      	strh	r3, [r7, #16]

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009750:	461a      	mov	r2, r3
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	fb02 f303 	mul.w	r3, r2, r3
 8009758:	60fb      	str	r3, [r7, #12]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d103      	bne.n	800976c <PI_Controller+0x3c>
  {
    pHandle->wIntegralTerm = 0;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	609a      	str	r2, [r3, #8]
 800976a:	e03a      	b.n	80097e2 <PI_Controller+0xb2>
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009772:	461a      	mov	r2, r3
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	fb02 f303 	mul.w	r3, r2, r3
 800977a:	60bb      	str	r3, [r7, #8]
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	4413      	add	r3, r2
 8009784:	61bb      	str	r3, [r7, #24]

    if ( wIntegral_sum_temp < 0 )
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	2b00      	cmp	r3, #0
 800978a:	da0a      	bge.n	80097a2 <PI_Controller+0x72>
    {
      if ( pHandle->wIntegralTerm > 0 )
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	dd0f      	ble.n	80097b4 <PI_Controller+0x84>
      {
        if ( wIntegral_Term > 0 )
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	2b00      	cmp	r3, #0
 8009798:	dd0c      	ble.n	80097b4 <PI_Controller+0x84>
        {
          wIntegral_sum_temp = INT32_MAX;
 800979a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800979e:	61bb      	str	r3, [r7, #24]
 80097a0:	e008      	b.n	80097b4 <PI_Controller+0x84>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	da04      	bge.n	80097b4 <PI_Controller+0x84>
      {
        if ( wIntegral_Term < 0 )
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	da01      	bge.n	80097b4 <PI_Controller+0x84>
        {
          wIntegral_sum_temp = -INT32_MAX;
 80097b0:	4b27      	ldr	r3, [pc, #156]	; (8009850 <PI_Controller+0x120>)
 80097b2:	61bb      	str	r3, [r7, #24]
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	69ba      	ldr	r2, [r7, #24]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	dd04      	ble.n	80097c8 <PI_Controller+0x98>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68da      	ldr	r2, [r3, #12]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	609a      	str	r2, [r3, #8]
 80097c6:	e00c      	b.n	80097e2 <PI_Controller+0xb2>
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	69ba      	ldr	r2, [r7, #24]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	da04      	bge.n	80097dc <PI_Controller+0xac>
    {
      pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	691a      	ldr	r2, [r3, #16]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	609a      	str	r2, [r3, #8]
 80097da:	e002      	b.n	80097e2 <PI_Controller+0xb2>
    }
    else
    {
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	69ba      	ldr	r2, [r7, #24]
 80097e0:	609a      	str	r2, [r3, #8]
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	8b9b      	ldrh	r3, [r3, #28]
 80097e6:	461a      	mov	r2, r3
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	fa43 f202 	asr.w	r2, r3, r2
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	6879      	ldr	r1, [r7, #4]
 80097f4:	8bc9      	ldrh	r1, [r1, #30]
 80097f6:	410b      	asrs	r3, r1
 80097f8:	4413      	add	r3, r2
 80097fa:	61fb      	str	r3, [r7, #28]
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 80097fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009800:	69fa      	ldr	r2, [r7, #28]
 8009802:	429a      	cmp	r2, r3
 8009804:	dd08      	ble.n	8009818 <PI_Controller+0xe8>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8009806:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	617b      	str	r3, [r7, #20]
    wOutput_32 = hUpperOutputLimit;
 8009810:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009814:	61fb      	str	r3, [r7, #28]
 8009816:	e00c      	b.n	8009832 <PI_Controller+0x102>
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 8009818:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800981c:	69fa      	ldr	r2, [r7, #28]
 800981e:	429a      	cmp	r2, r3
 8009820:	da07      	bge.n	8009832 <PI_Controller+0x102>
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 8009822:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	617b      	str	r3, [r7, #20]
    wOutput_32 = hLowerOutputLimit;
 800982c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009830:	61fb      	str	r3, [r7, #28]
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	689a      	ldr	r2, [r3, #8]
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	441a      	add	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	609a      	str	r2, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	b21b      	sxth	r3, r3
}
 8009842:	4618      	mov	r0, r3
 8009844:	3724      	adds	r7, #36	; 0x24
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	80000001 	.word	0x80000001

08009854 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8009854:	b590      	push	{r4, r7, lr}
 8009856:	b089      	sub	sp, #36	; 0x24
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8009862:	f107 0310 	add.w	r3, r7, #16
 8009866:	320c      	adds	r2, #12
 8009868:	6810      	ldr	r0, [r2, #0]
 800986a:	6018      	str	r0, [r3, #0]
  qd_t Vqd = pHandle->pFOCVars->Vqd;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8009872:	f107 030c 	add.w	r3, r7, #12
 8009876:	3216      	adds	r2, #22
 8009878:	6810      	ldr	r0, [r2, #0]
 800987a:	6018      	str	r0, [r3, #0]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800987c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009880:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009884:	fb02 f203 	mul.w	r2, r2, r3
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8009888:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800988c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8009890:	fb01 f303 	mul.w	r3, r1, r3
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8009894:	4413      	add	r3, r2
 8009896:	61fb      	str	r3, [r7, #28]
  wAux /= 65536;
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	2b00      	cmp	r3, #0
 800989c:	da02      	bge.n	80098a4 <PQD_CalcElMotorPower+0x50>
 800989e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80098a2:	33ff      	adds	r3, #255	; 0xff
 80098a4:	141b      	asrs	r3, r3, #16
 80098a6:	61fb      	str	r3, [r7, #28]

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff fc67 	bl	8009188 <VBS_GetAvBusVoltage_V>
 80098ba:	4603      	mov	r3, r0
 80098bc:	fb03 f304 	mul.w	r3, r3, r4
 80098c0:	61bb      	str	r3, [r7, #24]
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	4a16      	ldr	r2, [pc, #88]	; (8009920 <PQD_CalcElMotorPower+0xcc>)
 80098c6:	fb82 1203 	smull	r1, r2, r2, r3
 80098ca:	1192      	asrs	r2, r2, #6
 80098cc:	17db      	asrs	r3, r3, #31
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	61bb      	str	r3, [r7, #24]

  wAux3 = wAux * wAux2;
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	69ba      	ldr	r2, [r7, #24]
 80098d6:	fb02 f303 	mul.w	r3, r2, r3
 80098da:	617b      	str	r3, [r7, #20]
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 80098dc:	697a      	ldr	r2, [r7, #20]
 80098de:	4613      	mov	r3, r2
 80098e0:	005b      	lsls	r3, r3, #1
 80098e2:	4413      	add	r3, r2
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	617b      	str	r3, [r7, #20]
  wAux3 /= 10;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	4a0e      	ldr	r2, [pc, #56]	; (8009924 <PQD_CalcElMotorPower+0xd0>)
 80098ec:	fb82 1203 	smull	r1, r2, r2, r3
 80098f0:	1092      	asrs	r2, r2, #2
 80098f2:	17db      	asrs	r3, r3, #31
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	617b      	str	r3, [r7, #20]
  wAux3 /= 65536;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	da02      	bge.n	8009904 <PQD_CalcElMotorPower+0xb0>
 80098fe:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8009902:	33ff      	adds	r3, #255	; 0xff
 8009904:	141b      	asrs	r3, r3, #16
 8009906:	617b      	str	r3, [r7, #20]

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	b212      	sxth	r2, r2
 800990e:	4611      	mov	r1, r2
 8009910:	4618      	mov	r0, r3
 8009912:	f7ff fd5c 	bl	80093ce <MPM_CalcElMotorPower>

}
 8009916:	bf00      	nop
 8009918:	3724      	adds	r7, #36	; 0x24
 800991a:	46bd      	mov	sp, r7
 800991c:	bd90      	pop	{r4, r7, pc}
 800991e:	bf00      	nop
 8009920:	1b4e81b5 	.word	0x1b4e81b5
 8009924:	66666667 	.word	0x66666667

08009928 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8009930:	4b08      	ldr	r3, [pc, #32]	; (8009954 <LL_APB1_GRP1_EnableClock+0x2c>)
 8009932:	69da      	ldr	r2, [r3, #28]
 8009934:	4907      	ldr	r1, [pc, #28]	; (8009954 <LL_APB1_GRP1_EnableClock+0x2c>)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4313      	orrs	r3, r2
 800993a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800993c:	4b05      	ldr	r3, [pc, #20]	; (8009954 <LL_APB1_GRP1_EnableClock+0x2c>)
 800993e:	69da      	ldr	r2, [r3, #28]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4013      	ands	r3, r2
 8009944:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009946:	68fb      	ldr	r3, [r7, #12]
}
 8009948:	bf00      	nop
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	40021000 	.word	0x40021000

08009958 <LL_APB1_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <LL_APB1_GRP1_IsEnabledClock+0x28>)
 8009962:	69da      	ldr	r2, [r3, #28]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4013      	ands	r3, r2
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	429a      	cmp	r2, r3
 800996c:	bf0c      	ite	eq
 800996e:	2301      	moveq	r3, #1
 8009970:	2300      	movne	r3, #0
 8009972:	b2db      	uxtb	r3, r3
}
 8009974:	4618      	mov	r0, r3
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	40021000 	.word	0x40021000

08009984 <LL_APB1_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 800998c:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <LL_APB1_GRP1_DisableClock+0x24>)
 800998e:	69da      	ldr	r2, [r3, #28]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	43db      	mvns	r3, r3
 8009994:	4904      	ldr	r1, [pc, #16]	; (80099a8 <LL_APB1_GRP1_DisableClock+0x24>)
 8009996:	4013      	ands	r3, r2
 8009998:	61cb      	str	r3, [r1, #28]
}
 800999a:	bf00      	nop
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	40021000 	.word	0x40021000

080099ac <LL_TIM_GetCounterMode>:
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80099bc:	4618      	mov	r0, r3
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <LL_TIM_SetTriggerOutput>:
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	431a      	orrs	r2, r3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	605a      	str	r2, [r3, #4]
}
 80099e2:	bf00      	nop
 80099e4:	370c      	adds	r7, #12
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <LL_TIM_ClearFlag_CC1>:
{
 80099ee:	b480      	push	{r7}
 80099f0:	b083      	sub	sp, #12
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f06f 0202 	mvn.w	r2, #2
 80099fc:	611a      	str	r2, [r3, #16]
}
 80099fe:	bf00      	nop
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <LL_TIM_IsActiveFlag_CC1>:
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b083      	sub	sp, #12
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	f003 0302 	and.w	r3, r3, #2
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d101      	bne.n	8009a22 <LL_TIM_IsActiveFlag_CC1+0x18>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e000      	b.n	8009a24 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	f043 0201 	orr.w	r2, r3, #1
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	615a      	str	r2, [r3, #20]
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 8009a56:	2001      	movs	r0, #1
 8009a58:	f7ff ff7e 	bl	8009958 <LL_APB1_GRP1_IsEnabledClock>
 8009a5c:	6078      	str	r0, [r7, #4]
  if ( isTIM2ClockOn == 0 )
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10a      	bne.n	8009a7a <startTimers+0x2a>
  {
    /* Temporary Enable TIM2 clock if not already on */
    LL_APB1_GRP1_EnableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 8009a64:	2001      	movs	r0, #1
 8009a66:	f7ff ff5f 	bl	8009928 <LL_APB1_GRP1_EnableClock>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
 8009a6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8009a6e:	f7ff ffdf 	bl	8009a30 <LL_TIM_GenerateEvent_UPDATE>
    LL_APB1_GRP1_DisableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 8009a72:	2001      	movs	r0, #1
 8009a74:	f7ff ff86 	bl	8009984 <LL_APB1_GRP1_DisableClock>
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8009a78:	e013      	b.n	8009aa2 <startTimers+0x52>
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8009a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a84:	603b      	str	r3, [r7, #0]
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
 8009a86:	2120      	movs	r1, #32
 8009a88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8009a8c:	f7ff ff9c 	bl	80099c8 <LL_TIM_SetTriggerOutput>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
 8009a90:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8009a94:	f7ff ffcc 	bl	8009a30 <LL_TIM_GenerateEvent_UPDATE>
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8009a9e:	f7ff ff93 	bl	80099c8 <LL_TIM_SetTriggerOutput>
}
 8009aa2:	bf00      	nop
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, uint8_t *cnt )
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b086      	sub	sp, #24
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	60f8      	str	r0, [r7, #12]
 8009ab2:	60b9      	str	r1, [r7, #8]
 8009ab4:	603b      	str	r3, [r7, #0]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	71fb      	strb	r3, [r7, #7]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( LL_TIM_GetCounterMode(TIMx) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f7ff ff76 	bl	80099ac <LL_TIM_GetCounterMode>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b60      	cmp	r3, #96	; 0x60
 8009ac4:	d105      	bne.n	8009ad2 <waitForPolarizationEnd+0x28>
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8009ac6:	79fb      	ldrb	r3, [r7, #7]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	015b      	lsls	r3, r3, #5
 8009ace:	82bb      	strh	r3, [r7, #20]
 8009ad0:	e005      	b.n	8009ade <waitForPolarizationEnd+0x34>
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	085b      	lsrs	r3, r3, #1
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	015b      	lsls	r3, r3, #5
 8009adc:	82bb      	strh	r3, [r7, #20]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f7ff ff85 	bl	80099ee <LL_TIM_ClearFlag_CC1>
  hCalibrationPeriodCounter = 0u;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	82fb      	strh	r3, [r7, #22]
  while (*cnt < NB_CONVERSIONS)
 8009ae8:	e017      	b.n	8009b1a <waitForPolarizationEnd+0x70>
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f7ff ff8d 	bl	8009a0a <LL_TIM_IsActiveFlag_CC1>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d011      	beq.n	8009b1a <waitForPolarizationEnd+0x70>
    {
      LL_TIM_ClearFlag_CC1(TIMx);
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f7ff ff79 	bl	80099ee <LL_TIM_ClearFlag_CC1>
      hCalibrationPeriodCounter++;
 8009afc:	8afb      	ldrh	r3, [r7, #22]
 8009afe:	3301      	adds	r3, #1
 8009b00:	82fb      	strh	r3, [r7, #22]
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8009b02:	8afa      	ldrh	r2, [r7, #22]
 8009b04:	8abb      	ldrh	r3, [r7, #20]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d307      	bcc.n	8009b1a <waitForPolarizationEnd+0x70>
      {
        if (*cnt < NB_CONVERSIONS)
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	2b0f      	cmp	r3, #15
 8009b10:	d803      	bhi.n	8009b1a <waitForPolarizationEnd+0x70>
        {
          *SWerror = 1u;
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	2201      	movs	r2, #1
 8009b16:	801a      	strh	r2, [r3, #0]
          break;
 8009b18:	e003      	b.n	8009b22 <waitForPolarizationEnd+0x78>
  while (*cnt < NB_CONVERSIONS)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	2b0f      	cmp	r3, #15
 8009b20:	d9e3      	bls.n	8009aea <waitForPolarizationEnd+0x40>
        }
      }
    }
  }
}
 8009b22:	bf00      	nop
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <PWMC_GetPhaseCurrents>:
  * @param  pHandle handle on the target PWMC component
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	6039      	str	r1, [r7, #0]
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	4798      	blx	r3
}
 8009b3e:	bf00      	nop
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b08a      	sub	sp, #40	; 0x28
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	6039      	str	r1, [r7, #0]
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8009b50:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009b54:	461a      	mov	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009b5a:	fb03 f302 	mul.w	r3, r3, r2
 8009b5e:	61bb      	str	r3, [r7, #24]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8009b60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b64:	461a      	mov	r2, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b6c:	fb03 f202 	mul.w	r2, r3, r2
 8009b70:	4613      	mov	r3, r2
 8009b72:	07db      	lsls	r3, r3, #31
 8009b74:	1a9b      	subs	r3, r3, r2
 8009b76:	005b      	lsls	r3, r3, #1
 8009b78:	617b      	str	r3, [r7, #20]

  wX = wUBeta;
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	613b      	str	r3, [r7, #16]
  wY = ( wUBeta + wUAlpha ) / 2;
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	4413      	add	r3, r2
 8009b84:	0fda      	lsrs	r2, r3, #31
 8009b86:	4413      	add	r3, r2
 8009b88:	105b      	asrs	r3, r3, #1
 8009b8a:	60fb      	str	r3, [r7, #12]
  wZ = ( wUBeta - wUAlpha ) / 2;
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	0fda      	lsrs	r2, r3, #31
 8009b94:	4413      	add	r3, r2
 8009b96:	105b      	asrs	r3, r3, #1
 8009b98:	60bb      	str	r3, [r7, #8]

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f280 80bd 	bge.w	8009d1c <PWMC_SetPhaseVoltage+0x1d6>
  {
    if ( wZ < 0 )
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	da3c      	bge.n	8009c22 <PWMC_SetPhaseVoltage+0xdc>
    {
      pHandle->Sector = SECTOR_5;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2204      	movs	r2, #4
 8009bac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bb6:	089b      	lsrs	r3, r3, #2
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	4619      	mov	r1, r3
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	1ad3      	subs	r3, r2, r3
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	da03      	bge.n	8009bce <PWMC_SetPhaseVoltage+0x88>
 8009bc6:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8009bca:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009bce:	149b      	asrs	r3, r3, #18
 8009bd0:	440b      	add	r3, r1
 8009bd2:	627b      	str	r3, [r7, #36]	; 0x24
      wTimePhB = wTimePhA + wZ / 131072;
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	da03      	bge.n	8009be2 <PWMC_SetPhaseVoltage+0x9c>
 8009bda:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8009bde:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009be2:	145b      	asrs	r3, r3, #17
 8009be4:	461a      	mov	r2, r3
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	4413      	add	r3, r2
 8009bea:	623b      	str	r3, [r7, #32]
      wTimePhC = wTimePhA - wY / 131072;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	da03      	bge.n	8009bfa <PWMC_SetPhaseVoltage+0xb4>
 8009bf2:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8009bf6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009bfa:	145b      	asrs	r3, r3, #17
 8009bfc:	425b      	negs	r3, r3
 8009bfe:	461a      	mov	r2, r3
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	4413      	add	r3, r2
 8009c04:	61fb      	str	r3, [r7, #28]
      pHandle->lowDuty = wTimePhC;
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	879a      	strh	r2, [r3, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	87da      	strh	r2, [r3, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8009c20:	e138      	b.n	8009e94 <PWMC_SetPhaseVoltage+0x34e>
    }
    else /* wZ >= 0 */
      if ( wX <= 0 )
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	dc3c      	bgt.n	8009ca2 <PWMC_SetPhaseVoltage+0x15c>
      {
        pHandle->Sector = SECTOR_4;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2203      	movs	r2, #3
 8009c2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c36:	089b      	lsrs	r3, r3, #2
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	693a      	ldr	r2, [r7, #16]
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	1ad3      	subs	r3, r2, r3
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	da03      	bge.n	8009c4e <PWMC_SetPhaseVoltage+0x108>
 8009c46:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8009c4a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009c4e:	149b      	asrs	r3, r3, #18
 8009c50:	440b      	add	r3, r1
 8009c52:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhB = wTimePhA + wZ / 131072;
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	da03      	bge.n	8009c62 <PWMC_SetPhaseVoltage+0x11c>
 8009c5a:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8009c5e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009c62:	145b      	asrs	r3, r3, #17
 8009c64:	461a      	mov	r2, r3
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	4413      	add	r3, r2
 8009c6a:	623b      	str	r3, [r7, #32]
        wTimePhC = wTimePhB - wX / 131072;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	da03      	bge.n	8009c7a <PWMC_SetPhaseVoltage+0x134>
 8009c72:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8009c76:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009c7a:	145b      	asrs	r3, r3, #17
 8009c7c:	425b      	negs	r3, r3
 8009c7e:	461a      	mov	r2, r3
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	4413      	add	r3, r2
 8009c84:	61fb      	str	r3, [r7, #28]
        pHandle->lowDuty = wTimePhC;
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8009ca0:	e0f8      	b.n	8009e94 <PWMC_SetPhaseVoltage+0x34e>
      }
      else /* wX > 0 */
      {
        pHandle->Sector = SECTOR_3;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2202      	movs	r2, #2
 8009ca6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cb0:	089b      	lsrs	r3, r3, #2
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	da03      	bge.n	8009cc8 <PWMC_SetPhaseVoltage+0x182>
 8009cc0:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8009cc4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009cc8:	149b      	asrs	r3, r3, #18
 8009cca:	440b      	add	r3, r1
 8009ccc:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhC = wTimePhA - wY / 131072;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	da03      	bge.n	8009cdc <PWMC_SetPhaseVoltage+0x196>
 8009cd4:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8009cd8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009cdc:	145b      	asrs	r3, r3, #17
 8009cde:	425b      	negs	r3, r3
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	4413      	add	r3, r2
 8009ce6:	61fb      	str	r3, [r7, #28]
        wTimePhB = wTimePhC + wX / 131072;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	da03      	bge.n	8009cf6 <PWMC_SetPhaseVoltage+0x1b0>
 8009cee:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8009cf2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009cf6:	145b      	asrs	r3, r3, #17
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	623b      	str	r3, [r7, #32]
        pHandle->lowDuty = wTimePhB;
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8009d1a:	e0bb      	b.n	8009e94 <PWMC_SetPhaseVoltage+0x34e>
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	db3c      	blt.n	8009d9c <PWMC_SetPhaseVoltage+0x256>
    {
      pHandle->Sector = SECTOR_2;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d30:	089b      	lsrs	r3, r3, #2
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	4619      	mov	r1, r3
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	da03      	bge.n	8009d48 <PWMC_SetPhaseVoltage+0x202>
 8009d40:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8009d44:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009d48:	149b      	asrs	r3, r3, #18
 8009d4a:	440b      	add	r3, r1
 8009d4c:	627b      	str	r3, [r7, #36]	; 0x24
      wTimePhB = wTimePhA + wZ / 131072;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	da03      	bge.n	8009d5c <PWMC_SetPhaseVoltage+0x216>
 8009d54:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8009d58:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009d5c:	145b      	asrs	r3, r3, #17
 8009d5e:	461a      	mov	r2, r3
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	4413      	add	r3, r2
 8009d64:	623b      	str	r3, [r7, #32]
      wTimePhC = wTimePhA - wY / 131072;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	da03      	bge.n	8009d74 <PWMC_SetPhaseVoltage+0x22e>
 8009d6c:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8009d70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009d74:	145b      	asrs	r3, r3, #17
 8009d76:	425b      	negs	r3, r3
 8009d78:	461a      	mov	r2, r3
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7c:	4413      	add	r3, r2
 8009d7e:	61fb      	str	r3, [r7, #28]
      pHandle->lowDuty = wTimePhB;
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	879a      	strh	r2, [r3, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8009d9a:	e07b      	b.n	8009e94 <PWMC_SetPhaseVoltage+0x34e>
    }
    else /* wZ < 0 */
      if ( wX <= 0 )
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	dc3c      	bgt.n	8009e1c <PWMC_SetPhaseVoltage+0x2d6>
      {
        pHandle->Sector = SECTOR_6;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2205      	movs	r2, #5
 8009da6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009db0:	089b      	lsrs	r3, r3, #2
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	4619      	mov	r1, r3
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	da03      	bge.n	8009dc8 <PWMC_SetPhaseVoltage+0x282>
 8009dc0:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8009dc4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009dc8:	149b      	asrs	r3, r3, #18
 8009dca:	440b      	add	r3, r1
 8009dcc:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhC = wTimePhA - wY / 131072;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	da03      	bge.n	8009ddc <PWMC_SetPhaseVoltage+0x296>
 8009dd4:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8009dd8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009ddc:	145b      	asrs	r3, r3, #17
 8009dde:	425b      	negs	r3, r3
 8009de0:	461a      	mov	r2, r3
 8009de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de4:	4413      	add	r3, r2
 8009de6:	61fb      	str	r3, [r7, #28]
        wTimePhB = wTimePhC + wX / 131072;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	da03      	bge.n	8009df6 <PWMC_SetPhaseVoltage+0x2b0>
 8009dee:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8009df2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009df6:	145b      	asrs	r3, r3, #17
 8009df8:	461a      	mov	r2, r3
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	623b      	str	r3, [r7, #32]
        pHandle->lowDuty = wTimePhA;
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8009e1a:	e03b      	b.n	8009e94 <PWMC_SetPhaseVoltage+0x34e>
      }
      else /* wX > 0 */
      {
        pHandle->Sector = SECTOR_1;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e2a:	089b      	lsrs	r3, r3, #2
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	4619      	mov	r1, r3
 8009e30:	693a      	ldr	r2, [r7, #16]
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	da03      	bge.n	8009e42 <PWMC_SetPhaseVoltage+0x2fc>
 8009e3a:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8009e3e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009e42:	149b      	asrs	r3, r3, #18
 8009e44:	440b      	add	r3, r1
 8009e46:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhB = wTimePhA + wZ / 131072;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	da03      	bge.n	8009e56 <PWMC_SetPhaseVoltage+0x310>
 8009e4e:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8009e52:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009e56:	145b      	asrs	r3, r3, #17
 8009e58:	461a      	mov	r2, r3
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5c:	4413      	add	r3, r2
 8009e5e:	623b      	str	r3, [r7, #32]
        wTimePhC = wTimePhB - wX / 131072;
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	da03      	bge.n	8009e6e <PWMC_SetPhaseVoltage+0x328>
 8009e66:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8009e6a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009e6e:	145b      	asrs	r3, r3, #17
 8009e70:	425b      	negs	r3, r3
 8009e72:	461a      	mov	r2, r3
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	4413      	add	r3, r2
 8009e78:	61fb      	str	r3, [r7, #28]
        pHandle->lowDuty = wTimePhA;
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8009e82:	6a3b      	ldr	r3, [r7, #32]
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      }
  }

  pHandle->CntPhA = ( uint16_t )wTimePhA;
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	865a      	strh	r2, [r3, #50]	; 0x32
  pHandle->CntPhB = ( uint16_t )wTimePhB;
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	869a      	strh	r2, [r3, #52]	; 0x34
  pHandle->CntPhC = ( uint16_t )wTimePhC;
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	86da      	strh	r2, [r3, #54]	; 0x36

  if ( pHandle->DTTest == 1u )
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d147      	bne.n	8009f46 <PWMC_SetPhaseVoltage+0x400>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	dd09      	ble.n	8009ed4 <PWMC_SetPhaseVoltage+0x38e>
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009eca:	4413      	add	r3, r2
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	865a      	strh	r2, [r3, #50]	; 0x32
 8009ed2:	e008      	b.n	8009ee6 <PWMC_SetPhaseVoltage+0x3a0>
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	865a      	strh	r2, [r3, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	dd09      	ble.n	8009f04 <PWMC_SetPhaseVoltage+0x3be>
    {
      pHandle->CntPhB += pHandle->DTCompCnt;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009efa:	4413      	add	r3, r2
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	869a      	strh	r2, [r3, #52]	; 0x34
 8009f02:	e008      	b.n	8009f16 <PWMC_SetPhaseVoltage+0x3d0>
    }
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	869a      	strh	r2, [r3, #52]	; 0x34
    }

    if ( pHandle->Ic > 0 )
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	dd09      	ble.n	8009f34 <PWMC_SetPhaseVoltage+0x3ee>
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009f2a:	4413      	add	r3, r2
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	86da      	strh	r2, [r3, #54]	; 0x36
 8009f32:	e008      	b.n	8009f46 <PWMC_SetPhaseVoltage+0x400>
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	4798      	blx	r3
 8009f4e:	4603      	mov	r3, r0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3728      	adds	r7, #40	; 0x28
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <PWMC_SwitchOffPWM>:
/**
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  pHandle->pFctSwitchOffPwm( pHandle );
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	4798      	blx	r3
}
 8009f68:	bf00      	nop
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	70fb      	strb	r3, [r7, #3]
  bool retVal = false;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	73fb      	strb	r3, [r7, #15]
  if ( action == CRC_START )
 8009f80:	78fb      	ldrb	r3, [r7, #3]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d114      	bne.n	8009fb0 <PWMC_CurrentReadingCalibr+0x40>
  {
    PWMC_SwitchOffPWM( pHandle );
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f7ff ffe6 	bl	8009f58 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d124      	bne.n	8009fec <PWMC_CurrentReadingCalibr+0x7c>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	4798      	blx	r3
      retVal = true;
 8009faa:	2301      	movs	r3, #1
 8009fac:	73fb      	strb	r3, [r7, #15]
 8009fae:	e01d      	b.n	8009fec <PWMC_CurrentReadingCalibr+0x7c>
    }
  }
  else if ( action == CRC_EXEC )
 8009fb0:	78fb      	ldrb	r3, [r7, #3]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d11a      	bne.n	8009fec <PWMC_CurrentReadingCalibr+0x7c>
  {
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d013      	beq.n	8009fe8 <PWMC_CurrentReadingCalibr+0x78>
    {
      pHandle->OffCalibrWaitTimeCounter--;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d108      	bne.n	8009fec <PWMC_CurrentReadingCalibr+0x7c>
      {
        pHandle->pFctCurrReadingCalib( pHandle );
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	4798      	blx	r3
        retVal = true;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	73fb      	strb	r3, [r7, #15]
 8009fe6:	e001      	b.n	8009fec <PWMC_CurrentReadingCalibr+0x7c>
      }
    }
    else
    {
      retVal = true;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	73fb      	strb	r3, [r7, #15]
    }
  }
  else
  {
  }
  return retVal;
 8009fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <PWMC_CheckOverCurrent>:

/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	4798      	blx	r3
 800a006:	4603      	mov	r3, r0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <LL_DBGMCU_APB2_GRP1_FreezePeriph>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800a018:	4b05      	ldr	r3, [pc, #20]	; (800a030 <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 800a01a:	68da      	ldr	r2, [r3, #12]
 800a01c:	4904      	ldr	r1, [pc, #16]	; (800a030 <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4313      	orrs	r3, r2
 800a022:	60cb      	str	r3, [r1, #12]
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	e0042000 	.word	0xe0042000

0800a034 <LL_ADC_INJ_SetSequencerDiscont>:
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	431a      	orrs	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	60da      	str	r2, [r3, #12]
}
 800a04e:	bf00      	nop
 800a050:	370c      	adds	r7, #12
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <LL_ADC_INJ_SetQueueMode>:
{
 800a05a:	b480      	push	{r7}
 800a05c:	b083      	sub	sp, #12
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM, QueueMode);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	431a      	orrs	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	60da      	str	r2, [r3, #12]
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <LL_ADC_EnableInternalRegulator>:
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800a09c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a0a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	609a      	str	r2, [r3, #8]
}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <LL_ADC_IsInternalRegulatorEnabled>:
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0)) == (ADC_CR_ADVREGEN_0));
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0c8:	bf0c      	ite	eq
 800a0ca:	2301      	moveq	r3, #1
 800a0cc:	2300      	movne	r3, #0
 800a0ce:	b2db      	uxtb	r3, r3
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <LL_ADC_Enable>:
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a0f0:	f043 0201 	orr.w	r2, r3, #1
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	609a      	str	r2, [r3, #8]
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <LL_ADC_IsEnabled>:
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	f003 0301 	and.w	r3, r3, #1
 800a114:	2b01      	cmp	r3, #1
 800a116:	bf0c      	ite	eq
 800a118:	2301      	moveq	r3, #1
 800a11a:	2300      	movne	r3, #0
 800a11c:	b2db      	uxtb	r3, r3
}
 800a11e:	4618      	mov	r0, r3
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <LL_ADC_StartCalibration>:
{
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a13c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a140:	683a      	ldr	r2, [r7, #0]
 800a142:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a146:	4313      	orrs	r3, r2
 800a148:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	609a      	str	r2, [r3, #8]
}
 800a150:	bf00      	nop
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <LL_ADC_IsCalibrationOnGoing>:
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a16c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a170:	bf0c      	ite	eq
 800a172:	2301      	moveq	r3, #1
 800a174:	2300      	movne	r3, #0
 800a176:	b2db      	uxtb	r3, r3
}
 800a178:	4618      	mov	r0, r3
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <LL_ADC_INJ_StartConversion>:
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a194:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a198:	f043 0208 	orr.w	r2, r3, #8
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	609a      	str	r2, [r3, #8]
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <LL_ADC_INJ_StopConversion>:
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a1c0:	f043 0220 	orr.w	r2, r3, #32
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	609a      	str	r2, [r3, #8]
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <LL_ADC_IsActiveFlag_ADRDY>:
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	bf0c      	ite	eq
 800a1e8:	2301      	moveq	r3, #1
 800a1ea:	2300      	movne	r3, #0
 800a1ec:	b2db      	uxtb	r3, r3
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	370c      	adds	r7, #12
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr

0800a1fa <LL_ADC_ClearFlag_EOC>:
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	b083      	sub	sp, #12
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2204      	movs	r2, #4
 800a206:	601a      	str	r2, [r3, #0]
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <LL_ADC_ClearFlag_JEOC>:
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2220      	movs	r2, #32
 800a220:	601a      	str	r2, [r3, #0]
}
 800a222:	bf00      	nop
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <LL_ADC_ClearFlag_JEOS>:
{
 800a22e:	b480      	push	{r7}
 800a230:	b083      	sub	sp, #12
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2240      	movs	r2, #64	; 0x40
 800a23a:	601a      	str	r2, [r3, #0]
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <LL_ADC_EnableIT_JEOS>:
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	605a      	str	r2, [r3, #4]
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <LL_ADC_DisableIT_EOC>:
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	f023 0204 	bic.w	r2, r3, #4
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	605a      	str	r2, [r3, #4]
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <LL_ADC_DisableIT_JEOC>:
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	f023 0220 	bic.w	r2, r3, #32
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	605a      	str	r2, [r3, #4]
}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <LL_TIM_DisableCounter>:
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f023 0201 	bic.w	r2, r3, #1
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	601a      	str	r2, [r3, #0]
}
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <LL_TIM_SetCounter>:
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <LL_TIM_SetRepetitionCounter>:
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <LL_TIM_CC_EnableChannel>:
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a1a      	ldr	r2, [r3, #32]
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	431a      	orrs	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	621a      	str	r2, [r3, #32]
}
 800a316:	bf00      	nop
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <LL_TIM_CC_DisableChannel>:
{
 800a322:	b480      	push	{r7}
 800a324:	b083      	sub	sp, #12
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a1a      	ldr	r2, [r3, #32]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	43db      	mvns	r3, r3
 800a334:	401a      	ands	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	621a      	str	r2, [r3, #32]
}
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
	...

0800a348 <LL_TIM_OC_SetMode>:
{
 800a348:	b4b0      	push	{r4, r5, r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d028      	beq.n	800a3ac <LL_TIM_OC_SetMode+0x64>
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	2b04      	cmp	r3, #4
 800a35e:	d023      	beq.n	800a3a8 <LL_TIM_OC_SetMode+0x60>
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	2b10      	cmp	r3, #16
 800a364:	d01e      	beq.n	800a3a4 <LL_TIM_OC_SetMode+0x5c>
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	2b40      	cmp	r3, #64	; 0x40
 800a36a:	d019      	beq.n	800a3a0 <LL_TIM_OC_SetMode+0x58>
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a372:	d013      	beq.n	800a39c <LL_TIM_OC_SetMode+0x54>
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a37a:	d00d      	beq.n	800a398 <LL_TIM_OC_SetMode+0x50>
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a382:	d007      	beq.n	800a394 <LL_TIM_OC_SetMode+0x4c>
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a38a:	d101      	bne.n	800a390 <LL_TIM_OC_SetMode+0x48>
 800a38c:	2307      	movs	r3, #7
 800a38e:	e00e      	b.n	800a3ae <LL_TIM_OC_SetMode+0x66>
 800a390:	2308      	movs	r3, #8
 800a392:	e00c      	b.n	800a3ae <LL_TIM_OC_SetMode+0x66>
 800a394:	2306      	movs	r3, #6
 800a396:	e00a      	b.n	800a3ae <LL_TIM_OC_SetMode+0x66>
 800a398:	2305      	movs	r3, #5
 800a39a:	e008      	b.n	800a3ae <LL_TIM_OC_SetMode+0x66>
 800a39c:	2304      	movs	r3, #4
 800a39e:	e006      	b.n	800a3ae <LL_TIM_OC_SetMode+0x66>
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	e004      	b.n	800a3ae <LL_TIM_OC_SetMode+0x66>
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	e002      	b.n	800a3ae <LL_TIM_OC_SetMode+0x66>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e000      	b.n	800a3ae <LL_TIM_OC_SetMode+0x66>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	3318      	adds	r3, #24
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	4b0c      	ldr	r3, [pc, #48]	; (800a3ec <LL_TIM_OC_SetMode+0xa4>)
 800a3ba:	5c5b      	ldrb	r3, [r3, r1]
 800a3bc:	4413      	add	r3, r2
 800a3be:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800a3c0:	6822      	ldr	r2, [r4, #0]
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	4b0a      	ldr	r3, [pc, #40]	; (800a3f0 <LL_TIM_OC_SetMode+0xa8>)
 800a3c6:	5c5b      	ldrb	r3, [r3, r1]
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	4b0a      	ldr	r3, [pc, #40]	; (800a3f4 <LL_TIM_OC_SetMode+0xac>)
 800a3cc:	408b      	lsls	r3, r1
 800a3ce:	43db      	mvns	r3, r3
 800a3d0:	401a      	ands	r2, r3
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	4b06      	ldr	r3, [pc, #24]	; (800a3f0 <LL_TIM_OC_SetMode+0xa8>)
 800a3d6:	5c5b      	ldrb	r3, [r3, r1]
 800a3d8:	4619      	mov	r1, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	408b      	lsls	r3, r1
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	6023      	str	r3, [r4, #0]
}
 800a3e2:	bf00      	nop
 800a3e4:	3714      	adds	r7, #20
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bcb0      	pop	{r4, r5, r7}
 800a3ea:	4770      	bx	lr
 800a3ec:	0800dcb8 	.word	0x0800dcb8
 800a3f0:	0800dcc4 	.word	0x0800dcc4
 800a3f4:	00010073 	.word	0x00010073

0800a3f8 <LL_TIM_OC_EnablePreload>:
{
 800a3f8:	b4b0      	push	{r4, r5, r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2b01      	cmp	r3, #1
 800a406:	d028      	beq.n	800a45a <LL_TIM_OC_EnablePreload+0x62>
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	2b04      	cmp	r3, #4
 800a40c:	d023      	beq.n	800a456 <LL_TIM_OC_EnablePreload+0x5e>
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b10      	cmp	r3, #16
 800a412:	d01e      	beq.n	800a452 <LL_TIM_OC_EnablePreload+0x5a>
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	2b40      	cmp	r3, #64	; 0x40
 800a418:	d019      	beq.n	800a44e <LL_TIM_OC_EnablePreload+0x56>
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a420:	d013      	beq.n	800a44a <LL_TIM_OC_EnablePreload+0x52>
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a428:	d00d      	beq.n	800a446 <LL_TIM_OC_EnablePreload+0x4e>
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a430:	d007      	beq.n	800a442 <LL_TIM_OC_EnablePreload+0x4a>
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a438:	d101      	bne.n	800a43e <LL_TIM_OC_EnablePreload+0x46>
 800a43a:	2307      	movs	r3, #7
 800a43c:	e00e      	b.n	800a45c <LL_TIM_OC_EnablePreload+0x64>
 800a43e:	2308      	movs	r3, #8
 800a440:	e00c      	b.n	800a45c <LL_TIM_OC_EnablePreload+0x64>
 800a442:	2306      	movs	r3, #6
 800a444:	e00a      	b.n	800a45c <LL_TIM_OC_EnablePreload+0x64>
 800a446:	2305      	movs	r3, #5
 800a448:	e008      	b.n	800a45c <LL_TIM_OC_EnablePreload+0x64>
 800a44a:	2304      	movs	r3, #4
 800a44c:	e006      	b.n	800a45c <LL_TIM_OC_EnablePreload+0x64>
 800a44e:	2303      	movs	r3, #3
 800a450:	e004      	b.n	800a45c <LL_TIM_OC_EnablePreload+0x64>
 800a452:	2302      	movs	r3, #2
 800a454:	e002      	b.n	800a45c <LL_TIM_OC_EnablePreload+0x64>
 800a456:	2301      	movs	r3, #1
 800a458:	e000      	b.n	800a45c <LL_TIM_OC_EnablePreload+0x64>
 800a45a:	2300      	movs	r3, #0
 800a45c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	3318      	adds	r3, #24
 800a462:	461a      	mov	r2, r3
 800a464:	4629      	mov	r1, r5
 800a466:	4b09      	ldr	r3, [pc, #36]	; (800a48c <LL_TIM_OC_EnablePreload+0x94>)
 800a468:	5c5b      	ldrb	r3, [r3, r1]
 800a46a:	4413      	add	r3, r2
 800a46c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a46e:	6822      	ldr	r2, [r4, #0]
 800a470:	4629      	mov	r1, r5
 800a472:	4b07      	ldr	r3, [pc, #28]	; (800a490 <LL_TIM_OC_EnablePreload+0x98>)
 800a474:	5c5b      	ldrb	r3, [r3, r1]
 800a476:	4619      	mov	r1, r3
 800a478:	2308      	movs	r3, #8
 800a47a:	408b      	lsls	r3, r1
 800a47c:	4313      	orrs	r3, r2
 800a47e:	6023      	str	r3, [r4, #0]
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	bcb0      	pop	{r4, r5, r7}
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	0800dcb8 	.word	0x0800dcb8
 800a490:	0800dcc4 	.word	0x0800dcc4

0800a494 <LL_TIM_OC_DisablePreload>:
{
 800a494:	b4b0      	push	{r4, r5, r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d028      	beq.n	800a4f6 <LL_TIM_OC_DisablePreload+0x62>
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	2b04      	cmp	r3, #4
 800a4a8:	d023      	beq.n	800a4f2 <LL_TIM_OC_DisablePreload+0x5e>
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b10      	cmp	r3, #16
 800a4ae:	d01e      	beq.n	800a4ee <LL_TIM_OC_DisablePreload+0x5a>
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	2b40      	cmp	r3, #64	; 0x40
 800a4b4:	d019      	beq.n	800a4ea <LL_TIM_OC_DisablePreload+0x56>
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4bc:	d013      	beq.n	800a4e6 <LL_TIM_OC_DisablePreload+0x52>
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4c4:	d00d      	beq.n	800a4e2 <LL_TIM_OC_DisablePreload+0x4e>
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4cc:	d007      	beq.n	800a4de <LL_TIM_OC_DisablePreload+0x4a>
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4d4:	d101      	bne.n	800a4da <LL_TIM_OC_DisablePreload+0x46>
 800a4d6:	2307      	movs	r3, #7
 800a4d8:	e00e      	b.n	800a4f8 <LL_TIM_OC_DisablePreload+0x64>
 800a4da:	2308      	movs	r3, #8
 800a4dc:	e00c      	b.n	800a4f8 <LL_TIM_OC_DisablePreload+0x64>
 800a4de:	2306      	movs	r3, #6
 800a4e0:	e00a      	b.n	800a4f8 <LL_TIM_OC_DisablePreload+0x64>
 800a4e2:	2305      	movs	r3, #5
 800a4e4:	e008      	b.n	800a4f8 <LL_TIM_OC_DisablePreload+0x64>
 800a4e6:	2304      	movs	r3, #4
 800a4e8:	e006      	b.n	800a4f8 <LL_TIM_OC_DisablePreload+0x64>
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	e004      	b.n	800a4f8 <LL_TIM_OC_DisablePreload+0x64>
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	e002      	b.n	800a4f8 <LL_TIM_OC_DisablePreload+0x64>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e000      	b.n	800a4f8 <LL_TIM_OC_DisablePreload+0x64>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	3318      	adds	r3, #24
 800a4fe:	461a      	mov	r2, r3
 800a500:	4629      	mov	r1, r5
 800a502:	4b09      	ldr	r3, [pc, #36]	; (800a528 <LL_TIM_OC_DisablePreload+0x94>)
 800a504:	5c5b      	ldrb	r3, [r3, r1]
 800a506:	4413      	add	r3, r2
 800a508:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a50a:	6822      	ldr	r2, [r4, #0]
 800a50c:	4629      	mov	r1, r5
 800a50e:	4b07      	ldr	r3, [pc, #28]	; (800a52c <LL_TIM_OC_DisablePreload+0x98>)
 800a510:	5c5b      	ldrb	r3, [r3, r1]
 800a512:	4619      	mov	r1, r3
 800a514:	2308      	movs	r3, #8
 800a516:	408b      	lsls	r3, r1
 800a518:	43db      	mvns	r3, r3
 800a51a:	4013      	ands	r3, r2
 800a51c:	6023      	str	r3, [r4, #0]
}
 800a51e:	bf00      	nop
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	bcb0      	pop	{r4, r5, r7}
 800a526:	4770      	bx	lr
 800a528:	0800dcb8 	.word	0x0800dcb8
 800a52c:	0800dcc4 	.word	0x0800dcc4

0800a530 <LL_TIM_OC_SetCompareCH1>:
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	683a      	ldr	r2, [r7, #0]
 800a53e:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <LL_TIM_OC_SetCompareCH2>:
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	683a      	ldr	r2, [r7, #0]
 800a55a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800a55c:	bf00      	nop
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <LL_TIM_OC_SetCompareCH3>:
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <LL_TIM_OC_SetCompareCH4>:
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	683a      	ldr	r2, [r7, #0]
 800a592:	641a      	str	r2, [r3, #64]	; 0x40
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <LL_TIM_SetTriggerOutput>:
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	431a      	orrs	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	605a      	str	r2, [r3, #4]
}
 800a5ba:	bf00      	nop
 800a5bc:	370c      	adds	r7, #12
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <LL_TIM_EnableAllOutputs>:
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	b083      	sub	sp, #12
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	645a      	str	r2, [r3, #68]	; 0x44
}
 800a5da:	bf00      	nop
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <LL_TIM_DisableAllOutputs>:
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b083      	sub	sp, #12
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	645a      	str	r2, [r3, #68]	; 0x44
}
 800a5fa:	bf00      	nop
 800a5fc:	370c      	adds	r7, #12
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <LL_TIM_ClearFlag_UPDATE>:
{
 800a606:	b480      	push	{r7}
 800a608:	b083      	sub	sp, #12
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f06f 0201 	mvn.w	r2, #1
 800a614:	611a      	str	r2, [r3, #16]
}
 800a616:	bf00      	nop
 800a618:	370c      	adds	r7, #12
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <LL_TIM_IsActiveFlag_UPDATE>:
{
 800a622:	b480      	push	{r7}
 800a624:	b083      	sub	sp, #12
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	f003 0301 	and.w	r3, r3, #1
 800a632:	2b01      	cmp	r3, #1
 800a634:	d101      	bne.n	800a63a <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800a636:	2301      	movs	r3, #1
 800a638:	e000      	b.n	800a63c <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <LL_TIM_ClearFlag_BRK>:
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a656:	611a      	str	r2, [r3, #16]
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <LL_TIM_ClearFlag_BRK2>:
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a672:	611a      	str	r2, [r3, #16]
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <LL_TIM_IsActiveFlag_BRK2>:
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a694:	d101      	bne.n	800a69a <LL_TIM_IsActiveFlag_BRK2+0x1a>
 800a696:	2301      	movs	r3, #1
 800a698:	e000      	b.n	800a69c <LL_TIM_IsActiveFlag_BRK2+0x1c>
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <LL_TIM_EnableIT_UPDATE>:
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	f043 0201 	orr.w	r2, r3, #1
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	60da      	str	r2, [r3, #12]
}
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <LL_TIM_DisableIT_UPDATE>:
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	f023 0201 	bic.w	r2, r3, #1
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	60da      	str	r2, [r3, #12]
}
 800a6dc:	bf00      	nop
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <LL_TIM_EnableIT_BRK>:
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	60da      	str	r2, [r3, #12]
}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <LL_TIM_GenerateEvent_UPDATE>:
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	695b      	ldr	r3, [r3, #20]
 800a714:	f043 0201 	orr.w	r2, r3, #1
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	615a      	str	r2, [r3, #20]
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	683a      	ldr	r2, [r7, #0]
 800a736:	619a      	str	r2, [r3, #24]
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	683a      	ldr	r2, [r7, #0]
 800a752:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <LL_DAC_Enable>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	f003 0310 	and.w	r3, r3, #16
 800a774:	2101      	movs	r1, #1
 800a776:	fa01 f303 	lsl.w	r3, r1, r3
 800a77a:	431a      	orrs	r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	601a      	str	r2, [r3, #0]
          DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <LL_DAC_IsEnabled>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DAC_IsEnabled(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	f003 0310 	and.w	r3, r3, #16
 800a7a0:	2101      	movs	r1, #1
 800a7a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a7a6:	401a      	ands	r2, r3
                   DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	f003 0310 	and.w	r3, r3, #16
 800a7ae:	2101      	movs	r1, #1
 800a7b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	bf0c      	ite	eq
 800a7b8:	2301      	moveq	r3, #1
 800a7ba:	2300      	movne	r3, #0
 800a7bc:	b2db      	uxtb	r3, r3
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	370c      	adds	r7, #12
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr

0800a7ca <LL_DAC_TrigSWConversion>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_TrigSWConversion(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800a7ca:	b480      	push	{r7}
 800a7cc:	b083      	sub	sp, #12
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->SWTRIGR,
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685a      	ldr	r2, [r3, #4]
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	f003 0303 	and.w	r3, r3, #3
 800a7de:	431a      	orrs	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	605a      	str	r2, [r3, #4]
          (DAC_Channel & DAC_SWTR_CHX_MASK));
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <LL_DAC_ConvertData12LeftAligned>:
  *             Refer to device datasheet for channels availability.
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
 800a7f0:	b490      	push	{r4, r7}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	3308      	adds	r3, #8
 800a800:	4619      	mov	r1, r3
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800a808:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800a80c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	fa92 f2a2 	rbit	r2, r2
 800a814:	613a      	str	r2, [r7, #16]
  return result;
 800a816:	693a      	ldr	r2, [r7, #16]
 800a818:	fab2 f282 	clz	r2, r2
 800a81c:	b2d2      	uxtb	r2, r2
 800a81e:	40d3      	lsrs	r3, r2
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	440b      	add	r3, r1
 800a824:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a82c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	4313      	orrs	r3, r2
 800a834:	6023      	str	r3, [r4, #0]
             DAC_DHR12L1_DACC1DHR,
             Data);
}
 800a836:	bf00      	nop
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bc90      	pop	{r4, r7}
 800a83e:	4770      	bx	lr

0800a840 <LL_COMP_GetInputMinus>:
  *         (1) Parameter available on all devices except STM32F301x6/8, STM32F318x8, STM32F302x6/8, STM32F303x6/8, STM32F328xx, STM32F334xx.\n
  *         (2) Parameter available only on devices STM32F303x6/8, STM32F328x8, STM32F334xx.\n
  *         (3) Parameter available on all devices except STM32F301x6/8, STM32F318x8, STM32F302xx.\n
  */
__STATIC_INLINE uint32_t LL_COMP_GetInputMinus(COMP_TypeDef *COMPx)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800a850:	4618      	mov	r0, r3
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <LL_COMP_Enable>:
  * @rmtoll CSR      COMPxEN        LL_COMP_Enable
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f043 0201 	orr.w	r2, r3, #1
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	601a      	str	r2, [r3, #0]
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <LL_COMP_Lock>:
  * @rmtoll CSR      COMPxLOCK      LL_COMP_Lock
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	601a      	str	r2, [r3, #0]
}
 800a890:	bf00      	nop
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <R3_1_Init>:
  *         in three shunt topology using STM32F30X and shared ADC
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_Init( PWMC_R3_1_Handle_t * pHandle )
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b088      	sub	sp, #32
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	61fb      	str	r3, [r7, #28]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	61bb      	str	r3, [r7, #24]
  COMP_TypeDef * COMP_OCPCx = pHandle->pParams_str->CompOCPCSelection;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	617b      	str	r3, [r7, #20]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8c0:	695b      	ldr	r3, [r3, #20]
 800a8c2:	613b      	str	r3, [r7, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	60bb      	str	r3, [r7, #8]

  /*Check that _Super is the first member of the structure PWMC_R3_1_Handle_t */
  if ( ( uint32_t )pHandle == ( uint32_t )&pHandle->_Super )
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	f040 8095 	bne.w	800aa0a <R3_1_Init+0x16e>
  {
    /* disable IT and flags in case of LL driver usage
     * workaround for unwanted interrupt enabling done by LL driver */
    LL_ADC_DisableIT_EOC( ADCx );
 800a8e0:	68b8      	ldr	r0, [r7, #8]
 800a8e2:	f7ff fcc1 	bl	800a268 <LL_ADC_DisableIT_EOC>
    LL_ADC_ClearFlag_EOC( ADCx );
 800a8e6:	68b8      	ldr	r0, [r7, #8]
 800a8e8:	f7ff fc87 	bl	800a1fa <LL_ADC_ClearFlag_EOC>
    LL_ADC_DisableIT_JEOC( ADCx );
 800a8ec:	68b8      	ldr	r0, [r7, #8]
 800a8ee:	f7ff fccb 	bl	800a288 <LL_ADC_DisableIT_JEOC>
    LL_ADC_ClearFlag_JEOC( ADCx );
 800a8f2:	68b8      	ldr	r0, [r7, #8]
 800a8f4:	f7ff fc8e 	bl	800a214 <LL_ADC_ClearFlag_JEOC>

    if ( TIMx == TIM1 )
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	4a46      	ldr	r2, [pc, #280]	; (800aa14 <R3_1_Init+0x178>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d103      	bne.n	800a908 <R3_1_Init+0x6c>
    {
      /* TIM1 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM1_STOP );
 800a900:	2001      	movs	r0, #1
 800a902:	f7ff fb85 	bl	800a010 <LL_DBGMCU_APB2_GRP1_FreezePeriph>
 800a906:	e002      	b.n	800a90e <R3_1_Init+0x72>
    }
#ifdef TIM8    
    else
    {
      /* TIM8 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM8_STOP );
 800a908:	2002      	movs	r0, #2
 800a90a:	f7ff fb81 	bl	800a010 <LL_DBGMCU_APB2_GRP1_FreezePeriph>
    }
#endif
    /* Over current protection phase A */
    if ( COMP_OCPAx != NULL )
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d028      	beq.n	800a966 <R3_1_Init+0xca>
    {
      /* Inverting input*/
      if ( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE )
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a918:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d01c      	beq.n	800a95a <R3_1_Init+0xbe>
      {
        if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 800a920:	69f8      	ldr	r0, [r7, #28]
 800a922:	f7ff ff8d 	bl	800a840 <LL_COMP_GetInputMinus>
 800a926:	4603      	mov	r3, r0
 800a928:	2b40      	cmp	r3, #64	; 0x40
 800a92a:	d108      	bne.n	800a93e <R3_1_Init+0xa2>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_1, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a930:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800a934:	4619      	mov	r1, r3
 800a936:	4838      	ldr	r0, [pc, #224]	; (800aa18 <R3_1_Init+0x17c>)
 800a938:	f000 fe48 	bl	800b5cc <R3_1_SetAOReferenceVoltage>
 800a93c:	e00d      	b.n	800a95a <R3_1_Init+0xbe>
        }
#if defined(DAC_CHANNEL2_SUPPORT)
        else if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH2 )
 800a93e:	69f8      	ldr	r0, [r7, #28]
 800a940:	f7ff ff7e 	bl	800a840 <LL_COMP_GetInputMinus>
 800a944:	4603      	mov	r3, r0
 800a946:	2b50      	cmp	r3, #80	; 0x50
 800a948:	d107      	bne.n	800a95a <R3_1_Init+0xbe>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_2, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a94e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800a952:	4619      	mov	r1, r3
 800a954:	4831      	ldr	r0, [pc, #196]	; (800aa1c <R3_1_Init+0x180>)
 800a956:	f000 fe39 	bl	800b5cc <R3_1_SetAOReferenceVoltage>
        else
        {
        }
      }
      /* Output */
      LL_COMP_Enable ( COMP_OCPAx );
 800a95a:	69f8      	ldr	r0, [r7, #28]
 800a95c:	f7ff ff7e 	bl	800a85c <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPAx );
 800a960:	69f8      	ldr	r0, [r7, #28]
 800a962:	f7ff ff8b 	bl	800a87c <LL_COMP_Lock>
    }

    /* Over current protection phase B */
    if ( COMP_OCPBx != NULL )
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d005      	beq.n	800a978 <R3_1_Init+0xdc>
    {
      LL_COMP_Enable ( COMP_OCPBx );
 800a96c:	69b8      	ldr	r0, [r7, #24]
 800a96e:	f7ff ff75 	bl	800a85c <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPBx );
 800a972:	69b8      	ldr	r0, [r7, #24]
 800a974:	f7ff ff82 	bl	800a87c <LL_COMP_Lock>
    }

    /* Over current protection phase C */
    if ( COMP_OCPCx != NULL )
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d005      	beq.n	800a98a <R3_1_Init+0xee>
    {
      LL_COMP_Enable ( COMP_OCPCx );
 800a97e:	6978      	ldr	r0, [r7, #20]
 800a980:	f7ff ff6c 	bl	800a85c <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPCx );
 800a984:	6978      	ldr	r0, [r7, #20]
 800a986:	f7ff ff79 	bl	800a87c <LL_COMP_Lock>
    }

    /* Over voltage protection */
    if ( COMP_OVPx != NULL )
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d028      	beq.n	800a9e2 <R3_1_Init+0x146>
    {
      /* Inverting input*/
      if ( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE )
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a994:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d01c      	beq.n	800a9d6 <R3_1_Init+0x13a>
      {
        if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 800a99c:	6938      	ldr	r0, [r7, #16]
 800a99e:	f7ff ff4f 	bl	800a840 <LL_COMP_GetInputMinus>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b40      	cmp	r3, #64	; 0x40
 800a9a6:	d108      	bne.n	800a9ba <R3_1_Init+0x11e>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_1, ( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9ac:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	4819      	ldr	r0, [pc, #100]	; (800aa18 <R3_1_Init+0x17c>)
 800a9b4:	f000 fe0a 	bl	800b5cc <R3_1_SetAOReferenceVoltage>
 800a9b8:	e00d      	b.n	800a9d6 <R3_1_Init+0x13a>
        }
#if defined(DAC_CHANNEL2_SUPPORT)
        else if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH2 )
 800a9ba:	6938      	ldr	r0, [r7, #16]
 800a9bc:	f7ff ff40 	bl	800a840 <LL_COMP_GetInputMinus>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b50      	cmp	r3, #80	; 0x50
 800a9c4:	d107      	bne.n	800a9d6 <R3_1_Init+0x13a>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_2, ( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9ca:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	4812      	ldr	r0, [pc, #72]	; (800aa1c <R3_1_Init+0x180>)
 800a9d2:	f000 fdfb 	bl	800b5cc <R3_1_SetAOReferenceVoltage>
        else
        {
        }
      }
      /* Output */
      LL_COMP_Enable ( COMP_OVPx );
 800a9d6:	6938      	ldr	r0, [r7, #16]
 800a9d8:	f7ff ff40 	bl	800a85c <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OVPx );
 800a9dc:	6938      	ldr	r0, [r7, #16]
 800a9de:	f7ff ff4d 	bl	800a87c <LL_COMP_Lock>
    }
    
    if (LL_ADC_IsEnabled (ADCx) == 0)
 800a9e2:	68b8      	ldr	r0, [r7, #8]
 800a9e4:	f7ff fb8e 	bl	800a104 <LL_ADC_IsEnabled>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d108      	bne.n	800aa00 <R3_1_Init+0x164>
    {
      R3_1_ADCxInit (ADCx);
 800a9ee:	68b8      	ldr	r0, [r7, #8]
 800a9f0:	f000 f816 	bl	800aa20 <R3_1_ADCxInit>
      /* Only the Interrupt of the first ADC is enabled. 
       * As Both ADCs are fired by HW at the same moment 
       * It is safe to consider that both conversion are ready at the same time*/
      LL_ADC_ClearFlag_JEOS( ADCx );
 800a9f4:	68b8      	ldr	r0, [r7, #8]
 800a9f6:	f7ff fc1a 	bl	800a22e <LL_ADC_ClearFlag_JEOS>
      LL_ADC_EnableIT_JEOS( ADCx );
 800a9fa:	68b8      	ldr	r0, [r7, #8]
 800a9fc:	f7ff fc24 	bl	800a248 <LL_ADC_EnableIT_JEOS>
    }
    else 
    {
      /* Nothing to do ADCx_1 already configured */
    }
    R3_1_TIMxInit( TIMx, &pHandle->_Super );
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4619      	mov	r1, r3
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f000 f84f 	bl	800aaa8 <R3_1_TIMxInit>
  }
}
 800aa0a:	bf00      	nop
 800aa0c:	3720      	adds	r7, #32
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	40012c00 	.word	0x40012c00
 800aa18:	02100001 	.word	0x02100001
 800aa1c:	15430012 	.word	0x15430012

0800aa20 <R3_1_ADCxInit>:

static void R3_1_ADCxInit( ADC_TypeDef * ADCx )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
     
  if ( LL_ADC_IsInternalRegulatorEnabled(ADCx) == 0u)
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7ff fb43 	bl	800a0b4 <LL_ADC_IsInternalRegulatorEnabled>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d111      	bne.n	800aa58 <R3_1_ADCxInit+0x38>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(ADCx);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7ff fb23 	bl	800a080 <LL_ADC_EnableInternalRegulator>
  
    /* Wait for Regulator Startup time */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 800aa3a:	4b19      	ldr	r3, [pc, #100]	; (800aaa0 <R3_1_ADCxInit+0x80>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	099b      	lsrs	r3, r3, #6
 800aa40:	4a18      	ldr	r2, [pc, #96]	; (800aaa4 <R3_1_ADCxInit+0x84>)
 800aa42:	fba2 2303 	umull	r2, r3, r2, r3
 800aa46:	099b      	lsrs	r3, r3, #6
 800aa48:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800aa4a:	e002      	b.n	800aa52 <R3_1_ADCxInit+0x32>
    {
      wait_loop_index--;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1f9      	bne.n	800aa4c <R3_1_ADCxInit+0x2c>
    }
  }
  
  LL_ADC_StartCalibration( ADCx, LL_ADC_SINGLE_ENDED );
 800aa58:	217f      	movs	r1, #127	; 0x7f
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f7ff fb65 	bl	800a12a <LL_ADC_StartCalibration>
  while ( LL_ADC_IsCalibrationOnGoing( ADCx) == 1u) 
 800aa60:	bf00      	nop
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f7ff fb7a 	bl	800a15c <LL_ADC_IsCalibrationOnGoing>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d0f9      	beq.n	800aa62 <R3_1_ADCxInit+0x42>
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800aa6e:	e002      	b.n	800aa76 <R3_1_ADCxInit+0x56>
  { 
    LL_ADC_Enable(  ADCx );
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f7ff fb33 	bl	800a0dc <LL_ADC_Enable>
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f7ff fbac 	bl	800a1d4 <LL_ADC_IsActiveFlag_ADRDY>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d0f6      	beq.n	800aa70 <R3_1_ADCxInit+0x50>
  }
  /* Clear JSQR from CubeMX setting to avoid not wanting conversion*/
  LL_ADC_INJ_StartConversion( ADCx ); 
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7ff fb7e 	bl	800a184 <LL_ADC_INJ_StartConversion>
  LL_ADC_INJ_StopConversion(ADCx);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7ff fb8f 	bl	800a1ac <LL_ADC_INJ_StopConversion>
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );
 800aa8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7ff fae1 	bl	800a05a <LL_ADC_INJ_SetQueueMode>
 }
 800aa98:	bf00      	nop
 800aa9a:	3710      	adds	r7, #16
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	20000690 	.word	0x20000690
 800aaa4:	053e2d63 	.word	0x053e2d63

0800aaa8 <R3_1_TIMxInit>:
  * @param TIMx: Timer to be initialized
  * @param pHandle: handler of the current instance of the PWM component
  * @retval none
  */
static void R3_1_TIMxInit( TIM_TypeDef * TIMx, PWMC_Handle_t * pHdl )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	60bb      	str	r3, [r7, #8]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  uint32_t Brk2Timeout = 1000;
 800aab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aaba:	60fb      	str	r3, [r7, #12]

  /* disable main TIM counter to ensure
   * a synchronous start by TIM2 trigger */
  LL_TIM_DisableCounter( TIMx );
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f7ff fbf3 	bl	800a2a8 <LL_TIM_DisableCounter>
  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800aac2:	2100      	movs	r1, #0
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f7ff fd6b 	bl	800a5a0 <LL_TIM_SetTriggerOutput>

  /* Enables the TIMx Preload on CC1 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH1 );
 800aaca:	2101      	movs	r1, #1
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f7ff fc93 	bl	800a3f8 <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC2 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH2 );
 800aad2:	2110      	movs	r1, #16
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f7ff fc8f 	bl	800a3f8 <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC3 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH3 );
 800aada:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7ff fc8a 	bl	800a3f8 <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC4 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH4 );
 800aae4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7ff fc85 	bl	800a3f8 <LL_TIM_OC_EnablePreload>
  /* Prepare timer for synchronization */
  LL_TIM_GenerateEvent_UPDATE( TIMx );
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7ff fe0a 	bl	800a708 <LL_TIM_GenerateEvent_UPDATE>
  if ( pHandle->pParams_str->FreqRatio == 2u )
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaf8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	d11f      	bne.n	800ab40 <R3_1_TIMxInit+0x98>
  {
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab04:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d110      	bne.n	800ab2e <R3_1_TIMxInit+0x86>
    {
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab10:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800ab14:	2b03      	cmp	r3, #3
 800ab16:	d10a      	bne.n	800ab2e <R3_1_TIMxInit+0x86>
      {
        /* Set TIMx repetition counter to 1 */
        LL_TIM_SetRepetitionCounter( TIMx, 1 );
 800ab18:	2101      	movs	r1, #1
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7ff fbe2 	bl	800a2e4 <LL_TIM_SetRepetitionCounter>
        LL_TIM_GenerateEvent_UPDATE( TIMx );
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7ff fdf1 	bl	800a708 <LL_TIM_GenerateEvent_UPDATE>
        /* Repetition counter will be set to 3 at next Update */
        LL_TIM_SetRepetitionCounter( TIMx, 3 );
 800ab26:	2103      	movs	r1, #3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7ff fbdb 	bl	800a2e4 <LL_TIM_SetRepetitionCounter>
      }
    }
    LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ab34:	3b01      	subs	r3, #1
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f7ff fbc5 	bl	800a2c8 <LL_TIM_SetCounter>
 800ab3e:	e024      	b.n	800ab8a <R3_1_TIMxInit+0xe2>
  }
  else /* bFreqRatio equal to 1 or 3 */
  {
    if ( pHandle->_Super.Motor == M1 )
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d11f      	bne.n	800ab8a <R3_1_TIMxInit+0xe2>
    {
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab4e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d108      	bne.n	800ab68 <R3_1_TIMxInit+0xc0>
      {
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	4619      	mov	r1, r3
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f7ff fbb1 	bl	800a2c8 <LL_TIM_SetCounter>
 800ab66:	e010      	b.n	800ab8a <R3_1_TIMxInit+0xe2>
      }
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab6c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800ab70:	2b03      	cmp	r3, #3
 800ab72:	d10a      	bne.n	800ab8a <R3_1_TIMxInit+0xe2>
      {
        /* Set TIMx repetition counter to 1 */
        LL_TIM_SetRepetitionCounter( TIMx, 1 );
 800ab74:	2101      	movs	r1, #1
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f7ff fbb4 	bl	800a2e4 <LL_TIM_SetRepetitionCounter>
        LL_TIM_GenerateEvent_UPDATE( TIMx );
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f7ff fdc3 	bl	800a708 <LL_TIM_GenerateEvent_UPDATE>
        /* Repetition counter will be set to 3 at next Update */
        LL_TIM_SetRepetitionCounter( TIMx, 3 );
 800ab82:	2103      	movs	r1, #3
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f7ff fbad 	bl	800a2e4 <LL_TIM_SetRepetitionCounter>
    }
    else
    {
    }
  }
  LL_TIM_ClearFlag_BRK( TIMx );
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7ff fd5c 	bl	800a648 <LL_TIM_ClearFlag_BRK>
  
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab94:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00f      	beq.n	800abbc <R3_1_TIMxInit+0x114>
  {
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800ab9c:	e005      	b.n	800abaa <R3_1_TIMxInit+0x102>
    {
      LL_TIM_ClearFlag_BRK2( TIMx );
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f7ff fd60 	bl	800a664 <LL_TIM_ClearFlag_BRK2>
      Brk2Timeout--;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	3b01      	subs	r3, #1
 800aba8:	60fb      	str	r3, [r7, #12]
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7ff fd68 	bl	800a680 <LL_TIM_IsActiveFlag_BRK2>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d102      	bne.n	800abbc <R3_1_TIMxInit+0x114>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1f0      	bne.n	800ab9e <R3_1_TIMxInit+0xf6>
    }   
  }
  LL_TIM_EnableIT_BRK( TIMx );
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f7ff fd93 	bl	800a6e8 <LL_TIM_EnableIT_BRK>
}
 800abc2:	bf00      	nop
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
	...

0800abcc <R3_1_CurrentReadingPolarization>:
  *         motor
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
void R3_1_CurrentReadingPolarization( PWMC_Handle_t * pHdl )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b086      	sub	sp, #24
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	60fb      	str	r3, [r7, #12]

  pHandle->PhaseAOffset = 0u;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	2200      	movs	r2, #0
 800abec:	65da      	str	r2, [r3, #92]	; 0x5c
  pHandle->PhaseBOffset = 0u;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	2200      	movs	r2, #0
 800abf2:	661a      	str	r2, [r3, #96]	; 0x60
  pHandle->PhaseCOffset = 0u;
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	2200      	movs	r2, #0
 800abf8:	665a      	str	r2, [r3, #100]	; 0x64

  pHandle->PolarizationCounter = 0u;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  /* It forces inactive level on TIMx CHy and CHyN */
  LL_TIM_CC_DisableChannel(TIMx, TIMxCCER_MASK_CH123);
 800ac02:	f240 5155 	movw	r1, #1365	; 0x555
 800ac06:	6938      	ldr	r0, [r7, #16]
 800ac08:	f7ff fb8b 	bl	800a322 <LL_TIM_CC_DisableChannel>

  /* Offset calibration for all phases */
  /* Change function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	4a53      	ldr	r2, [pc, #332]	; (800ad5c <R3_1_CurrentReadingPolarization+0x190>)
 800ac10:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	4a52      	ldr	r2, [pc, #328]	; (800ad60 <R3_1_CurrentReadingPolarization+0x194>)
 800ac16:	619a      	str	r2, [r3, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	2240      	movs	r2, #64	; 0x40
 800ac1c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
     
  /* We want to polarize calibration Phase A and Phase B, so we select SECTOR_5 */
  pHandle->PolarizationSector=SECTOR_5;
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	2204      	movs	r2, #4
 800ac24:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  /* Required to force first polarization conversion on SECTOR_5*/
  pHandle->_Super.Sector = SECTOR_5;   
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	2204      	movs	r2, #4
 800ac2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 fb2d 	bl	800b292 <R3_1_SwitchOnPWM>
  
  /* IF CH4 is enabled, it means that JSQR is now configured to sample polarization current*/
  //while ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 0u )
  //{
  //}
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 800ac38:	bf00      	nop
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac42:	2b70      	cmp	r3, #112	; 0x70
 800ac44:	d1f9      	bne.n	800ac3a <R3_1_CurrentReadingPolarization+0x6e>
  {
  }
  /* It is the right time to start the ADC without unwanted conversion */
  /* Start ADC to wait for external trigger. This is series dependant*/
  LL_ADC_INJ_StartConversion( ADCx );
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f7ff fa9c 	bl	800a184 <LL_ADC_INJ_StartConversion>
  
  /* Wait for NB_CONVERSIONS to be executed */
  waitForPolarizationEnd( TIMx,
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
  		                  &pHandle->_Super.SWerror,
  						  pHandle->pParams_str->RepetitionCounter,
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  waitForPolarizationEnd( TIMx,
 800ac56:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	336e      	adds	r3, #110	; 0x6e
 800ac5e:	6938      	ldr	r0, [r7, #16]
 800ac60:	f7fe ff23 	bl	8009aaa <waitForPolarizationEnd>
  						  &pHandle->PolarizationCounter );

  R3_1_SwitchOffPWM( &pHandle->_Super );
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 fbb4 	bl	800b3d4 <R3_1_SwitchOffPWM>
  
  /* Offset calibration for C phase */
  pHandle->PolarizationCounter = 0u;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  
  /* Change function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	4a3b      	ldr	r2, [pc, #236]	; (800ad64 <R3_1_CurrentReadingPolarization+0x198>)
 800ac78:	605a      	str	r2, [r3, #4]
  /* We want to polarize Phase C, so we select SECTOR_1 */
  pHandle->PolarizationSector=SECTOR_1;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  /* Required to force first polarization conversion on SECTOR_1*/
  pHandle->_Super.Sector = SECTOR_1; 
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f000 fb00 	bl	800b292 <R3_1_SwitchOnPWM>

  /* Wait for NB_CONVERSIONS to be executed */
  waitForPolarizationEnd( TIMx,
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	f103 0138 	add.w	r1, r3, #56	; 0x38
  		                  &pHandle->_Super.SWerror,
  						  pHandle->pParams_str->RepetitionCounter,
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  waitForPolarizationEnd( TIMx,
 800ac9c:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	336e      	adds	r3, #110	; 0x6e
 800aca4:	6938      	ldr	r0, [r7, #16]
 800aca6:	f7fe ff00 	bl	8009aaa <waitForPolarizationEnd>
  						  &pHandle->PolarizationCounter );
  
  R3_1_SwitchOffPWM( &pHandle->_Super );
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	4618      	mov	r0, r3
 800acae:	f000 fb91 	bl	800b3d4 <R3_1_SwitchOffPWM>
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acb6:	091a      	lsrs	r2, r3, #4
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	65da      	str	r2, [r3, #92]	; 0x5c
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acc0:	091a      	lsrs	r2, r3, #4
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	661a      	str	r2, [r3, #96]	; 0x60
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acca:	091a      	lsrs	r2, r3, #4
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Change back function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	4a25      	ldr	r2, [pc, #148]	; (800ad68 <R3_1_CurrentReadingPolarization+0x19c>)
 800acd4:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	4a24      	ldr	r2, [pc, #144]	; (800ad6c <R3_1_CurrentReadingPolarization+0x1a0>)
 800acda:	619a      	str	r2, [r3, #24]

  /* It over write TIMx CCRy wrongly written by FOC during calibration so as to
     force 50% duty cycle on the three inverer legs */
  /* Disable TIMx preload */
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH1);
 800acdc:	2101      	movs	r1, #1
 800acde:	6938      	ldr	r0, [r7, #16]
 800ace0:	f7ff fbd8 	bl	800a494 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH2);  
 800ace4:	2110      	movs	r1, #16
 800ace6:	6938      	ldr	r0, [r7, #16]
 800ace8:	f7ff fbd4 	bl	800a494 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH3);
 800acec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800acf0:	6938      	ldr	r0, [r7, #16]
 800acf2:	f7ff fbcf 	bl	800a494 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800acfc:	4619      	mov	r1, r3
 800acfe:	6938      	ldr	r0, [r7, #16]
 800ad00:	f7ff fc16 	bl	800a530 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2 (TIMx, pHandle->Half_PWMPeriod);
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6938      	ldr	r0, [r7, #16]
 800ad0e:	f7ff fc1d 	bl	800a54c <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3 (TIMx, pHandle->Half_PWMPeriod);
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ad18:	4619      	mov	r1, r3
 800ad1a:	6938      	ldr	r0, [r7, #16]
 800ad1c:	f7ff fc24 	bl	800a568 <LL_TIM_OC_SetCompareCH3>
  /* Enable TIMx preload */
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH1);
 800ad20:	2101      	movs	r1, #1
 800ad22:	6938      	ldr	r0, [r7, #16]
 800ad24:	f7ff fb68 	bl	800a3f8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH2);  
 800ad28:	2110      	movs	r1, #16
 800ad2a:	6938      	ldr	r0, [r7, #16]
 800ad2c:	f7ff fb64 	bl	800a3f8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH3);
 800ad30:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad34:	6938      	ldr	r0, [r7, #16]
 800ad36:	f7ff fb5f 	bl	800a3f8 <LL_TIM_OC_EnablePreload>

  /* It re-enable drive of TIMx CHy and CHyN by TIMx CHyRef*/
  LL_TIM_CC_EnableChannel(TIMx, TIMxCCER_MASK_CH123);
 800ad3a:	f240 5155 	movw	r1, #1365	; 0x555
 800ad3e:	6938      	ldr	r0, [r7, #16]
 800ad40:	f7ff fade 	bl	800a300 <LL_TIM_CC_EnableChannel>
  
  /* At the end of calibration, all phases are at 50% we will sample A&B */
  pHandle->_Super.Sector=SECTOR_5;
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	2204      	movs	r2, #4
 800ad48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  pHandle->BrakeActionLock = false;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

}
 800ad54:	bf00      	nop
 800ad56:	3718      	adds	r7, #24
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	0800b0e9 	.word	0x0800b0e9
 800ad60:	0800af91 	.word	0x0800af91
 800ad64:	0800b179 	.word	0x0800b179
 800ad68:	0800ad71 	.word	0x0800ad71
 800ad6c:	0800afc7 	.word	0x0800afc7

0800ad70 <R3_1_GetPhaseCurrents>:
  * @brief  It computes and return latest converted motor phase currents motor
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in Curr_Components format
  */ 
__weak void R3_1_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b088      	sub	sp, #32
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;  
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	61fb      	str	r3, [r7, #28]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	61bb      	str	r3, [r7, #24]
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ad8c:	75fb      	strb	r3, [r7, #23]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ad92:	7dfb      	ldrb	r3, [r7, #23]
 800ad94:	3308      	adds	r3, #8
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	613b      	str	r3, [r7, #16]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ada4:	7dfb      	ldrb	r3, [r7, #23]
 800ada6:	330e      	adds	r3, #14
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	60fb      	str	r3, [r7, #12]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800adb2:	2100      	movs	r1, #0
 800adb4:	69b8      	ldr	r0, [r7, #24]
 800adb6:	f7ff fbf3 	bl	800a5a0 <LL_TIM_SetTriggerOutput>
  
  switch ( Sector )
 800adba:	7dfb      	ldrb	r3, [r7, #23]
 800adbc:	2b05      	cmp	r3, #5
 800adbe:	f200 80c6 	bhi.w	800af4e <R3_1_GetPhaseCurrents+0x1de>
 800adc2:	a201      	add	r2, pc, #4	; (adr r2, 800adc8 <R3_1_GetPhaseCurrents+0x58>)
 800adc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc8:	0800ae53 	.word	0x0800ae53
 800adcc:	0800aed1 	.word	0x0800aed1
 800add0:	0800aed1 	.word	0x0800aed1
 800add4:	0800ade1 	.word	0x0800ade1
 800add8:	0800ade1 	.word	0x0800ade1
 800addc:	0800ae53 	.word	0x0800ae53
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ade4:	461a      	mov	r2, r3
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800adf2:	dc04      	bgt.n	800adfe <R3_1_GetPhaseCurrents+0x8e>
      {
        Iab->a = -INT16_MAX;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	f248 0201 	movw	r2, #32769	; 0x8001
 800adfa:	801a      	strh	r2, [r3, #0]
 800adfc:	e00c      	b.n	800ae18 <R3_1_GetPhaseCurrents+0xa8>
      }
      else  if ( Aux > INT16_MAX )
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae04:	db04      	blt.n	800ae10 <R3_1_GetPhaseCurrents+0xa0>
      {
        Iab->a = INT16_MAX;
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ae0c:	801a      	strh	r2, [r3, #0]
 800ae0e:	e003      	b.n	800ae18 <R3_1_GetPhaseCurrents+0xa8>
      }
      else
      {
        Iab->a = ( int16_t )Aux;
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	b21a      	sxth	r2, r3
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	801a      	strh	r2, [r3, #0]
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ae2a:	dc04      	bgt.n	800ae36 <R3_1_GetPhaseCurrents+0xc6>
      {
        Iab->b = -INT16_MAX;
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	f248 0201 	movw	r2, #32769	; 0x8001
 800ae32:	805a      	strh	r2, [r3, #2]
      }
      else
      {
        Iab->b = ( int16_t )Aux;
      }
      break;
 800ae34:	e08c      	b.n	800af50 <R3_1_GetPhaseCurrents+0x1e0>
      else  if ( Aux > INT16_MAX )
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae3c:	db04      	blt.n	800ae48 <R3_1_GetPhaseCurrents+0xd8>
        Iab->b = INT16_MAX;
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ae44:	805a      	strh	r2, [r3, #2]
      break;
 800ae46:	e083      	b.n	800af50 <R3_1_GetPhaseCurrents+0x1e0>
        Iab->b = ( int16_t )Aux;
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	b21a      	sxth	r2, r3
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	805a      	strh	r2, [r3, #2]
      break;
 800ae50:	e07e      	b.n	800af50 <R3_1_GetPhaseCurrents+0x1e0>

    case SECTOR_6:
    case SECTOR_1:
      /* Current on Phase A is not accessible     */
      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae56:	461a      	mov	r2, r3
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	1ad3      	subs	r3, r2, r3
 800ae5c:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ae64:	dc04      	bgt.n	800ae70 <R3_1_GetPhaseCurrents+0x100>
      {
        Iab->b = -INT16_MAX;
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	f248 0201 	movw	r2, #32769	; 0x8001
 800ae6c:	805a      	strh	r2, [r3, #2]
 800ae6e:	e00c      	b.n	800ae8a <R3_1_GetPhaseCurrents+0x11a>
      }
      else  if ( Aux > INT16_MAX )
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae76:	db04      	blt.n	800ae82 <R3_1_GetPhaseCurrents+0x112>
      {
        Iab->b = INT16_MAX;
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ae7e:	805a      	strh	r2, [r3, #2]
 800ae80:	e003      	b.n	800ae8a <R3_1_GetPhaseCurrents+0x11a>
      }
      else
      {
        Iab->b = ( int16_t )Aux;
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	b21a      	sxth	r2, r3
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	805a      	strh	r2, [r3, #2]
      }

      /* Ia = -Ic -Ib */
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	69fa      	ldr	r2, [r7, #28]
 800ae8e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ae90:	1a9b      	subs	r3, r3, r2
 800ae92:	60bb      	str	r3, [r7, #8]
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	1a9b      	subs	r3, r3, r2
 800aea0:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux > INT16_MAX )
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aea8:	db04      	blt.n	800aeb4 <R3_1_GetPhaseCurrents+0x144>
      {
        Iab->a = INT16_MAX;
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800aeb0:	801a      	strh	r2, [r3, #0]
      }
      else
      {
        Iab->a = ( int16_t )Aux;
      }
      break;
 800aeb2:	e04d      	b.n	800af50 <R3_1_GetPhaseCurrents+0x1e0>
      else  if ( Aux < -INT16_MAX )
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800aeba:	dc04      	bgt.n	800aec6 <R3_1_GetPhaseCurrents+0x156>
        Iab->a = -INT16_MAX;
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	f248 0201 	movw	r2, #32769	; 0x8001
 800aec2:	801a      	strh	r2, [r3, #0]
      break;
 800aec4:	e044      	b.n	800af50 <R3_1_GetPhaseCurrents+0x1e0>
        Iab->a = ( int16_t )Aux;
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	b21a      	sxth	r2, r3
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	801a      	strh	r2, [r3, #0]
      break;
 800aece:	e03f      	b.n	800af50 <R3_1_GetPhaseCurrents+0x1e0>

    case SECTOR_2:
    case SECTOR_3:
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aed4:	461a      	mov	r2, r3
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	1ad3      	subs	r3, r2, r3
 800aeda:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800aee2:	dc04      	bgt.n	800aeee <R3_1_GetPhaseCurrents+0x17e>
      {
        Iab->a = -INT16_MAX;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	f248 0201 	movw	r2, #32769	; 0x8001
 800aeea:	801a      	strh	r2, [r3, #0]
 800aeec:	e00c      	b.n	800af08 <R3_1_GetPhaseCurrents+0x198>
      }
      else  if ( Aux > INT16_MAX )
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aef4:	db04      	blt.n	800af00 <R3_1_GetPhaseCurrents+0x190>
      {
        Iab->a = INT16_MAX;
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800aefc:	801a      	strh	r2, [r3, #0]
 800aefe:	e003      	b.n	800af08 <R3_1_GetPhaseCurrents+0x198>
      }
      else
      {
        Iab->a = ( int16_t )Aux;
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	b21a      	sxth	r2, r3
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	801a      	strh	r2, [r3, #0]
      }

      /* Ib = -Ic -Ia */
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	69fa      	ldr	r2, [r7, #28]
 800af0c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800af0e:	1a9b      	subs	r3, r3, r2
 800af10:	60bb      	str	r3, [r7, #8]
      Aux -= ( int32_t )Iab->a;             /* Ib */
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af18:	461a      	mov	r2, r3
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	1a9b      	subs	r3, r3, r2
 800af1e:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux > INT16_MAX )
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af26:	db04      	blt.n	800af32 <R3_1_GetPhaseCurrents+0x1c2>
      {
        Iab->b = INT16_MAX;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800af2e:	805a      	strh	r2, [r3, #2]
      }
      else
      {
        Iab->b = ( int16_t )Aux;
      }
      break;
 800af30:	e00e      	b.n	800af50 <R3_1_GetPhaseCurrents+0x1e0>
      else  if ( Aux < -INT16_MAX )
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800af38:	dc04      	bgt.n	800af44 <R3_1_GetPhaseCurrents+0x1d4>
        Iab->b = -INT16_MAX;
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	f248 0201 	movw	r2, #32769	; 0x8001
 800af40:	805a      	strh	r2, [r3, #2]
      break;
 800af42:	e005      	b.n	800af50 <R3_1_GetPhaseCurrents+0x1e0>
        Iab->b = ( int16_t )Aux;
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	b21a      	sxth	r2, r3
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	805a      	strh	r2, [r3, #2]
      break;
 800af4c:	e000      	b.n	800af50 <R3_1_GetPhaseCurrents+0x1e0>

    default:
      break;
 800af4e:	bf00      	nop
  }

  pHandle->_Super.Ia = Iab->a;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	f9b3 2000 	ldrsh.w	r2, [r3]
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  pHandle->_Super.Ib = Iab->b;
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800af62:	69fb      	ldr	r3, [r7, #28]
 800af64:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af6e:	b29b      	uxth	r3, r3
 800af70:	425b      	negs	r3, r3
 800af72:	b29a      	uxth	r2, r3
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	1ad3      	subs	r3, r2, r3
 800af7e:	b29b      	uxth	r3, r3
 800af80:	b21a      	sxth	r2, r3
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800af88:	bf00      	nop
 800af8a:	3720      	adds	r7, #32
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <R3_1_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_1_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return R3_1_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800afb0:	3b01      	subs	r3, #1
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	4619      	mov	r1, r3
 800afb6:	4610      	mov	r0, r2
 800afb8:	f000 f863 	bl	800b082 <R3_1_WriteTIMRegisters>
 800afbc:	4603      	mov	r3, r0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <R3_1_SetADCSampPointSectX>:
  *         And call the WriteTIMRegisters method.
  * @param  pHandle Pointer on the target component instance
  * @retval none
  */
uint16_t R3_1_SetADCSampPointSectX( PWMC_Handle_t * pHdl )
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b086      	sub	sp, #24
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	613b      	str	r3, [r7, #16]
#endif /* __ICCARM__ */
  uint16_t SamplingPoint;
  uint16_t DeltaDuty;

  /* Verify that sampling is possible in the middle of PWM by checking the smallest duty cycle */
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	b29a      	uxth	r2, r3
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afe4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800afe8:	429a      	cmp	r2, r3
 800afea:	d909      	bls.n	800b000 <R3_1_SetADCSampPointSectX+0x3a>
     * (AB are chosen) for all sectors in order to not induce current discontinuities when there are differences
     * between offsets */

    /* sector number needed by GetPhaseCurrent, phase A and B are sampled which corresponds
     * to sector 4 or 5  */
    pHandle->_Super.Sector = SECTOR_5;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	2204      	movs	r2, #4
 800aff0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* set sampling  point trigger in the middle of PWM period */
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800affa:	3b01      	subs	r3, #1
 800affc:	82fb      	strh	r3, [r7, #22]
 800affe:	e035      	b.n	800b06c <R3_1_SetADCSampPointSectX+0xa6>
    /* ADC Injected sequence configuration. The stator phase with minimum value of complementary
        duty cycle is set as first. In every sector there is always one phase with maximum complementary duty,
        one with minimum complementary duty and one with variable complementary duty. In this case, phases
        with variable complementary duty and with maximum duty are converted and the first will be always
        the phase with variable complementary duty cycle */
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	81fb      	strh	r3, [r7, #14]

    /* Definition of crossing point */
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 800b00c:	89fa      	ldrh	r2, [r7, #14]
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b018:	1acb      	subs	r3, r1, r3
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	005b      	lsls	r3, r3, #1
 800b01e:	429a      	cmp	r2, r3
 800b020:	d908      	bls.n	800b034 <R3_1_SetADCSampPointSectX+0x6e>
    {
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b02a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800b02e:	1ad3      	subs	r3, r2, r3
 800b030:	82fb      	strh	r3, [r7, #22]
 800b032:	e01b      	b.n	800b06c <R3_1_SetADCSampPointSectX+0xa6>
    }
    else
    {
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b03c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800b040:	4413      	add	r3, r2
 800b042:	82fb      	strh	r3, [r7, #22]

      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b04a:	8afa      	ldrh	r2, [r7, #22]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d30d      	bcc.n	800b06c <R3_1_SetADCSampPointSectX+0xa6>
      {
         /* ADC trigger edge must be changed from positive to negative */
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	2280      	movs	r2, #128	; 0x80
 800b054:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b05e:	005b      	lsls	r3, r3, #1
 800b060:	b29a      	uxth	r2, r3
 800b062:	8afb      	ldrh	r3, [r7, #22]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	b29b      	uxth	r3, r3
 800b068:	3b01      	subs	r3, #1
 800b06a:	82fb      	strh	r3, [r7, #22]
      }
    }
  }
  return R3_1_WriteTIMRegisters( &pHandle->_Super, SamplingPoint );
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	8afa      	ldrh	r2, [r7, #22]
 800b070:	4611      	mov	r1, r2
 800b072:	4618      	mov	r0, r3
 800b074:	f000 f805 	bl	800b082 <R3_1_WriteTIMRegisters>
 800b078:	4603      	mov	r3, r0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <R3_1_WriteTIMRegisters>:
  *         motor
  * @param  pHandle handler of the current instance of the PWM component
  * @retval none
  */
__STATIC_INLINE uint16_t R3_1_WriteTIMRegisters( PWMC_Handle_t * pHdl, uint16_t SamplingPoint )
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b086      	sub	sp, #24
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	460b      	mov	r3, r1
 800b08c:	807b      	strh	r3, [r7, #2]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	60fb      	str	r3, [r7, #12]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b09e:	4619      	mov	r1, r3
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f7ff fa45 	bl	800a530 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f7ff fa4d 	bl	800a54c <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f7ff fa55 	bl	800a568 <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );
 800b0be:	887b      	ldrh	r3, [r7, #2]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f7ff fa5e 	bl	800a584 <LL_TIM_OC_SetCompareCH4>

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d002      	beq.n	800b0da <R3_1_WriteTIMRegisters+0x58>
  {
    Aux = MC_FOC_DURATION;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	82fb      	strh	r3, [r7, #22]
 800b0d8:	e001      	b.n	800b0de <R3_1_WriteTIMRegisters+0x5c>
  }
  else
  {
    Aux = MC_NO_ERROR;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	82fb      	strh	r3, [r7, #22]
  }
  return Aux;
 800b0de:	8afb      	ldrh	r3, [r7, #22]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3718      	adds	r7, #24
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <R3_1_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHandle Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_1_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	613b      	str	r3, [r7, #16]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800b108:	3308      	adds	r3, #8
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	4413      	add	r3, r2
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	60fb      	str	r3, [r7, #12]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800b11e:	330e      	adds	r3, #14
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	4413      	add	r3, r2
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	60bb      	str	r3, [r7, #8]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800b12a:	2100      	movs	r1, #0
 800b12c:	6938      	ldr	r0, [r7, #16]
 800b12e:	f7ff fa37 	bl	800a5a0 <LL_TIM_SetTriggerOutput>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800b138:	2b0f      	cmp	r3, #15
 800b13a:	d813      	bhi.n	800b164 <R3_1_HFCurrentsPolarizationAB+0x7c>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	441a      	add	r2, r3
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	65da      	str	r2, [r3, #92]	; 0x5c
    pHandle-> PhaseBOffset += ADCDataReg2;
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	441a      	add	r2, r3
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	661a      	str	r2, [r3, #96]	; 0x60
    pHandle->PolarizationCounter++;
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800b15a:	3301      	adds	r3, #1
 800b15c:	b2da      	uxtb	r2, r3
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	2200      	movs	r2, #0
 800b168:	801a      	strh	r2, [r3, #0]
  Iab->b = 0;
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	2200      	movs	r2, #0
 800b16e:	805a      	strh	r2, [r3, #2]
}
 800b170:	bf00      	nop
 800b172:	3718      	adds	r7, #24
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <R3_1_HFCurrentsPolarizationC>:
  *         the offset computation.
  * @param  pHandle Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_1_HFCurrentsPolarizationC( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b086      	sub	sp, #24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	613b      	str	r3, [r7, #16]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800b198:	330e      	adds	r3, #14
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	60fb      	str	r3, [r7, #12]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	6938      	ldr	r0, [r7, #16]
 800b1a8:	f7ff f9fa 	bl	800a5a0 <LL_TIM_SetTriggerOutput>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800b1b2:	2b0f      	cmp	r3, #15
 800b1b4:	d80d      	bhi.n	800b1d2 <R3_1_HFCurrentsPolarizationC+0x5a>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	441a      	add	r2, r3
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	665a      	str	r2, [r3, #100]	; 0x64
    pHandle->PolarizationCounter++;
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	b2da      	uxtb	r2, r3
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	801a      	strh	r2, [r3, #0]
  Iab->b = 0;
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	805a      	strh	r2, [r3, #2]
}
 800b1de:	bf00      	nop
 800b1e0:	3718      	adds	r7, #24
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <R3_1_TurnOnLowSides>:
  *         called each motor start-up when using high voltage drivers
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b084      	sub	sp, #16
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = true;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( pHandle->pParams_str->TIMx );
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	4618      	mov	r0, r3
 800b20a:	f7ff f9fc 	bl	800a606 <LL_TIM_ClearFlag_UPDATE>

  /*Turn on the three low side switches */
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
 800b20e:	2100      	movs	r1, #0
 800b210:	68b8      	ldr	r0, [r7, #8]
 800b212:	f7ff f98d 	bl	800a530 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
 800b216:	2100      	movs	r1, #0
 800b218:	68b8      	ldr	r0, [r7, #8]
 800b21a:	f7ff f997 	bl	800a54c <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );
 800b21e:	2100      	movs	r1, #0
 800b220:	68b8      	ldr	r0, [r7, #8]
 800b222:	f7ff f9a1 	bl	800a568 <LL_TIM_OC_SetCompareCH3>

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800b226:	bf00      	nop
 800b228:	68b8      	ldr	r0, [r7, #8]
 800b22a:	f7ff f9fa 	bl	800a622 <LL_TIM_IsActiveFlag_UPDATE>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d0f9      	beq.n	800b228 <R3_1_TurnOnLowSides+0x42>
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
 800b234:	68b8      	ldr	r0, [r7, #8]
 800b236:	f7ff f9c6 	bl	800a5c6 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b23e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b242:	2b02      	cmp	r3, #2
 800b244:	d121      	bne.n	800b28a <R3_1_TurnOnLowSides+0xa4>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b24a:	699a      	ldr	r2, [r3, #24]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b250:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800b254:	4619      	mov	r1, r3
 800b256:	4610      	mov	r0, r2
 800b258:	f7ff fa66 	bl	800a728 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b260:	69da      	ldr	r2, [r3, #28]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b266:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800b26a:	4619      	mov	r1, r3
 800b26c:	4610      	mov	r0, r2
 800b26e:	f7ff fa5b 	bl	800a728 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b276:	6a1a      	ldr	r2, [r3, #32]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b27c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800b280:	4619      	mov	r1, r3
 800b282:	4610      	mov	r0, r2
 800b284:	f7ff fa50 	bl	800a728 <LL_GPIO_SetOutputPin>
  }
  return;
 800b288:	bf00      	nop
 800b28a:	bf00      	nop
}
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <R3_1_SwitchOnPWM>:
  *         bit
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
 800b292:	b580      	push	{r7, lr}
 800b294:	b084      	sub	sp, #16
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = false;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b2b4:	085b      	lsrs	r3, r3, #1
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	68b8      	ldr	r0, [r7, #8]
 800b2bc:	f7ff f938 	bl	800a530 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b2c6:	085b      	lsrs	r3, r3, #1
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	68b8      	ldr	r0, [r7, #8]
 800b2ce:	f7ff f93d 	bl	800a54c <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b2d8:	085b      	lsrs	r3, r3, #1
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	4619      	mov	r1, r3
 800b2de:	68b8      	ldr	r0, [r7, #8]
 800b2e0:	f7ff f942 	bl	800a568 <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b2ea:	3b05      	subs	r3, #5
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	68b8      	ldr	r0, [r7, #8]
 800b2f0:	f7ff f948 	bl	800a584 <LL_TIM_OC_SetCompareCH4>

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800b2f4:	68b8      	ldr	r0, [r7, #8]
 800b2f6:	f7ff f986 	bl	800a606 <LL_TIM_ClearFlag_UPDATE>
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800b2fa:	bf00      	nop
 800b2fc:	68b8      	ldr	r0, [r7, #8]
 800b2fe:	f7ff f990 	bl	800a622 <LL_TIM_IsActiveFlag_UPDATE>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d0f9      	beq.n	800b2fc <R3_1_SwitchOnPWM+0x6a>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800b308:	68b8      	ldr	r0, [r7, #8]
 800b30a:	f7ff f97c 	bl	800a606 <LL_TIM_ClearFlag_UPDATE>

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b312:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );
 800b31a:	68b8      	ldr	r0, [r7, #8]
 800b31c:	f7ff f953 	bl	800a5c6 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b324:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b328:	2b02      	cmp	r3, #2
 800b32a:	d149      	bne.n	800b3c0 <R3_1_SwitchOnPWM+0x12e>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	6a1a      	ldr	r2, [r3, #32]
 800b330:	f240 5355 	movw	r3, #1365	; 0x555
 800b334:	4013      	ands	r3, r2
 800b336:	2b00      	cmp	r3, #0
 800b338:	d021      	beq.n	800b37e <R3_1_SwitchOnPWM+0xec>
    {
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b33e:	699a      	ldr	r2, [r3, #24]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b344:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800b348:	4619      	mov	r1, r3
 800b34a:	4610      	mov	r0, r2
 800b34c:	f7ff f9ec 	bl	800a728 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b354:	69da      	ldr	r2, [r3, #28]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b35a:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800b35e:	4619      	mov	r1, r3
 800b360:	4610      	mov	r0, r2
 800b362:	f7ff f9e1 	bl	800a728 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b36a:	6a1a      	ldr	r2, [r3, #32]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b370:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800b374:	4619      	mov	r1, r3
 800b376:	4610      	mov	r0, r2
 800b378:	f7ff f9d6 	bl	800a728 <LL_GPIO_SetOutputPin>
 800b37c:	e020      	b.n	800b3c0 <R3_1_SwitchOnPWM+0x12e>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b382:	699a      	ldr	r2, [r3, #24]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b388:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800b38c:	4619      	mov	r1, r3
 800b38e:	4610      	mov	r0, r2
 800b390:	f7ff f9d8 	bl	800a744 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b398:	69da      	ldr	r2, [r3, #28]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b39e:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	4610      	mov	r0, r2
 800b3a6:	f7ff f9cd 	bl	800a744 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3ae:	6a1a      	ldr	r2, [r3, #32]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3b4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	4610      	mov	r0, r2
 800b3bc:	f7ff f9c2 	bl	800a744 <LL_GPIO_ResetOutputPin>
    }
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800b3c0:	68b8      	ldr	r0, [r7, #8]
 800b3c2:	f7ff f920 	bl	800a606 <LL_TIM_ClearFlag_UPDATE>
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
 800b3c6:	68b8      	ldr	r0, [r7, #8]
 800b3c8:	f7ff f96e 	bl	800a6a8 <LL_TIM_EnableIT_UPDATE>
}
 800b3cc:	bf00      	nop
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <R3_1_SwitchOffPWM>:
/**
 * @brief  Disables PWM generation on the proper Timer peripheral acting on  MOE bit
 * @param pHdl handler of the current instance of the PWM component
 */
__weak void R3_1_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	60bb      	str	r3, [r7, #8]

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );
 800b3e8:	68b8      	ldr	r0, [r7, #8]
 800b3ea:	f7ff f96d 	bl	800a6c8 <LL_TIM_DisableIT_UPDATE>

  pHandle->_Super.TurnOnLowSidesAction = false;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
 800b3f6:	68b8      	ldr	r0, [r7, #8]
 800b3f8:	f7ff f8f5 	bl	800a5e6 <LL_TIM_DisableAllOutputs>
  if ( pHandle->BrakeActionLock == true )
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800b402:	2b00      	cmp	r3, #0
 800b404:	d126      	bne.n	800b454 <R3_1_SwitchOffPWM+0x80>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b40a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b40e:	2b02      	cmp	r3, #2
 800b410:	d120      	bne.n	800b454 <R3_1_SwitchOffPWM+0x80>
    {
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b416:	699a      	ldr	r2, [r3, #24]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b41c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800b420:	4619      	mov	r1, r3
 800b422:	4610      	mov	r0, r2
 800b424:	f7ff f98e 	bl	800a744 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b42c:	69da      	ldr	r2, [r3, #28]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b432:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800b436:	4619      	mov	r1, r3
 800b438:	4610      	mov	r0, r2
 800b43a:	f7ff f983 	bl	800a744 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b442:	6a1a      	ldr	r2, [r3, #32]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b448:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800b44c:	4619      	mov	r1, r3
 800b44e:	4610      	mov	r0, r2
 800b450:	f7ff f978 	bl	800a744 <LL_GPIO_ResetOutputPin>
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800b454:	68b8      	ldr	r0, [r7, #8]
 800b456:	f7ff f8d6 	bl	800a606 <LL_TIM_ClearFlag_UPDATE>
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800b45a:	bf00      	nop
 800b45c:	68b8      	ldr	r0, [r7, #8]
 800b45e:	f7ff f8e0 	bl	800a622 <LL_TIM_IsActiveFlag_UPDATE>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d0f9      	beq.n	800b45c <R3_1_SwitchOffPWM+0x88>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800b468:	68b8      	ldr	r0, [r7, #8]
 800b46a:	f7ff f8cc 	bl	800a606 <LL_TIM_ClearFlag_UPDATE>

}
 800b46e:	bf00      	nop
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <R3_1_TIMx_UP_IRQHandler>:
  *        sampling point
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_1_TIMx_UP_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b084      	sub	sp, #16
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	60bb      	str	r3, [r7, #8]
  
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b498:	3314      	adds	r3, #20
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4413      	add	r3, r2
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 800b4a6:	431a      	orrs	r2, r3
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* enable ADC trigger source */
    //LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_OC4REF);
 800b4ac:	2170      	movs	r1, #112	; 0x70
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	f7ff f876 	bl	800a5a0 <LL_TIM_SetTriggerOutput>
    
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2240      	movs	r2, #64	; 0x40
 800b4b8:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

  return &( pHandle->_Super.Motor );
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	3346      	adds	r3, #70	; 0x46
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <R3_1_BRK2_IRQHandler>:
  * @brief  It contains the TIMx Break2 event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_1_BRK2_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  if ( pHandle->BrakeActionLock == false )
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800b4d6:	f083 0301 	eor.w	r3, r3, #1
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d026      	beq.n	800b52e <R3_1_BRK2_IRQHandler+0x66>
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4e4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d120      	bne.n	800b52e <R3_1_BRK2_IRQHandler+0x66>
    {
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4f0:	699a      	ldr	r2, [r3, #24]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4f6:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	f7ff f921 	bl	800a744 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b506:	69da      	ldr	r2, [r3, #28]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b50c:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800b510:	4619      	mov	r1, r3
 800b512:	4610      	mov	r0, r2
 800b514:	f7ff f916 	bl	800a744 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b51c:	6a1a      	ldr	r2, [r3, #32]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b522:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800b526:	4619      	mov	r1, r3
 800b528:	4610      	mov	r0, r2
 800b52a:	f7ff f90b 	bl	800a744 <LL_GPIO_ResetOutputPin>
    }
  }
  pHandle->OverCurrentFlag = true;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return &( pHandle->_Super.Motor );
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	3346      	adds	r3, #70	; 0x46
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <R3_1_BRK_IRQHandler>:
  * @brief  It contains the TIMx Break1 event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_1_BRK_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 800b542:	b480      	push	{r7}
 800b544:	b083      	sub	sp, #12
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]

  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b55c:	645a      	str	r2, [r3, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2201      	movs	r2, #1
 800b562:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  pHandle->BrakeActionLock = true;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2201      	movs	r2, #1
 800b56a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  return &( pHandle->_Super.Motor );
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	3346      	adds	r3, #70	; 0x46
}
 800b572:	4618      	mov	r0, r3
 800b574:	370c      	adds	r7, #12
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr

0800b57e <R3_1_IsOverCurrentOccurred>:
  * @param  pHandle Pointer on the target component instance
  * @retval uint16_t It returns MC_BREAK_IN whether an overcurrent has been
  *                  detected since last method call, MC_NO_FAULTS otherwise.
  */
__weak uint16_t R3_1_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
 800b57e:	b480      	push	{r7}
 800b580:	b085      	sub	sp, #20
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	60bb      	str	r3, [r7, #8]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  uint16_t retVal = MC_NO_FAULTS;
 800b58a:	2300      	movs	r3, #0
 800b58c:	81fb      	strh	r3, [r7, #14]

  if ( pHandle->OverVoltageFlag == true )
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800b594:	2b00      	cmp	r3, #0
 800b596:	d005      	beq.n	800b5a4 <R3_1_IsOverCurrentOccurred+0x26>
  {
    retVal = MC_OVER_VOLT;
 800b598:	2302      	movs	r3, #2
 800b59a:	81fb      	strh	r3, [r7, #14]
    pHandle->OverVoltageFlag = false;
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  }

  if ( pHandle->OverCurrentFlag == true )
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d007      	beq.n	800b5be <R3_1_IsOverCurrentOccurred+0x40>
  {
    retVal |= MC_BREAK_IN;
 800b5ae:	89fb      	ldrh	r3, [r7, #14]
 800b5b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5b4:	81fb      	strh	r3, [r7, #14]
    pHandle->OverCurrentFlag = false;
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  }

  return retVal;
 800b5be:	89fb      	ldrh	r3, [r7, #14]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3714      	adds	r7, #20
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <R3_1_SetAOReferenceVoltage>:
  * @param  hDACVref Value of DAC reference expressed as 16bit unsigned integer.
  *         Ex. 0 = 0V 65536 = VDD_DAC.
  * @retval none
  */
static void R3_1_SetAOReferenceVoltage( uint32_t DAC_Channel, uint16_t hDACVref )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	807b      	strh	r3, [r7, #2]
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 800b5d8:	887b      	ldrh	r3, [r7, #2]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	6879      	ldr	r1, [r7, #4]
 800b5de:	481d      	ldr	r0, [pc, #116]	; (800b654 <R3_1_SetAOReferenceVoltage+0x88>)
 800b5e0:	f7ff f906 	bl	800a7f0 <LL_DAC_ConvertData12LeftAligned>

  /* Enable DAC Channel */
  LL_DAC_TrigSWConversion ( DAC1, DAC_Channel );
 800b5e4:	6879      	ldr	r1, [r7, #4]
 800b5e6:	481b      	ldr	r0, [pc, #108]	; (800b654 <R3_1_SetAOReferenceVoltage+0x88>)
 800b5e8:	f7ff f8ef 	bl	800a7ca <LL_DAC_TrigSWConversion>
  
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 800b5ec:	6879      	ldr	r1, [r7, #4]
 800b5ee:	4819      	ldr	r0, [pc, #100]	; (800b654 <R3_1_SetAOReferenceVoltage+0x88>)
 800b5f0:	f7ff f8cc 	bl	800a78c <LL_DAC_IsEnabled>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d112      	bne.n	800b620 <R3_1_SetAOReferenceVoltage+0x54>
  { /* If DAC is already enable, we wait LL_DAC_DELAY_VOLTAGE_SETTLING_US*/
    uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));      
 800b5fa:	4b17      	ldr	r3, [pc, #92]	; (800b658 <R3_1_SetAOReferenceVoltage+0x8c>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a17      	ldr	r2, [pc, #92]	; (800b65c <R3_1_SetAOReferenceVoltage+0x90>)
 800b600:	fba2 2303 	umull	r2, r3, r2, r3
 800b604:	0cda      	lsrs	r2, r3, #19
 800b606:	4613      	mov	r3, r2
 800b608:	005b      	lsls	r3, r3, #1
 800b60a:	4413      	add	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800b610:	e002      	b.n	800b618 <R3_1_SetAOReferenceVoltage+0x4c>
    {
      wait_loop_index--;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	3b01      	subs	r3, #1
 800b616:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1f9      	bne.n	800b612 <R3_1_SetAOReferenceVoltage+0x46>
    while(wait_loop_index != 0UL)
    {
      wait_loop_index--;
    }    
  }
}
 800b61e:	e014      	b.n	800b64a <R3_1_SetAOReferenceVoltage+0x7e>
    LL_DAC_Enable ( DAC1, DAC_Channel );
 800b620:	6879      	ldr	r1, [r7, #4]
 800b622:	480c      	ldr	r0, [pc, #48]	; (800b654 <R3_1_SetAOReferenceVoltage+0x88>)
 800b624:	f7ff f89c 	bl	800a760 <LL_DAC_Enable>
    uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));      
 800b628:	4b0b      	ldr	r3, [pc, #44]	; (800b658 <R3_1_SetAOReferenceVoltage+0x8c>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a0b      	ldr	r2, [pc, #44]	; (800b65c <R3_1_SetAOReferenceVoltage+0x90>)
 800b62e:	fba2 2303 	umull	r2, r3, r2, r3
 800b632:	0cda      	lsrs	r2, r3, #19
 800b634:	4613      	mov	r3, r2
 800b636:	011b      	lsls	r3, r3, #4
 800b638:	1a9b      	subs	r3, r3, r2
 800b63a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800b63c:	e002      	b.n	800b644 <R3_1_SetAOReferenceVoltage+0x78>
      wait_loop_index--;
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	3b01      	subs	r3, #1
 800b642:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1f9      	bne.n	800b63e <R3_1_SetAOReferenceVoltage+0x72>
}
 800b64a:	bf00      	nop
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	40007400 	.word	0x40007400
 800b658:	20000690 	.word	0x20000690
 800b65c:	431bde83 	.word	0x431bde83

0800b660 <R3_1_RLDetectionModeEnable>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @param  hDuty to be applied in uint16_t
  * @retval none
  */
void R3_1_RLDetectionModeEnable( PWMC_Handle_t * pHdl )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	60bb      	str	r3, [r7, #8]
  
  if ( pHandle->_Super.RLDetectionMode == false )
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b67a:	f083 0301 	eor.w	r3, r3, #1
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	2b00      	cmp	r3, #0
 800b682:	d047      	beq.n	800b714 <R3_1_RLDetectionModeEnable+0xb4>
  {
    /*  Channel1 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 800b684:	2260      	movs	r2, #96	; 0x60
 800b686:	2101      	movs	r1, #1
 800b688:	68b8      	ldr	r0, [r7, #8]
 800b68a:	f7fe fe5d 	bl	800a348 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1 );
 800b68e:	2101      	movs	r1, #1
 800b690:	68b8      	ldr	r0, [r7, #8]
 800b692:	f7fe fe35 	bl	800a300 <LL_TIM_CC_EnableChannel>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800b696:	2104      	movs	r1, #4
 800b698:	68b8      	ldr	r0, [r7, #8]
 800b69a:	f7fe fe42 	bl	800a322 <LL_TIM_CC_DisableChannel>
    LL_TIM_OC_SetCompareCH1( TIMx, 0u );
 800b69e:	2100      	movs	r1, #0
 800b6a0:	68b8      	ldr	r0, [r7, #8]
 800b6a2:	f7fe ff45 	bl	800a530 <LL_TIM_OC_SetCompareCH1>

    /*  Channel2 configuration */
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6aa:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d10d      	bne.n	800b6ce <R3_1_RLDetectionModeEnable+0x6e>
    {
      LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_ACTIVE );
 800b6b2:	2210      	movs	r2, #16
 800b6b4:	2110      	movs	r1, #16
 800b6b6:	68b8      	ldr	r0, [r7, #8]
 800b6b8:	f7fe fe46 	bl	800a348 <LL_TIM_OC_SetMode>
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800b6bc:	2110      	movs	r1, #16
 800b6be:	68b8      	ldr	r0, [r7, #8]
 800b6c0:	f7fe fe2f 	bl	800a322 <LL_TIM_CC_DisableChannel>
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800b6c4:	2140      	movs	r1, #64	; 0x40
 800b6c6:	68b8      	ldr	r0, [r7, #8]
 800b6c8:	f7fe fe1a 	bl	800a300 <LL_TIM_CC_EnableChannel>
 800b6cc:	e012      	b.n	800b6f4 <R3_1_RLDetectionModeEnable+0x94>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6d2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	d10c      	bne.n	800b6f4 <R3_1_RLDetectionModeEnable+0x94>
    {
      LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_INACTIVE );
 800b6da:	2220      	movs	r2, #32
 800b6dc:	2110      	movs	r1, #16
 800b6de:	68b8      	ldr	r0, [r7, #8]
 800b6e0:	f7fe fe32 	bl	800a348 <LL_TIM_OC_SetMode>
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800b6e4:	2110      	movs	r1, #16
 800b6e6:	68b8      	ldr	r0, [r7, #8]
 800b6e8:	f7fe fe0a 	bl	800a300 <LL_TIM_CC_EnableChannel>
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800b6ec:	2140      	movs	r1, #64	; 0x40
 800b6ee:	68b8      	ldr	r0, [r7, #8]
 800b6f0:	f7fe fe17 	bl	800a322 <LL_TIM_CC_DisableChannel>
    else
    {
    }

    /*  Channel3 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM2 );
 800b6f4:	2270      	movs	r2, #112	; 0x70
 800b6f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b6fa:	68b8      	ldr	r0, [r7, #8]
 800b6fc:	f7fe fe24 	bl	800a348 <LL_TIM_OC_SetMode>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3 );
 800b700:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b704:	68b8      	ldr	r0, [r7, #8]
 800b706:	f7fe fe0c 	bl	800a322 <LL_TIM_CC_DisableChannel>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800b70a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b70e:	68b8      	ldr	r0, [r7, #8]
 800b710:	f7fe fe07 	bl	800a322 <LL_TIM_CC_DisableChannel>
   
  }

  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	4a09      	ldr	r2, [pc, #36]	; (800b73c <R3_1_RLDetectionModeEnable+0xdc>)
 800b718:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	4a08      	ldr	r2, [pc, #32]	; (800b740 <R3_1_RLDetectionModeEnable+0xe0>)
 800b71e:	615a      	str	r2, [r3, #20]
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	4a08      	ldr	r2, [pc, #32]	; (800b744 <R3_1_RLDetectionModeEnable+0xe4>)
 800b724:	60da      	str	r2, [r3, #12]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	4a07      	ldr	r2, [pc, #28]	; (800b748 <R3_1_RLDetectionModeEnable+0xe8>)
 800b72a:	609a      	str	r2, [r3, #8]

  pHandle->_Super.RLDetectionMode = true;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2201      	movs	r2, #1
 800b730:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
}
 800b734:	bf00      	nop
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	0800b939 	.word	0x0800b939
 800b740:	0800b9b5 	.word	0x0800b9b5
 800b744:	0800ba49 	.word	0x0800ba49
 800b748:	0800b3d5 	.word	0x0800b3d5

0800b74c <R3_1_RLDetectionModeDisable>:
 * @brief  It is used to disable the PWM mode for R/L detection.
 * @param  pHdl: handler of the current instance of the PWM component
 * @retval none
 */
void R3_1_RLDetectionModeDisable( PWMC_Handle_t * pHdl )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	60bb      	str	r3, [r7, #8]

  if ( pHandle->_Super.RLDetectionMode == true )
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b766:	2b00      	cmp	r3, #0
 800b768:	f000 809e 	beq.w	800b8a8 <R3_1_RLDetectionModeDisable+0x15c>

    /* The folowing while cycles ensure the identification of the positive counting mode of TIM1
     * for correct reactivation of Repetition Counter value of TIM1.*/

    /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 800b76c:	bf00      	nop
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f003 0310 	and.w	r3, r3, #16
 800b776:	2b00      	cmp	r3, #0
 800b778:	d0f9      	beq.n	800b76e <R3_1_RLDetectionModeDisable+0x22>
    {
    }
    /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction.*/
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 800b77a:	bf00      	nop
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 0310 	and.w	r3, r3, #16
 800b784:	2b10      	cmp	r3, #16
 800b786:	d0f9      	beq.n	800b77c <R3_1_RLDetectionModeDisable+0x30>
    {
    } 

    /* Repetition Counter of TIM1 User value reactivation END*/    /*  Channel1 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 800b788:	2260      	movs	r2, #96	; 0x60
 800b78a:	2101      	movs	r1, #1
 800b78c:	68b8      	ldr	r0, [r7, #8]
 800b78e:	f7fe fddb 	bl	800a348 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1 );
 800b792:	2101      	movs	r1, #1
 800b794:	68b8      	ldr	r0, [r7, #8]
 800b796:	f7fe fdb3 	bl	800a300 <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b79e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d104      	bne.n	800b7b0 <R3_1_RLDetectionModeDisable+0x64>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800b7a6:	2104      	movs	r1, #4
 800b7a8:	68b8      	ldr	r0, [r7, #8]
 800b7aa:	f7fe fda9 	bl	800a300 <LL_TIM_CC_EnableChannel>
 800b7ae:	e009      	b.n	800b7c4 <R3_1_RLDetectionModeDisable+0x78>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7b4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	d103      	bne.n	800b7c4 <R3_1_RLDetectionModeDisable+0x78>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800b7bc:	2104      	movs	r1, #4
 800b7be:	68b8      	ldr	r0, [r7, #8]
 800b7c0:	f7fe fdaf 	bl	800a322 <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b7ca:	085b      	lsrs	r3, r3, #1
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	68b8      	ldr	r0, [r7, #8]
 800b7d2:	f7fe fead 	bl	800a530 <LL_TIM_OC_SetCompareCH1>

    /*  Channel2 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1 );
 800b7d6:	2260      	movs	r2, #96	; 0x60
 800b7d8:	2110      	movs	r1, #16
 800b7da:	68b8      	ldr	r0, [r7, #8]
 800b7dc:	f7fe fdb4 	bl	800a348 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800b7e0:	2110      	movs	r1, #16
 800b7e2:	68b8      	ldr	r0, [r7, #8]
 800b7e4:	f7fe fd8c 	bl	800a300 <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7ec:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d104      	bne.n	800b7fe <R3_1_RLDetectionModeDisable+0xb2>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800b7f4:	2140      	movs	r1, #64	; 0x40
 800b7f6:	68b8      	ldr	r0, [r7, #8]
 800b7f8:	f7fe fd82 	bl	800a300 <LL_TIM_CC_EnableChannel>
 800b7fc:	e009      	b.n	800b812 <R3_1_RLDetectionModeDisable+0xc6>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b802:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b806:	2b02      	cmp	r3, #2
 800b808:	d103      	bne.n	800b812 <R3_1_RLDetectionModeDisable+0xc6>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800b80a:	2140      	movs	r1, #64	; 0x40
 800b80c:	68b8      	ldr	r0, [r7, #8]
 800b80e:	f7fe fd88 	bl	800a322 <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH2( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b818:	085b      	lsrs	r3, r3, #1
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	4619      	mov	r1, r3
 800b81e:	68b8      	ldr	r0, [r7, #8]
 800b820:	f7fe fe94 	bl	800a54c <LL_TIM_OC_SetCompareCH2>

    /*  Channel3 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1 );
 800b824:	2260      	movs	r2, #96	; 0x60
 800b826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b82a:	68b8      	ldr	r0, [r7, #8]
 800b82c:	f7fe fd8c 	bl	800a348 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH3 );
 800b830:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b834:	68b8      	ldr	r0, [r7, #8]
 800b836:	f7fe fd63 	bl	800a300 <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b83e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b842:	2b01      	cmp	r3, #1
 800b844:	d105      	bne.n	800b852 <R3_1_RLDetectionModeDisable+0x106>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800b846:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b84a:	68b8      	ldr	r0, [r7, #8]
 800b84c:	f7fe fd58 	bl	800a300 <LL_TIM_CC_EnableChannel>
 800b850:	e00a      	b.n	800b868 <R3_1_RLDetectionModeDisable+0x11c>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b856:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d104      	bne.n	800b868 <R3_1_RLDetectionModeDisable+0x11c>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800b85e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b862:	68b8      	ldr	r0, [r7, #8]
 800b864:	f7fe fd5d 	bl	800a322 <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH3( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b86e:	085b      	lsrs	r3, r3, #1
 800b870:	b29b      	uxth	r3, r3
 800b872:	4619      	mov	r1, r3
 800b874:	68b8      	ldr	r0, [r7, #8]
 800b876:	f7fe fe77 	bl	800a568 <LL_TIM_OC_SetCompareCH3>
    
    /* ADCx Injected discontinuous mode disable */
    LL_ADC_INJ_SetSequencerDiscont( pHandle->pParams_str->ADCx,
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2100      	movs	r1, #0
 800b882:	4618      	mov	r0, r3
 800b884:	f7fe fbd6 	bl	800a034 <LL_ADC_INJ_SetSequencerDiscont>
                                    LL_ADC_INJ_SEQ_DISCONT_DISABLE );

    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	4a09      	ldr	r2, [pc, #36]	; (800b8b0 <R3_1_RLDetectionModeDisable+0x164>)
 800b88c:	605a      	str	r2, [r3, #4]
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	4a08      	ldr	r2, [pc, #32]	; (800b8b4 <R3_1_RLDetectionModeDisable+0x168>)
 800b892:	615a      	str	r2, [r3, #20]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	4a08      	ldr	r2, [pc, #32]	; (800b8b8 <R3_1_RLDetectionModeDisable+0x16c>)
 800b898:	60da      	str	r2, [r3, #12]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	4a07      	ldr	r2, [pc, #28]	; (800b8bc <R3_1_RLDetectionModeDisable+0x170>)
 800b89e:	609a      	str	r2, [r3, #8]

    pHandle->_Super.RLDetectionMode = false;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }
}
 800b8a8:	bf00      	nop
 800b8aa:	3710      	adds	r7, #16
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	0800ad71 	.word	0x0800ad71
 800b8b4:	0800b1e7 	.word	0x0800b1e7
 800b8b8:	0800b293 	.word	0x0800b293
 800b8bc:	0800b3d5 	.word	0x0800b3d5

0800b8c0 <R3_1_RLDetectionModeSetDuty>:
 * @param  hDuty to be applied in uint16_t
 * @retval It returns the code error 'MC_FOC_DURATION' if any, 'MC_NO_ERROR'
 *         otherwise. These error codes are defined in mc_type.h
 */
uint16_t R3_1_RLDetectionModeSetDuty( PWMC_Handle_t * pHdl, uint16_t hDuty )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	807b      	strh	r3, [r7, #2]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	60fb      	str	r3, [r7, #12]
  uint32_t val;
  uint16_t hAux;


  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b8de:	461a      	mov	r2, r3
 800b8e0:	887b      	ldrh	r3, [r7, #2]
 800b8e2:	fb03 f302 	mul.w	r3, r3, r2
 800b8e6:	0c1b      	lsrs	r3, r3, #16
 800b8e8:	60bb      	str	r3, [r7, #8]
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	b29a      	uxth	r2, r3
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	865a      	strh	r2, [r3, #50]	; 0x32
  
  /* set sector in order to sample phase B */
  pHandle->_Super.Sector = SECTOR_4;
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	2203      	movs	r2, #3
 800b8f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  /* TIM1 Channel 1 Duty Cycle configuration.
   * In RL Detection mode only the Up-side device of Phase A are controlled*/
  LL_TIM_OC_SetCompareCH1(TIMx, ( uint32_t )pHandle->_Super.CntPhA);
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8fe:	4619      	mov	r1, r3
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f7fe fe15 	bl	800a530 <LL_TIM_OC_SetCompareCH1>


  /* Limit for update event */
  /*  If an update event has occurred before to set new
  values of regs the FOC rate is too high */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d002      	beq.n	800b918 <R3_1_RLDetectionModeSetDuty+0x58>
  {
    hAux = MC_FOC_DURATION;
 800b912:	2301      	movs	r3, #1
 800b914:	82fb      	strh	r3, [r7, #22]
 800b916:	e001      	b.n	800b91c <R3_1_RLDetectionModeSetDuty+0x5c>
  }
  else
  {
    hAux = MC_NO_ERROR;
 800b918:	2300      	movs	r3, #0
 800b91a:	82fb      	strh	r3, [r7, #22]
  }
  if ( pHandle->_Super.SWerror == 1u )
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b920:	2b01      	cmp	r3, #1
 800b922:	d104      	bne.n	800b92e <R3_1_RLDetectionModeSetDuty+0x6e>
  {
    hAux = MC_FOC_DURATION;
 800b924:	2301      	movs	r3, #1
 800b926:	82fb      	strh	r3, [r7, #22]
    pHandle->_Super.SWerror = 0u;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	2200      	movs	r2, #0
 800b92c:	871a      	strh	r2, [r3, #56]	; 0x38
  }
  return hAux;
 800b92e:	8afb      	ldrh	r3, [r7, #22]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3718      	adds	r7, #24
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <R3_1_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_1_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b086      	sub	sp, #24
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	60fb      	str	r3, [r7, #12]
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800b94e:	2100      	movs	r1, #0
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f7fe fe25 	bl	800a5a0 <LL_TIM_SetTriggerOutput>

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector];
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b95a:	4619      	mov	r1, r3
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b966:	330e      	adds	r3, #14
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	4413      	add	r3, r2
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	1acb      	subs	r3, r1, r3
 800b972:	617b      	str	r3, [r7, #20]

  /* Check saturation */
  if ( wAux > -INT16_MAX )
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	4a0d      	ldr	r2, [pc, #52]	; (800b9ac <R3_1_RLGetPhaseCurrents+0x74>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	db08      	blt.n	800b98e <R3_1_RLGetPhaseCurrents+0x56>
  {
    if ( wAux < INT16_MAX )
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b982:	4293      	cmp	r3, r2
 800b984:	dd05      	ble.n	800b992 <R3_1_RLGetPhaseCurrents+0x5a>
    {
    }
    else
    {
      wAux = INT16_MAX;
 800b986:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800b98a:	617b      	str	r3, [r7, #20]
 800b98c:	e001      	b.n	800b992 <R3_1_RLGetPhaseCurrents+0x5a>
    }
  }
  else
  {
    wAux = -INT16_MAX;
 800b98e:	4b08      	ldr	r3, [pc, #32]	; (800b9b0 <R3_1_RLGetPhaseCurrents+0x78>)
 800b990:	617b      	str	r3, [r7, #20]
  }

  pStator_Currents->a = (int16_t)wAux;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	b21a      	sxth	r2, r3
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	801a      	strh	r2, [r3, #0]
  pStator_Currents->b = (int16_t)wAux;
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	b21a      	sxth	r2, r3
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	805a      	strh	r2, [r3, #2]
}
 800b9a2:	bf00      	nop
 800b9a4:	3718      	adds	r7, #24
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	ffff8002 	.word	0xffff8002
 800b9b0:	ffff8001 	.word	0xffff8001

0800b9b4 <R3_1_RLTurnOnLowSides>:
  *         This function is specific for RL detection phase.
  * @param pHdl: handler of the current instance of the PWM component
  * @retval none
  */
static void R3_1_RLTurnOnLowSides( PWMC_Handle_t * pHdl )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	60bb      	str	r3, [r7, #8]

  /*Turn on the phase A low side switch */
  LL_TIM_OC_SetCompareCH1 ( TIMx, 0u );
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	68b8      	ldr	r0, [r7, #8]
 800b9cc:	f7fe fdb0 	bl	800a530 <LL_TIM_OC_SetCompareCH1>

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800b9d0:	68b8      	ldr	r0, [r7, #8]
 800b9d2:	f7fe fe18 	bl	800a606 <LL_TIM_ClearFlag_UPDATE>

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800b9d6:	bf00      	nop
 800b9d8:	68b8      	ldr	r0, [r7, #8]
 800b9da:	f7fe fe22 	bl	800a622 <LL_TIM_IsActiveFlag_UPDATE>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d0f9      	beq.n	800b9d8 <R3_1_RLTurnOnLowSides+0x24>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800b9e4:	68b8      	ldr	r0, [r7, #8]
 800b9e6:	f7fe fe0e 	bl	800a606 <LL_TIM_ClearFlag_UPDATE>
  
  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
 800b9ea:	68b8      	ldr	r0, [r7, #8]
 800b9ec:	f7fe fdeb 	bl	800a5c6 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9f4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d121      	bne.n	800ba40 <R3_1_RLTurnOnLowSides+0x8c>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba00:	699a      	ldr	r2, [r3, #24]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba06:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	f7fe fe8b 	bl	800a728 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba16:	69da      	ldr	r2, [r3, #28]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba1c:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800ba20:	4619      	mov	r1, r3
 800ba22:	4610      	mov	r0, r2
 800ba24:	f7fe fe8e 	bl	800a744 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba2c:	6a1a      	ldr	r2, [r3, #32]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba32:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800ba36:	4619      	mov	r1, r3
 800ba38:	4610      	mov	r0, r2
 800ba3a:	f7fe fe83 	bl	800a744 <LL_GPIO_ResetOutputPin>
  }
  return;
 800ba3e:	bf00      	nop
 800ba40:	bf00      	nop
}
 800ba42:	3710      	adds	r7, #16
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <R3_1_RLSwitchOnPWM>:
 *         This function is specific for RL detection phase.
 * @param pHdl: handler of the current instance of the PWM component
 * @retval none
 */
static void R3_1_RLSwitchOnPWM( PWMC_Handle_t * pHdl )
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b086      	sub	sp, #24
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	60fb      	str	r3, [r7, #12]
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  /* The folowing while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

   /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 800ba6c:	bf00      	nop
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f003 0310 	and.w	r3, r3, #16
 800ba76:	2b10      	cmp	r3, #16
 800ba78:	d0f9      	beq.n	800ba6e <R3_1_RLSwitchOnPWM+0x26>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 800ba7a:	bf00      	nop
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 0310 	and.w	r3, r3, #16
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d0f9      	beq.n	800ba7c <R3_1_RLSwitchOnPWM+0x34>
  {
  }

  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);
 800ba88:	2101      	movs	r1, #1
 800ba8a:	6938      	ldr	r0, [r7, #16]
 800ba8c:	f7fe fd50 	bl	800a530 <LL_TIM_OC_SetCompareCH1>

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ba96:	3b05      	subs	r3, #5
 800ba98:	4619      	mov	r1, r3
 800ba9a:	6938      	ldr	r0, [r7, #16]
 800ba9c:	f7fe fd72 	bl	800a584 <LL_TIM_OC_SetCompareCH4>
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */
 800baa0:	6938      	ldr	r0, [r7, #16]
 800baa2:	f7fe fdb0 	bl	800a606 <LL_TIM_ClearFlag_UPDATE>

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800baa6:	bf00      	nop
 800baa8:	6938      	ldr	r0, [r7, #16]
 800baaa:	f7fe fdba 	bl	800a622 <LL_TIM_IsActiveFlag_UPDATE>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d0f9      	beq.n	800baa8 <R3_1_RLSwitchOnPWM+0x60>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800bab4:	6938      	ldr	r0, [r7, #16]
 800bab6:	f7fe fda6 	bl	800a606 <LL_TIM_ClearFlag_UPDATE>
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800babe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);
 800bac6:	6938      	ldr	r0, [r7, #16]
 800bac8:	f7fe fd7d 	bl	800a5c6 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bad0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800bad4:	2b02      	cmp	r3, #2
 800bad6:	d149      	bne.n	800bb6c <R3_1_RLSwitchOnPWM+0x124>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	6a1a      	ldr	r2, [r3, #32]
 800badc:	f240 5355 	movw	r3, #1365	; 0x555
 800bae0:	4013      	ands	r3, r2
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d021      	beq.n	800bb2a <R3_1_RLSwitchOnPWM+0xe2>
    {
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baea:	699a      	ldr	r2, [r3, #24]
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baf0:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800baf4:	4619      	mov	r1, r3
 800baf6:	4610      	mov	r0, r2
 800baf8:	f7fe fe16 	bl	800a728 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb00:	69da      	ldr	r2, [r3, #28]
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb06:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	4610      	mov	r0, r2
 800bb0e:	f7fe fe0b 	bl	800a728 <LL_GPIO_SetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb16:	6a1a      	ldr	r2, [r3, #32]
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb1c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800bb20:	4619      	mov	r1, r3
 800bb22:	4610      	mov	r0, r2
 800bb24:	f7fe fe0e 	bl	800a744 <LL_GPIO_ResetOutputPin>
 800bb28:	e020      	b.n	800bb6c <R3_1_RLSwitchOnPWM+0x124>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb2e:	699a      	ldr	r2, [r3, #24]
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb34:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800bb38:	4619      	mov	r1, r3
 800bb3a:	4610      	mov	r0, r2
 800bb3c:	f7fe fe02 	bl	800a744 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb44:	69da      	ldr	r2, [r3, #28]
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb4a:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800bb4e:	4619      	mov	r1, r3
 800bb50:	4610      	mov	r0, r2
 800bb52:	f7fe fdf7 	bl	800a744 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb5a:	6a1a      	ldr	r2, [r3, #32]
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb60:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800bb64:	4619      	mov	r1, r3
 800bb66:	4610      	mov	r0, r2
 800bb68:	f7fe fdec 	bl	800a744 <LL_GPIO_ResetOutputPin>
    }
  }

  /* set the sector that correspond to Phase A and B sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2203      	movs	r2, #3
 800bb70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  LL_ADC_INJ_StartConversion( ADCx );
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f7fe fb05 	bl	800a184 <LL_ADC_INJ_StartConversion>

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
 800bb7a:	6938      	ldr	r0, [r7, #16]
 800bb7c:	f7fe fd94 	bl	800a6a8 <LL_TIM_EnableIT_UPDATE>



  return;
 800bb80:	bf00      	nop
}
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <RVBS_Init>:
    It must be called only after PWMC_Init.
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Init( RDivider_Handle_t * pHandle )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  /* Need to be register with RegularConvManager */
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	330c      	adds	r3, #12
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7f7 f8fd 	bl	8002d94 <RCM_RegisterRegConv>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  /* Check */
  RVBS_Clear( pHandle );
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 f804 	bl	800bbb2 <RVBS_Clear>
}
 800bbaa:	bf00      	nop
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b085      	sub	sp, #20
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	8b5b      	ldrh	r3, [r3, #26]
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	8b9b      	ldrh	r3, [r3, #28]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	085b      	lsrs	r3, r3, #1
 800bbc8:	81bb      	strh	r3, [r7, #12]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800bbca:	2300      	movs	r3, #0
 800bbcc:	81fb      	strh	r3, [r7, #14]
 800bbce:	e009      	b.n	800bbe4 <RVBS_Clear+0x32>
  {
    pHandle->aBuffer[index] = aux;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6a1a      	ldr	r2, [r3, #32]
 800bbd4:	89fb      	ldrh	r3, [r7, #14]
 800bbd6:	005b      	lsls	r3, r3, #1
 800bbd8:	4413      	add	r3, r2
 800bbda:	89ba      	ldrh	r2, [r7, #12]
 800bbdc:	801a      	strh	r2, [r3, #0]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800bbde:	89fb      	ldrh	r3, [r7, #14]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	81fb      	strh	r3, [r7, #14]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	8b1b      	ldrh	r3, [r3, #24]
 800bbe8:	89fa      	ldrh	r2, [r7, #14]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d3f0      	bcc.n	800bbd0 <RVBS_Clear+0x1e>
  }
  pHandle->_Super.LatestConv = aux;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	89ba      	ldrh	r2, [r7, #12]
 800bbf2:	809a      	strh	r2, [r3, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	89ba      	ldrh	r2, [r7, #12]
 800bbf8:	80da      	strh	r2, [r3, #6]
  pHandle->index = 0;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800bc02:	bf00      	nop
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <RVBS_ConvertVbusFiltrered>:

static uint16_t RVBS_ConvertVbusFiltrered( RDivider_Handle_t * pHandle )
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b086      	sub	sp, #24
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  uint16_t hAux;
  uint8_t vindex;
  uint16_t max = 0, min = 0;
 800bc16:	2300      	movs	r3, #0
 800bc18:	82bb      	strh	r3, [r7, #20]
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	827b      	strh	r3, [r7, #18]
  uint32_t tot = 0u;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	60fb      	str	r3, [r7, #12]

  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 800bc22:	2300      	movs	r3, #0
 800bc24:	75fb      	strb	r3, [r7, #23]
 800bc26:	e027      	b.n	800bc78 <RVBS_ConvertVbusFiltrered+0x6a>
  {
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7f7 f966 	bl	8002f00 <RCM_ExecRegularConv>
 800bc34:	4603      	mov	r3, r0
 800bc36:	817b      	strh	r3, [r7, #10]

    if ( hAux != 0xFFFFu )
 800bc38:	897b      	ldrh	r3, [r7, #10]
 800bc3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d01a      	beq.n	800bc78 <RVBS_ConvertVbusFiltrered+0x6a>
    {
      if ( vindex == 0 )
 800bc42:	7dfb      	ldrb	r3, [r7, #23]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d104      	bne.n	800bc52 <RVBS_ConvertVbusFiltrered+0x44>
      {
        min = hAux;
 800bc48:	897b      	ldrh	r3, [r7, #10]
 800bc4a:	827b      	strh	r3, [r7, #18]
        max = hAux;
 800bc4c:	897b      	ldrh	r3, [r7, #10]
 800bc4e:	82bb      	strh	r3, [r7, #20]
 800bc50:	e00b      	b.n	800bc6a <RVBS_ConvertVbusFiltrered+0x5c>
      }
      else
      {
        if ( hAux < min )
 800bc52:	897a      	ldrh	r2, [r7, #10]
 800bc54:	8a7b      	ldrh	r3, [r7, #18]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d201      	bcs.n	800bc5e <RVBS_ConvertVbusFiltrered+0x50>
        {
          min = hAux;
 800bc5a:	897b      	ldrh	r3, [r7, #10]
 800bc5c:	827b      	strh	r3, [r7, #18]
        }
        if ( hAux > max )
 800bc5e:	897a      	ldrh	r2, [r7, #10]
 800bc60:	8abb      	ldrh	r3, [r7, #20]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d901      	bls.n	800bc6a <RVBS_ConvertVbusFiltrered+0x5c>
        {
          max = hAux;
 800bc66:	897b      	ldrh	r3, [r7, #10]
 800bc68:	82bb      	strh	r3, [r7, #20]
        }
      }
      vindex++;
 800bc6a:	7dfb      	ldrb	r3, [r7, #23]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	75fb      	strb	r3, [r7, #23]

      tot += hAux;
 800bc70:	897b      	ldrh	r3, [r7, #10]
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	4413      	add	r3, r2
 800bc76:	60fb      	str	r3, [r7, #12]
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 800bc78:	7dfb      	ldrb	r3, [r7, #23]
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	8b1b      	ldrh	r3, [r3, #24]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d3d1      	bcc.n	800bc28 <RVBS_ConvertVbusFiltrered+0x1a>
    }
  }

  tot -= max;
 800bc84:	8abb      	ldrh	r3, [r7, #20]
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	1ad3      	subs	r3, r2, r3
 800bc8a:	60fb      	str	r3, [r7, #12]
  tot -= min;
 800bc8c:	8a7b      	ldrh	r3, [r7, #18]
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	1ad3      	subs	r3, r2, r3
 800bc92:	60fb      	str	r3, [r7, #12]
  return ( uint16_t )( tot / ( pHandle->LowPassFilterBW - 2u ) );
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	8b1b      	ldrh	r3, [r3, #24]
 800bc98:	3b02      	subs	r3, #2
 800bc9a:	68fa      	ldr	r2, [r7, #12]
 800bc9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bca0:	b29b      	uxth	r3, r3
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3718      	adds	r7, #24
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <RVBS_CalcAvVbusFilt>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CalcAvVbusFilt( RDivider_Handle_t * pHandle )
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b084      	sub	sp, #16
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
  uint32_t wtemp;
  uint16_t hAux;
  uint8_t i;

  hAux = RVBS_ConvertVbusFiltrered( pHandle );
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7ff ffab 	bl	800bc0e <RVBS_ConvertVbusFiltrered>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	813b      	strh	r3, [r7, #8]

  if ( hAux != 0xFFFF )
 800bcbc:	893b      	ldrh	r3, [r7, #8]
 800bcbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d044      	beq.n	800bd50 <RVBS_CalcAvVbusFilt+0xa6>
  {
    pHandle->aBuffer[pHandle->index] = hAux;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a1a      	ldr	r2, [r3, #32]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bcd0:	005b      	lsls	r3, r3, #1
 800bcd2:	4413      	add	r3, r2
 800bcd4:	893a      	ldrh	r2, [r7, #8]
 800bcd6:	801a      	strh	r2, [r3, #0]
    wtemp = 0;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	60fb      	str	r3, [r7, #12]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800bcdc:	2300      	movs	r3, #0
 800bcde:	72fb      	strb	r3, [r7, #11]
 800bce0:	e00c      	b.n	800bcfc <RVBS_CalcAvVbusFilt+0x52>
    {
      wtemp += pHandle->aBuffer[i];
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a1a      	ldr	r2, [r3, #32]
 800bce6:	7afb      	ldrb	r3, [r7, #11]
 800bce8:	005b      	lsls	r3, r3, #1
 800bcea:	4413      	add	r3, r2
 800bcec:	881b      	ldrh	r3, [r3, #0]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	60fb      	str	r3, [r7, #12]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800bcf6:	7afb      	ldrb	r3, [r7, #11]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	72fb      	strb	r3, [r7, #11]
 800bcfc:	7afb      	ldrb	r3, [r7, #11]
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	8b1b      	ldrh	r3, [r3, #24]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d3ec      	bcc.n	800bce2 <RVBS_CalcAvVbusFilt+0x38>
    }
    wtemp /= pHandle->LowPassFilterBW;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	8b1b      	ldrh	r3, [r3, #24]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd14:	60fb      	str	r3, [r7, #12]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	b29a      	uxth	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.LatestConv = hAux;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	893a      	ldrh	r2, [r7, #8]
 800bd22:	809a      	strh	r2, [r3, #4]

    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	8b1b      	ldrh	r3, [r3, #24]
 800bd30:	3b01      	subs	r3, #1
 800bd32:	429a      	cmp	r2, r3
 800bd34:	da08      	bge.n	800bd48 <RVBS_CalcAvVbusFilt+0x9e>
    {
      pHandle->index++;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800bd46:	e003      	b.n	800bd50 <RVBS_CalcAvVbusFilt+0xa6>
    }
    else
    {
      pHandle->index = 0;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 f80a 	bl	800bd6a <RVBS_CheckFaultState>
 800bd56:	4603      	mov	r3, r0
 800bd58:	461a      	mov	r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	811a      	strh	r2, [r3, #8]

  return ( pHandle->_Super.FaultState );
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	891b      	ldrh	r3, [r3, #8]
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
 800bd6a:	b480      	push	{r7}
 800bd6c:	b085      	sub	sp, #20
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	88da      	ldrh	r2, [r3, #6]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	8b5b      	ldrh	r3, [r3, #26]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d902      	bls.n	800bd84 <RVBS_CheckFaultState+0x1a>
  {
    fault = MC_OVER_VOLT;
 800bd7e:	2302      	movs	r3, #2
 800bd80:	81fb      	strh	r3, [r7, #14]
 800bd82:	e00a      	b.n	800bd9a <RVBS_CheckFaultState+0x30>
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	88da      	ldrh	r2, [r3, #6]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	8b9b      	ldrh	r3, [r3, #28]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d202      	bcs.n	800bd96 <RVBS_CheckFaultState+0x2c>
  {
    fault = MC_UNDER_VOLT;
 800bd90:	2304      	movs	r3, #4
 800bd92:	81fb      	strh	r3, [r7, #14]
 800bd94:	e001      	b.n	800bd9a <RVBS_CheckFaultState+0x30>
  }
  else
  {
    fault = MC_NO_ERROR;
 800bd96:	2300      	movs	r3, #0
 800bd98:	81fb      	strh	r3, [r7, #14]
  }
  return fault;
 800bd9a:	89fb      	ldrh	r3, [r7, #14]
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3714      	adds	r7, #20
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <REMNG_Init>:
  * @brief  It reset the state variable to zero.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  pHandle->Ext = 0;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	609a      	str	r2, [r3, #8]
  pHandle->TargetFinal = 0;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	605a      	str	r2, [r3, #4]
  pHandle->RampRemainingStep = 0u;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	611a      	str	r2, [r3, #16]
  pHandle->ScalingFactor = 1u;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	615a      	str	r2, [r3, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800bdce:	bf00      	nop
 800bdd0:	370c      	adds	r7, #12
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <REMNG_Calc>:
            It must be called at fixed interval defined in the hExecFreq.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval int32_t value of the state variable
  */
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
 800bdda:	b480      	push	{r7}
 800bddc:	b085      	sub	sp, #20
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	60fb      	str	r3, [r7, #12]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d90a      	bls.n	800be06 <REMNG_Calc+0x2c>
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	4413      	add	r3, r2
 800bdf8:	60fb      	str	r3, [r7, #12]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	68db      	ldr	r3, [r3, #12]
 800bdfe:	1e5a      	subs	r2, r3, #1
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	60da      	str	r2, [r3, #12]
 800be04:	e00d      	b.n	800be22 <REMNG_Calc+0x48>
  }
  else if ( pHandle->RampRemainingStep == 1u )
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d109      	bne.n	800be22 <REMNG_Calc+0x48>
  {
    /* Set the backup value of TargetFinal. */
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	6952      	ldr	r2, [r2, #20]
 800be16:	fb02 f303 	mul.w	r3, r2, r3
 800be1a:	60fb      	str	r3, [r7, #12]
    pHandle->RampRemainingStep = 0u;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	60da      	str	r2, [r3, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	609a      	str	r2, [r3, #8]

#ifdef FASTDIV
  ret_val = FD_FastDiv( & ( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	6952      	ldr	r2, [r2, #20]
 800be30:	fb93 f3f2 	sdiv	r3, r3, r2
 800be34:	60bb      	str	r3, [r7, #8]
#endif

  return ret_val;
 800be36:	68bb      	ldr	r3, [r7, #8]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3714      	adds	r7, #20
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <REMNG_ExecRamp>:
  *         milliseconds. It is possible to set 0 to perform an instantaneous
  *         change in the value.
  * @retval bool It returns true is command is valid, false otherwise
  */
__weak bool REMNG_ExecRamp( RampExtMngr_Handle_t * pHandle, int32_t TargetFinal, uint32_t Durationms )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b08c      	sub	sp, #48	; 0x30
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	607a      	str	r2, [r7, #4]
  uint32_t aux;
  int32_t aux1;
  int32_t current_ref;
  bool retVal = true;
 800be50:	2301      	movs	r3, #1
 800be52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Get current state */
#ifdef FASTDIV
  current_ref = FD_FastDiv( &( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	6952      	ldr	r2, [r2, #20]
 800be5e:	fb93 f3f2 	sdiv	r3, r3, r2
 800be62:	627b      	str	r3, [r7, #36]	; 0x24
#endif

  if ( Durationms == 0u )
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d114      	bne.n	800be94 <REMNG_ExecRamp+0x50>
  {
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 800be6a:	68b8      	ldr	r0, [r7, #8]
 800be6c:	f000 f887 	bl	800bf7e <getScalingFactor>
 800be70:	4602      	mov	r2, r0
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	615a      	str	r2, [r3, #20]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	695b      	ldr	r3, [r3, #20]
 800be7a:	461a      	mov	r2, r3
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	fb03 f202 	mul.w	r2, r3, r2
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	609a      	str	r2, [r3, #8]
    pHandle->RampRemainingStep = 0u;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2200      	movs	r2, #0
 800be8a:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2200      	movs	r2, #0
 800be90:	611a      	str	r2, [r3, #16]
 800be92:	e059      	b.n	800bf48 <REMNG_ExecRamp+0x104>
  }
  else
  {
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	4618      	mov	r0, r3
 800be9c:	f000 f86f 	bl	800bf7e <getScalingFactor>
 800bea0:	6238      	str	r0, [r7, #32]
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 800bea2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bea4:	f000 f86b 	bl	800bf7e <getScalingFactor>
 800bea8:	61f8      	str	r0, [r7, #28]
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 800beaa:	68b8      	ldr	r0, [r7, #8]
 800beac:	f000 f867 	bl	800bf7e <getScalingFactor>
 800beb0:	61b8      	str	r0, [r7, #24]
    uint32_t wScalingFactorMin;

    if ( wScalingFactor <  wScalingFactor2 )
 800beb2:	6a3a      	ldr	r2, [r7, #32]
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d209      	bcs.n	800bece <REMNG_ExecRamp+0x8a>
    {
      if ( wScalingFactor < wScalingFactor3 )
 800beba:	6a3a      	ldr	r2, [r7, #32]
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d202      	bcs.n	800bec8 <REMNG_ExecRamp+0x84>
      {
        wScalingFactorMin = wScalingFactor;
 800bec2:	6a3b      	ldr	r3, [r7, #32]
 800bec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bec6:	e00b      	b.n	800bee0 <REMNG_ExecRamp+0x9c>
      }
      else
      {
        wScalingFactorMin = wScalingFactor3;
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800becc:	e008      	b.n	800bee0 <REMNG_ExecRamp+0x9c>
      }
    }
    else
    {
      if ( wScalingFactor2 < wScalingFactor3 )
 800bece:	69fa      	ldr	r2, [r7, #28]
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d202      	bcs.n	800bedc <REMNG_ExecRamp+0x98>
      {
        wScalingFactorMin = wScalingFactor2;
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800beda:	e001      	b.n	800bee0 <REMNG_ExecRamp+0x9c>
      }
      else
      {
        wScalingFactorMin = wScalingFactor3;
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
    }

    pHandle->ScalingFactor = wScalingFactorMin;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bee4:	615a      	str	r2, [r3, #20]
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	695b      	ldr	r3, [r3, #20]
 800beea:	461a      	mov	r2, r3
 800beec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beee:	fb03 f202 	mul.w	r2, r3, r2
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	609a      	str	r2, [r3, #8]

    /* Store the TargetFinal to be applied in the last step */
    pHandle->TargetFinal = TargetFinal;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	68ba      	ldr	r2, [r7, #8]
 800befa:	605a      	str	r2, [r3, #4]

    /* Compute the (wRampRemainingStep) number of steps remaining to complete
    the ramp. */
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	fb02 f303 	mul.w	r3, r2, r3
 800bf06:	617b      	str	r3, [r7, #20]
    aux /= 1000u;
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	4a12      	ldr	r2, [pc, #72]	; (800bf54 <REMNG_ExecRamp+0x110>)
 800bf0c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf10:	099b      	lsrs	r3, r3, #6
 800bf12:	617b      	str	r3, [r7, #20]
    pHandle->RampRemainingStep = aux;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	60da      	str	r2, [r3, #12]
    pHandle->RampRemainingStep++;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	1c5a      	adds	r2, r3, #1
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	60da      	str	r2, [r3, #12]

    /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
    the reference value at each CalcTorqueReference. */
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf28:	1ad3      	subs	r3, r2, r3
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	6952      	ldr	r2, [r2, #20]
 800bf2e:	fb02 f303 	mul.w	r3, r2, r3
 800bf32:	613b      	str	r3, [r7, #16]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf40:	613b      	str	r3, [r7, #16]
    pHandle->IncDecAmount = aux1;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	693a      	ldr	r2, [r7, #16]
 800bf46:	611a      	str	r2, [r3, #16]
  }

  return retVal;
 800bf48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3730      	adds	r7, #48	; 0x30
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	10624dd3 	.word	0x10624dd3

0800bf58 <REMNG_RampCompleted>:
  * @brief  Check if the settled ramp has been completed.
  * @param  pHandle related Handle of struct RampMngr_Handle_t.
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  bool retVal = false;
 800bf60:	2300      	movs	r3, #0
 800bf62:	73fb      	strb	r3, [r7, #15]
  if ( pHandle->RampRemainingStep == 0u )
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d101      	bne.n	800bf70 <REMNG_RampCompleted+0x18>
  {
    retVal = true;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	73fb      	strb	r3, [r7, #15]
  }
  return retVal;
 800bf70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3714      	adds	r7, #20
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr

0800bf7e <getScalingFactor>:
  *         It allows to keep Target * Scaling factor inside int32_t type.
  * @param  Target Input data.
  * @retval uint32_t It returns the optimized scaling factor.
  */
__weak uint32_t getScalingFactor( int32_t Target )
{
 800bf7e:	b480      	push	{r7}
 800bf80:	b087      	sub	sp, #28
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	da05      	bge.n	800bf98 <getScalingFactor+0x1a>
  {
    aux = -Target;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	425b      	negs	r3, r3
 800bf90:	60fb      	str	r3, [r7, #12]
    TargetAbs = ( uint32_t )( aux );
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	613b      	str	r3, [r7, #16]
 800bf96:	e001      	b.n	800bf9c <getScalingFactor+0x1e>
  }
  else
  {
    TargetAbs = ( uint32_t )( Target );
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	613b      	str	r3, [r7, #16]
  }
  for ( i = 1u; i < 32u; i++ )
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	75fb      	strb	r3, [r7, #23]
 800bfa0:	e00d      	b.n	800bfbe <getScalingFactor+0x40>
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 800bfa2:	7dfb      	ldrb	r3, [r7, #23]
 800bfa4:	f1c3 031f 	rsb	r3, r3, #31
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	fa02 f303 	lsl.w	r3, r2, r3
 800bfae:	60bb      	str	r3, [r7, #8]
    if ( TargetAbs >= limit )
 800bfb0:	693a      	ldr	r2, [r7, #16]
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d206      	bcs.n	800bfc6 <getScalingFactor+0x48>
  for ( i = 1u; i < 32u; i++ )
 800bfb8:	7dfb      	ldrb	r3, [r7, #23]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	75fb      	strb	r3, [r7, #23]
 800bfbe:	7dfb      	ldrb	r3, [r7, #23]
 800bfc0:	2b1f      	cmp	r3, #31
 800bfc2:	d9ee      	bls.n	800bfa2 <getScalingFactor+0x24>
 800bfc4:	e000      	b.n	800bfc8 <getScalingFactor+0x4a>
    {
      break;
 800bfc6:	bf00      	nop
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
 800bfc8:	7dfb      	ldrb	r3, [r7, #23]
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	2201      	movs	r2, #1
 800bfce:	fa02 f303 	lsl.w	r3, r2, r3
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	371c      	adds	r7, #28
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <SPD_GetElAngle>:
  *         s16degrees. 1 s16degree = 360ï¿½/65536
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b083      	sub	sp, #12
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  return ( pHandle->hElAngle );
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr

0800bff8 <SPD_GetAvrgMecSpeedUnit>:
  * @brief  Returns the last computed average mechanical speed, expressed in
  *         the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  return ( pHandle->hAvrMecSpeedUnit );
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
}
 800c006:	4618      	mov	r0, r3
 800c008:	370c      	adds	r7, #12
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr

0800c012 <SPD_GetInstElSpeedDpp>:
  *         SPD_CalcElectricalAngle).
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
 800c012:	b480      	push	{r7}
 800c014:	b083      	sub	sp, #12
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
  return ( pHandle->InstantaneousElSpeedDpp );
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
}
 800c020:	4618      	mov	r0, r3
 800c022:	370c      	adds	r7, #12
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr

0800c02c <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable( SpeednPosFdbk_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 800c02c:	b480      	push	{r7}
 800c02e:	b087      	sub	sp, #28
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  bool SpeedSensorReliability = true;
 800c036:	2301      	movs	r3, #1
 800c038:	75fb      	strb	r3, [r7, #23]
  uint8_t bSpeedErrorNumber;
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	78db      	ldrb	r3, [r3, #3]
 800c03e:	73fb      	strb	r3, [r7, #15]

  bool SpeedError = false;
 800c040:	2300      	movs	r3, #0
 800c042:	757b      	strb	r3, [r7, #21]
  uint16_t hAbsMecSpeedUnit, hAbsMecAccelUnitP;
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	75bb      	strb	r3, [r7, #22]

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c050:	2b00      	cmp	r3, #0
 800c052:	da09      	bge.n	800c068 <SPD_IsMecSpeedReliable+0x3c>
  {
    hAux = -( *pMecSpeedUnit );
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	425b      	negs	r3, r3
 800c05e:	b29b      	uxth	r3, r3
 800c060:	81bb      	strh	r3, [r7, #12]
    hAbsMecSpeedUnit = ( uint16_t )( hAux );
 800c062:	89bb      	ldrh	r3, [r7, #12]
 800c064:	827b      	strh	r3, [r7, #18]
 800c066:	e003      	b.n	800c070 <SPD_IsMecSpeedReliable+0x44>
  }
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c06e:	827b      	strh	r3, [r7, #18]
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	8a9b      	ldrh	r3, [r3, #20]
 800c074:	8a7a      	ldrh	r2, [r7, #18]
 800c076:	429a      	cmp	r2, r3
 800c078:	d901      	bls.n	800c07e <SPD_IsMecSpeedReliable+0x52>
  {
    SpeedError = true;
 800c07a:	2301      	movs	r3, #1
 800c07c:	757b      	strb	r3, [r7, #21]
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	8adb      	ldrh	r3, [r3, #22]
 800c082:	8a7a      	ldrh	r2, [r7, #18]
 800c084:	429a      	cmp	r2, r3
 800c086:	d201      	bcs.n	800c08c <SPD_IsMecSpeedReliable+0x60>
  {
    SpeedError = true;
 800c088:	2301      	movs	r3, #1
 800c08a:	757b      	strb	r3, [r7, #21]
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c092:	2b00      	cmp	r3, #0
 800c094:	da09      	bge.n	800c0aa <SPD_IsMecSpeedReliable+0x7e>
  {
    hAux = -( pHandle->hMecAccelUnitP );
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	425b      	negs	r3, r3
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	81bb      	strh	r3, [r7, #12]
    hAbsMecAccelUnitP = ( uint16_t )( hAux );
 800c0a4:	89bb      	ldrh	r3, [r7, #12]
 800c0a6:	823b      	strh	r3, [r7, #16]
 800c0a8:	e003      	b.n	800c0b2 <SPD_IsMecSpeedReliable+0x86>
  }
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c0b0:	823b      	strh	r3, [r7, #16]
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	8b1b      	ldrh	r3, [r3, #24]
 800c0b6:	8a3a      	ldrh	r2, [r7, #16]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d901      	bls.n	800c0c0 <SPD_IsMecSpeedReliable+0x94>
  {
    SpeedError = true;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	757b      	strb	r3, [r7, #21]
  }

  if ( SpeedError == true )
 800c0c0:	7d7b      	ldrb	r3, [r7, #21]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d007      	beq.n	800c0d6 <SPD_IsMecSpeedReliable+0xaa>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800c0c6:	7dba      	ldrb	r2, [r7, #22]
 800c0c8:	7bfb      	ldrb	r3, [r7, #15]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d209      	bcs.n	800c0e2 <SPD_IsMecSpeedReliable+0xb6>
    {
      bSpeedErrorNumber++;
 800c0ce:	7dbb      	ldrb	r3, [r7, #22]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	75bb      	strb	r3, [r7, #22]
 800c0d4:	e005      	b.n	800c0e2 <SPD_IsMecSpeedReliable+0xb6>
    }
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800c0d6:	7dba      	ldrb	r2, [r7, #22]
 800c0d8:	7bfb      	ldrb	r3, [r7, #15]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d201      	bcs.n	800c0e2 <SPD_IsMecSpeedReliable+0xb6>
    {
      bSpeedErrorNumber = 0u;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 800c0e2:	7dba      	ldrb	r2, [r7, #22]
 800c0e4:	7bfb      	ldrb	r3, [r7, #15]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d101      	bne.n	800c0ee <SPD_IsMecSpeedReliable+0xc2>
  {
    SpeedSensorReliability = false;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	75fb      	strb	r3, [r7, #23]
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	7dba      	ldrb	r2, [r7, #22]
 800c0f2:	701a      	strb	r2, [r3, #0]

  return ( SpeedSensorReliability );
 800c0f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	371c      	adds	r7, #28
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr

0800c102 <SPD_GetS16Speed>:
  *         -hMaxReliableMecSpeedUnit.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
 800c102:	b480      	push	{r7}
 800c104:	b085      	sub	sp, #20
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800c110:	60fb      	str	r3, [r7, #12]
  wAux *= INT16_MAX;
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	4613      	mov	r3, r2
 800c116:	03db      	lsls	r3, r3, #15
 800c118:	1a9b      	subs	r3, r3, r2
 800c11a:	60fb      	str	r3, [r7, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	8a9b      	ldrh	r3, [r3, #20]
 800c120:	b21b      	sxth	r3, r3
 800c122:	461a      	mov	r2, r3
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	fb93 f3f2 	sdiv	r3, r3, r2
 800c12a:	60fb      	str	r3, [r7, #12]
  return ( int16_t )wAux;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	b21b      	sxth	r3, r3
}
 800c130:	4618      	mov	r0, r3
 800c132:	3714      	adds	r7, #20
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800c13c:	b480      	push	{r7}
 800c13e:	b085      	sub	sp, #20
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]

  pHandle->PISpeed = pPI;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	68ba      	ldr	r2, [r7, #8]
 800c14c:	611a      	str	r2, [r3, #16]
  pHandle->SPD = SPD_Handle;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	615a      	str	r2, [r3, #20]
  pHandle->Mode = pHandle->ModeDefault;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	701a      	strb	r2, [r3, #0]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800c164:	041a      	lsls	r2, r3, #16
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	605a      	str	r2, [r3, #4]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800c170:	041a      	lsls	r2, r3, #16
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	609a      	str	r2, [r3, #8]
  pHandle->TargetFinal = 0;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2200      	movs	r2, #0
 800c17a:	805a      	strh	r2, [r3, #2]
  pHandle->RampRemainingStep = 0u;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2200      	movs	r2, #0
 800c180:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2200      	movs	r2, #0
 800c186:	619a      	str	r2, [r3, #24]
}
 800c188:	bf00      	nop
 800c18a:	3714      	adds	r7, #20
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <STC_SetSpeedSensor>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  pHandle->SPD = SPD_Handle;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	683a      	ldr	r2, [r7, #0]
 800c1a2:	615a      	str	r2, [r3, #20]
}
 800c1a4:	bf00      	nop
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <STC_GetSpeedSensor>:
  * @brief It returns the speed sensor utilized by the FOC.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  return ( pHandle->SPD );
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	695b      	ldr	r3, [r3, #20]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	370c      	adds	r7, #12
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <STC_Clear>:
            speed mode, this method resets the integral term of speed regulator.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  if ( pHandle->Mode == STC_SPEED_MODE )
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d105      	bne.n	800c1e4 <STC_Clear+0x1c>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	691b      	ldr	r3, [r3, #16]
 800c1dc:	2100      	movs	r1, #0
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fd fa63 	bl	80096aa <PID_SetIntegralTerm>
  }
}
 800c1e4:	bf00      	nop
 800c1e6:	3708      	adds	r7, #8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <STC_GetMecSpeedRefUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	da02      	bge.n	800c202 <STC_GetMecSpeedRefUnit+0x16>
 800c1fc:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800c200:	33ff      	adds	r3, #255	; 0xff
 800c202:	141b      	asrs	r3, r3, #16
 800c204:	b21b      	sxth	r3, r3
}
 800c206:	4618      	mov	r0, r3
 800c208:	370c      	adds	r7, #12
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr

0800c212 <STC_GetTorqueRef>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
 800c212:	b480      	push	{r7}
 800c214:	b083      	sub	sp, #12
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	da02      	bge.n	800c228 <STC_GetTorqueRef+0x16>
 800c222:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800c226:	33ff      	adds	r3, #255	; 0xff
 800c228:	141b      	asrs	r3, r3, #16
 800c22a:	b21b      	sxth	r3, r3
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <STC_SetControlMode>:
  *         STC_TORQUE_MODE to enable the Torque mode or STC_SPEED_MODE to
  *         enable the Speed mode.
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	460b      	mov	r3, r1
 800c242:	70fb      	strb	r3, [r7, #3]
  pHandle->Mode = bMode;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	78fa      	ldrb	r2, [r7, #3]
 800c248:	701a      	strb	r2, [r3, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	60da      	str	r2, [r3, #12]
}
 800c250:	bf00      	nop
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b088      	sub	sp, #32
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	460b      	mov	r3, r1
 800c266:	607a      	str	r2, [r7, #4]
 800c268:	817b      	strh	r3, [r7, #10]
  bool AllowedRange = true;
 800c26a:	2301      	movs	r3, #1
 800c26c:	77fb      	strb	r3, [r7, #31]
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d116      	bne.n	800c2a4 <STC_ExecRamp+0x48>
  {
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800c276:	68f8      	ldr	r0, [r7, #12]
 800c278:	f7ff ffcb 	bl	800c212 <STC_GetTorqueRef>
 800c27c:	4603      	mov	r3, r0
 800c27e:	83bb      	strh	r3, [r7, #28]
#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800c280:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800c288:	4293      	cmp	r3, r2
 800c28a:	dd01      	ble.n	800c290 <STC_ExecRamp+0x34>
    {
      AllowedRange = false;
 800c28c:	2300      	movs	r3, #0
 800c28e:	77fb      	strb	r3, [r7, #31]
    }
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800c296:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	da2d      	bge.n	800c2fa <STC_ExecRamp+0x9e>
    {
      AllowedRange = false;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	77fb      	strb	r3, [r7, #31]
 800c2a2:	e02a      	b.n	800c2fa <STC_ExecRamp+0x9e>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	da02      	bge.n	800c2b2 <STC_ExecRamp+0x56>
 800c2ac:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800c2b0:	33ff      	adds	r3, #255	; 0xff
 800c2b2:	141b      	asrs	r3, r3, #16
 800c2b4:	83bb      	strh	r3, [r7, #28]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800c2b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	8bd2      	ldrh	r2, [r2, #30]
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	dd02      	ble.n	800c2c8 <STC_ExecRamp+0x6c>
    {
      AllowedRange = false;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	77fb      	strb	r3, [r7, #31]
 800c2c6:	e018      	b.n	800c2fa <STC_ExecRamp+0x9e>
    }
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800c2ce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	da02      	bge.n	800c2dc <STC_ExecRamp+0x80>
    {
      AllowedRange = false;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	77fb      	strb	r3, [r7, #31]
 800c2da:	e00e      	b.n	800c2fa <STC_ExecRamp+0x9e>
    }
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800c2dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	8c12      	ldrh	r2, [r2, #32]
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	da08      	bge.n	800c2fa <STC_ExecRamp+0x9e>
    {
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800c2ee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	dd01      	ble.n	800c2fa <STC_ExecRamp+0x9e>
      {
        AllowedRange = false;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	77fb      	strb	r3, [r7, #31]
    }
    else {}
#endif
  }

  if ( AllowedRange == true )
 800c2fa:	7ffb      	ldrb	r3, [r7, #31]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d041      	beq.n	800c384 <STC_ExecRamp+0x128>
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d115      	bne.n	800c332 <STC_ExecRamp+0xd6>
    {
      if ( pHandle->Mode == STC_SPEED_MODE )
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d105      	bne.n	800c31a <STC_ExecRamp+0xbe>
      {
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800c30e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c312:	041a      	lsls	r2, r3, #16
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	605a      	str	r2, [r3, #4]
 800c318:	e004      	b.n	800c324 <STC_ExecRamp+0xc8>
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800c31a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c31e:	041a      	lsls	r2, r3, #16
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	609a      	str	r2, [r3, #8]
      }
      pHandle->RampRemainingStep = 0u;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2200      	movs	r2, #0
 800c328:	60da      	str	r2, [r3, #12]
      pHandle->IncDecAmount = 0;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2200      	movs	r2, #0
 800c32e:	619a      	str	r2, [r3, #24]
 800c330:	e028      	b.n	800c384 <STC_ExecRamp+0x128>
    }
    else
    {
      /* Store the hTargetFinal to be applied in the last step */
      pHandle->TargetFinal = hTargetFinal;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	897a      	ldrh	r2, [r7, #10]
 800c336:	805a      	strh	r2, [r3, #2]

      /* Compute the (wRampRemainingStep) number of steps remaining to complete
      the ramp. */
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	8b9b      	ldrh	r3, [r3, #28]
 800c33c:	461a      	mov	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	fb02 f303 	mul.w	r3, r2, r3
 800c344:	61bb      	str	r3, [r7, #24]
      wAux /= 1000u;
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	4a11      	ldr	r2, [pc, #68]	; (800c390 <STC_ExecRamp+0x134>)
 800c34a:	fba2 2303 	umull	r2, r3, r2, r3
 800c34e:	099b      	lsrs	r3, r3, #6
 800c350:	61bb      	str	r3, [r7, #24]
      pHandle->RampRemainingStep = wAux;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	69ba      	ldr	r2, [r7, #24]
 800c356:	60da      	str	r2, [r3, #12]
      pHandle->RampRemainingStep++;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	1c5a      	adds	r2, r3, #1
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	60da      	str	r2, [r3, #12]

      /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
      the reference value at each CalcTorqueReference. */
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800c362:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800c366:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c36a:	1ad3      	subs	r3, r2, r3
 800c36c:	041b      	lsls	r3, r3, #16
 800c36e:	617b      	str	r3, [r7, #20]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	461a      	mov	r2, r3
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	fb93 f3f2 	sdiv	r3, r3, r2
 800c37c:	617b      	str	r3, [r7, #20]
      pHandle->IncDecAmount = wAux1;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	697a      	ldr	r2, [r7, #20]
 800c382:	619a      	str	r2, [r3, #24]
    }
  }

  return AllowedRange;
 800c384:	7ffb      	ldrb	r3, [r7, #31]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3720      	adds	r7, #32
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	10624dd3 	.word	0x10624dd3

0800c394 <STC_StopRamp>:
  *         rotor speed reference is maintained.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]

  pHandle->RampRemainingStep = 0u;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	619a      	str	r2, [r3, #24]
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b086      	sub	sp, #24
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  int32_t wCurrentReference;
  int16_t hTorqueReference = 0;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	827b      	strh	r3, [r7, #18]
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d103      	bne.n	800c3d0 <STC_CalcTorqueReference+0x1c>
  {
    wCurrentReference = pHandle->TorqueRef;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	617b      	str	r3, [r7, #20]
 800c3ce:	e002      	b.n	800c3d6 <STC_CalcTorqueReference+0x22>
  }
  else
  {
    wCurrentReference = pHandle->SpeedRefUnitExt;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	617b      	str	r3, [r7, #20]
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d90a      	bls.n	800c3f4 <STC_CalcTorqueReference+0x40>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	699b      	ldr	r3, [r3, #24]
 800c3e2:	697a      	ldr	r2, [r7, #20]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	617b      	str	r3, [r7, #20]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	1e5a      	subs	r2, r3, #1
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	60da      	str	r2, [r3, #12]
 800c3f2:	e00b      	b.n	800c40c <STC_CalcTorqueReference+0x58>
  }
  else if ( pHandle->RampRemainingStep == 1u )
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d107      	bne.n	800c40c <STC_CalcTorqueReference+0x58>
  {
    /* Set the backup value of hTargetFinal. */
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c402:	041b      	lsls	r3, r3, #16
 800c404:	617b      	str	r3, [r7, #20]
    pHandle->RampRemainingStep = 0u;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	60da      	str	r2, [r3, #12]
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d126      	bne.n	800c462 <STC_CalcTorqueReference+0xae>
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	2b00      	cmp	r3, #0
 800c418:	da02      	bge.n	800c420 <STC_CalcTorqueReference+0x6c>
 800c41a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800c41e:	33ff      	adds	r3, #255	; 0xff
 800c420:	141b      	asrs	r3, r3, #16
 800c422:	823b      	strh	r3, [r7, #16]
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	695b      	ldr	r3, [r3, #20]
 800c428:	4618      	mov	r0, r3
 800c42a:	f7ff fde5 	bl	800bff8 <SPD_GetAvrgMecSpeedUnit>
 800c42e:	4603      	mov	r3, r0
 800c430:	81fb      	strh	r3, [r7, #14]
    hError = hTargetSpeed - hMeasuredSpeed;
 800c432:	8a3a      	ldrh	r2, [r7, #16]
 800c434:	89fb      	ldrh	r3, [r7, #14]
 800c436:	1ad3      	subs	r3, r2, r3
 800c438:	b29b      	uxth	r3, r3
 800c43a:	81bb      	strh	r3, [r7, #12]
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	691b      	ldr	r3, [r3, #16]
 800c440:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c444:	4611      	mov	r1, r2
 800c446:	4618      	mov	r0, r3
 800c448:	f7fd f972 	bl	8009730 <PI_Controller>
 800c44c:	4603      	mov	r3, r0
 800c44e:	827b      	strh	r3, [r7, #18]

    pHandle->SpeedRefUnitExt = wCurrentReference;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	697a      	ldr	r2, [r7, #20]
 800c454:	605a      	str	r2, [r3, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800c456:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c45a:	041a      	lsls	r2, r3, #16
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	609a      	str	r2, [r3, #8]
 800c460:	e00a      	b.n	800c478 <STC_CalcTorqueReference+0xc4>
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	697a      	ldr	r2, [r7, #20]
 800c466:	609a      	str	r2, [r3, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	da02      	bge.n	800c474 <STC_CalcTorqueReference+0xc0>
 800c46e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800c472:	33ff      	adds	r3, #255	; 0xff
 800c474:	141b      	asrs	r3, r3, #16
 800c476:	827b      	strh	r3, [r7, #18]
  }

  return hTorqueReference;
 800c478:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3718      	adds	r7, #24
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <STC_GetMecSpeedRefUnitDefault>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t It returns the Default mechanical rotor speed. reference
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  return pHandle->MecSpeedRefUnitDefault;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
}
 800c492:	4618      	mov	r0, r3
 800c494:	370c      	adds	r7, #12
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr

0800c49e <STC_GetMaxAppPositiveMecSpeedUnit>:
/**
  * @brief  Returns the Application maximum positive value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800c49e:	b480      	push	{r7}
 800c4a0:	b083      	sub	sp, #12
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
  return pHandle->MaxAppPositiveMecSpeedUnit;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	8bdb      	ldrh	r3, [r3, #30]
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	370c      	adds	r7, #12
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr

0800c4b6 <STC_GetMinAppNegativeMecSpeedUnit>:
/**
  * @brief  Returns the Application minimum negative value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800c4b6:	b480      	push	{r7}
 800c4b8:	b083      	sub	sp, #12
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
  return pHandle->MinAppNegativeMecSpeedUnit;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <STC_GetDefaultIqdref>:
  * @brief It returns the default values of Iqdref.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800c4de:	813b      	strh	r3, [r7, #8]
  IqdRefDefault.d = pHandle->IdrefDefault;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c4e6:	817b      	strh	r3, [r7, #10]
  return IqdRefDefault;
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	60fb      	str	r3, [r7, #12]
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	89ba      	ldrh	r2, [r7, #12]
 800c4f0:	f362 030f 	bfi	r3, r2, #0, #16
 800c4f4:	89fa      	ldrh	r2, [r7, #14]
 800c4f6:	f362 431f 	bfi	r3, r2, #16, #16
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr

0800c506 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b082      	sub	sp, #8
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	695b      	ldr	r3, [r3, #20]
 800c512:	4618      	mov	r0, r3
 800c514:	f7ff fd70 	bl	800bff8 <SPD_GetAvrgMecSpeedUnit>
 800c518:	4603      	mov	r3, r0
 800c51a:	041a      	lsls	r2, r3, #16
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	605a      	str	r2, [r3, #4]
}
 800c520:	bf00      	nop
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <STM_Init>:
  *         once right after object creation.
  * @param pHandle pointer on the component instance to initialize.
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]

  pHandle->bState = IDLE;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	701a      	strb	r2, [r3, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	805a      	strh	r2, [r3, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	809a      	strh	r2, [r3, #4]
}
 800c542:	bf00      	nop
 800c544:	370c      	adds	r7, #12
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
	...

0800c550 <STM_NextState>:
  * @param bState New requested state
  * @retval bool It returns true if the state has been really set equal to
  *         bState, false if the requested state can't be reached
  */
__weak bool STM_NextState( STM_Handle_t * pHandle, State_t bState )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	460b      	mov	r3, r1
 800c55a:	70fb      	strb	r3, [r7, #3]
  bool bChangeState = false;
 800c55c:	2300      	movs	r3, #0
 800c55e:	73fb      	strb	r3, [r7, #15]
  State_t bCurrentState = pHandle->bState;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	737b      	strb	r3, [r7, #13]
  State_t bNewState = bCurrentState;
 800c566:	7b7b      	ldrb	r3, [r7, #13]
 800c568:	73bb      	strb	r3, [r7, #14]

  switch ( bCurrentState )
 800c56a:	7b7b      	ldrb	r3, [r7, #13]
 800c56c:	2b14      	cmp	r3, #20
 800c56e:	f200 8110 	bhi.w	800c792 <STM_NextState+0x242>
 800c572:	a201      	add	r2, pc, #4	; (adr r2, 800c578 <STM_NextState+0x28>)
 800c574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c578:	0800c5df 	.word	0x0800c5df
 800c57c:	0800c5fd 	.word	0x0800c5fd
 800c580:	0800c663 	.word	0x0800c663
 800c584:	0800c675 	.word	0x0800c675
 800c588:	0800c6ff 	.word	0x0800c6ff
 800c58c:	0800c737 	.word	0x0800c737
 800c590:	0800c74d 	.word	0x0800c74d
 800c594:	0800c75d 	.word	0x0800c75d
 800c598:	0800c76d 	.word	0x0800c76d
 800c59c:	0800c77d 	.word	0x0800c77d
 800c5a0:	0800c793 	.word	0x0800c793
 800c5a4:	0800c793 	.word	0x0800c793
 800c5a8:	0800c5cd 	.word	0x0800c5cd
 800c5ac:	0800c61b 	.word	0x0800c61b
 800c5b0:	0800c633 	.word	0x0800c633
 800c5b4:	0800c64b 	.word	0x0800c64b
 800c5b8:	0800c69f 	.word	0x0800c69f
 800c5bc:	0800c6b7 	.word	0x0800c6b7
 800c5c0:	0800c6e9 	.word	0x0800c6e9
 800c5c4:	0800c71b 	.word	0x0800c71b
 800c5c8:	0800c6d3 	.word	0x0800c6d3
  {
    case ICLWAIT:
      if ( bState == IDLE )
 800c5cc:	78fb      	ldrb	r3, [r7, #3]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f040 80e1 	bne.w	800c796 <STM_NextState+0x246>
      {
        bNewState = bState;
 800c5d4:	78fb      	ldrb	r3, [r7, #3]
 800c5d6:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c5dc:	e0db      	b.n	800c796 <STM_NextState+0x246>
    case IDLE:
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800c5de:	78fb      	ldrb	r3, [r7, #3]
 800c5e0:	2b03      	cmp	r3, #3
 800c5e2:	d006      	beq.n	800c5f2 <STM_NextState+0xa2>
 800c5e4:	78fb      	ldrb	r3, [r7, #3]
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d003      	beq.n	800c5f2 <STM_NextState+0xa2>
           || ( bState == ICLWAIT ) )
 800c5ea:	78fb      	ldrb	r3, [r7, #3]
 800c5ec:	2b0c      	cmp	r3, #12
 800c5ee:	f040 80d4 	bne.w	800c79a <STM_NextState+0x24a>
      {
        bNewState = bState;
 800c5f2:	78fb      	ldrb	r3, [r7, #3]
 800c5f4:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c5fa:	e0ce      	b.n	800c79a <STM_NextState+0x24a>

    case IDLE_ALIGNMENT:
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800c5fc:	78fb      	ldrb	r3, [r7, #3]
 800c5fe:	2b07      	cmp	r3, #7
 800c600:	d006      	beq.n	800c610 <STM_NextState+0xc0>
 800c602:	78fb      	ldrb	r3, [r7, #3]
 800c604:	2b0d      	cmp	r3, #13
 800c606:	d003      	beq.n	800c610 <STM_NextState+0xc0>
           || ( bState == ALIGN_OFFSET_CALIB ) )
 800c608:	78fb      	ldrb	r3, [r7, #3]
 800c60a:	2b0e      	cmp	r3, #14
 800c60c:	f040 80c7 	bne.w	800c79e <STM_NextState+0x24e>
      {
        bNewState = bState;
 800c610:	78fb      	ldrb	r3, [r7, #3]
 800c612:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c614:	2301      	movs	r3, #1
 800c616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c618:	e0c1      	b.n	800c79e <STM_NextState+0x24e>

    case ALIGN_CHARGE_BOOT_CAP:
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800c61a:	78fb      	ldrb	r3, [r7, #3]
 800c61c:	2b0e      	cmp	r3, #14
 800c61e:	d003      	beq.n	800c628 <STM_NextState+0xd8>
 800c620:	78fb      	ldrb	r3, [r7, #3]
 800c622:	2b07      	cmp	r3, #7
 800c624:	f040 80bd 	bne.w	800c7a2 <STM_NextState+0x252>
      {
        bNewState = bState;
 800c628:	78fb      	ldrb	r3, [r7, #3]
 800c62a:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c62c:	2301      	movs	r3, #1
 800c62e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c630:	e0b7      	b.n	800c7a2 <STM_NextState+0x252>

    case ALIGN_OFFSET_CALIB:
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800c632:	78fb      	ldrb	r3, [r7, #3]
 800c634:	2b0f      	cmp	r3, #15
 800c636:	d003      	beq.n	800c640 <STM_NextState+0xf0>
 800c638:	78fb      	ldrb	r3, [r7, #3]
 800c63a:	2b07      	cmp	r3, #7
 800c63c:	f040 80b3 	bne.w	800c7a6 <STM_NextState+0x256>
      {
        bNewState = bState;
 800c640:	78fb      	ldrb	r3, [r7, #3]
 800c642:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c644:	2301      	movs	r3, #1
 800c646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c648:	e0ad      	b.n	800c7a6 <STM_NextState+0x256>

    case ALIGN_CLEAR:
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800c64a:	78fb      	ldrb	r3, [r7, #3]
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	d003      	beq.n	800c658 <STM_NextState+0x108>
 800c650:	78fb      	ldrb	r3, [r7, #3]
 800c652:	2b07      	cmp	r3, #7
 800c654:	f040 80a9 	bne.w	800c7aa <STM_NextState+0x25a>
      {
        bNewState = bState;
 800c658:	78fb      	ldrb	r3, [r7, #3]
 800c65a:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c65c:	2301      	movs	r3, #1
 800c65e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c660:	e0a3      	b.n	800c7aa <STM_NextState+0x25a>

    case ALIGNMENT:
      if ( bState == ANY_STOP )
 800c662:	78fb      	ldrb	r3, [r7, #3]
 800c664:	2b07      	cmp	r3, #7
 800c666:	f040 80a2 	bne.w	800c7ae <STM_NextState+0x25e>
      {
        bNewState = bState;
 800c66a:	78fb      	ldrb	r3, [r7, #3]
 800c66c:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c66e:	2301      	movs	r3, #1
 800c670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c672:	e09c      	b.n	800c7ae <STM_NextState+0x25e>

    case IDLE_START:
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 800c674:	78fb      	ldrb	r3, [r7, #3]
 800c676:	2b07      	cmp	r3, #7
 800c678:	d00c      	beq.n	800c694 <STM_NextState+0x144>
 800c67a:	78fb      	ldrb	r3, [r7, #3]
 800c67c:	2b10      	cmp	r3, #16
 800c67e:	d009      	beq.n	800c694 <STM_NextState+0x144>
 800c680:	78fb      	ldrb	r3, [r7, #3]
 800c682:	2b04      	cmp	r3, #4
 800c684:	d006      	beq.n	800c694 <STM_NextState+0x144>
           ( bState == START ) ||
 800c686:	78fb      	ldrb	r3, [r7, #3]
 800c688:	2b11      	cmp	r3, #17
 800c68a:	d003      	beq.n	800c694 <STM_NextState+0x144>
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800c68c:	78fb      	ldrb	r3, [r7, #3]
 800c68e:	2b01      	cmp	r3, #1
 800c690:	f040 808f 	bne.w	800c7b2 <STM_NextState+0x262>
      {
        bNewState = bState;
 800c694:	78fb      	ldrb	r3, [r7, #3]
 800c696:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c698:	2301      	movs	r3, #1
 800c69a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c69c:	e089      	b.n	800c7b2 <STM_NextState+0x262>

    case CHARGE_BOOT_CAP:
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800c69e:	78fb      	ldrb	r3, [r7, #3]
 800c6a0:	2b11      	cmp	r3, #17
 800c6a2:	d003      	beq.n	800c6ac <STM_NextState+0x15c>
 800c6a4:	78fb      	ldrb	r3, [r7, #3]
 800c6a6:	2b07      	cmp	r3, #7
 800c6a8:	f040 8085 	bne.w	800c7b6 <STM_NextState+0x266>
      {
        bNewState = bState;
 800c6ac:	78fb      	ldrb	r3, [r7, #3]
 800c6ae:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c6b4:	e07f      	b.n	800c7b6 <STM_NextState+0x266>

    case OFFSET_CALIB:
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800c6b6:	78fb      	ldrb	r3, [r7, #3]
 800c6b8:	2b12      	cmp	r3, #18
 800c6ba:	d005      	beq.n	800c6c8 <STM_NextState+0x178>
 800c6bc:	78fb      	ldrb	r3, [r7, #3]
 800c6be:	2b07      	cmp	r3, #7
 800c6c0:	d002      	beq.n	800c6c8 <STM_NextState+0x178>
 800c6c2:	78fb      	ldrb	r3, [r7, #3]
 800c6c4:	2b14      	cmp	r3, #20
 800c6c6:	d178      	bne.n	800c7ba <STM_NextState+0x26a>
      {
        bNewState = bState;
 800c6c8:	78fb      	ldrb	r3, [r7, #3]
 800c6ca:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c6d0:	e073      	b.n	800c7ba <STM_NextState+0x26a>

     case WAIT_STOP_MOTOR:
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800c6d2:	78fb      	ldrb	r3, [r7, #3]
 800c6d4:	2b12      	cmp	r3, #18
 800c6d6:	d002      	beq.n	800c6de <STM_NextState+0x18e>
 800c6d8:	78fb      	ldrb	r3, [r7, #3]
 800c6da:	2b07      	cmp	r3, #7
 800c6dc:	d16f      	bne.n	800c7be <STM_NextState+0x26e>
      {
        bNewState = bState;
 800c6de:	78fb      	ldrb	r3, [r7, #3]
 800c6e0:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c6e6:	e06a      	b.n	800c7be <STM_NextState+0x26e>

    case CLEAR:
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800c6e8:	78fb      	ldrb	r3, [r7, #3]
 800c6ea:	2b04      	cmp	r3, #4
 800c6ec:	d002      	beq.n	800c6f4 <STM_NextState+0x1a4>
 800c6ee:	78fb      	ldrb	r3, [r7, #3]
 800c6f0:	2b07      	cmp	r3, #7
 800c6f2:	d166      	bne.n	800c7c2 <STM_NextState+0x272>
      {
        bNewState = bState;
 800c6f4:	78fb      	ldrb	r3, [r7, #3]
 800c6f6:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c6fc:	e061      	b.n	800c7c2 <STM_NextState+0x272>

    case START:
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800c6fe:	78fb      	ldrb	r3, [r7, #3]
 800c700:	2b13      	cmp	r3, #19
 800c702:	d005      	beq.n	800c710 <STM_NextState+0x1c0>
 800c704:	78fb      	ldrb	r3, [r7, #3]
 800c706:	2b07      	cmp	r3, #7
 800c708:	d002      	beq.n	800c710 <STM_NextState+0x1c0>
 800c70a:	78fb      	ldrb	r3, [r7, #3]
 800c70c:	2b05      	cmp	r3, #5
 800c70e:	d15a      	bne.n	800c7c6 <STM_NextState+0x276>
      {
        bNewState = bState;
 800c710:	78fb      	ldrb	r3, [r7, #3]
 800c712:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c714:	2301      	movs	r3, #1
 800c716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c718:	e055      	b.n	800c7c6 <STM_NextState+0x276>

    case SWITCH_OVER:
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800c71a:	78fb      	ldrb	r3, [r7, #3]
 800c71c:	2b04      	cmp	r3, #4
 800c71e:	d005      	beq.n	800c72c <STM_NextState+0x1dc>
 800c720:	78fb      	ldrb	r3, [r7, #3]
 800c722:	2b07      	cmp	r3, #7
 800c724:	d002      	beq.n	800c72c <STM_NextState+0x1dc>
 800c726:	78fb      	ldrb	r3, [r7, #3]
 800c728:	2b05      	cmp	r3, #5
 800c72a:	d14e      	bne.n	800c7ca <STM_NextState+0x27a>
      {
        bNewState = bState;
 800c72c:	78fb      	ldrb	r3, [r7, #3]
 800c72e:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c730:	2301      	movs	r3, #1
 800c732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c734:	e049      	b.n	800c7ca <STM_NextState+0x27a>

    case START_RUN:
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800c736:	78fb      	ldrb	r3, [r7, #3]
 800c738:	2b06      	cmp	r3, #6
 800c73a:	d002      	beq.n	800c742 <STM_NextState+0x1f2>
 800c73c:	78fb      	ldrb	r3, [r7, #3]
 800c73e:	2b07      	cmp	r3, #7
 800c740:	d145      	bne.n	800c7ce <STM_NextState+0x27e>
      {
        bNewState = bState;
 800c742:	78fb      	ldrb	r3, [r7, #3]
 800c744:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c746:	2301      	movs	r3, #1
 800c748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c74a:	e040      	b.n	800c7ce <STM_NextState+0x27e>

    case RUN:
      if ( bState == ANY_STOP )
 800c74c:	78fb      	ldrb	r3, [r7, #3]
 800c74e:	2b07      	cmp	r3, #7
 800c750:	d13f      	bne.n	800c7d2 <STM_NextState+0x282>
      {
        bNewState = bState;
 800c752:	78fb      	ldrb	r3, [r7, #3]
 800c754:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c756:	2301      	movs	r3, #1
 800c758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c75a:	e03a      	b.n	800c7d2 <STM_NextState+0x282>

    case ANY_STOP:
      if ( bState == STOP )
 800c75c:	78fb      	ldrb	r3, [r7, #3]
 800c75e:	2b08      	cmp	r3, #8
 800c760:	d139      	bne.n	800c7d6 <STM_NextState+0x286>
      {
        bNewState = bState;
 800c762:	78fb      	ldrb	r3, [r7, #3]
 800c764:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c766:	2301      	movs	r3, #1
 800c768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c76a:	e034      	b.n	800c7d6 <STM_NextState+0x286>

    case STOP:
      if ( bState == STOP_IDLE )
 800c76c:	78fb      	ldrb	r3, [r7, #3]
 800c76e:	2b09      	cmp	r3, #9
 800c770:	d133      	bne.n	800c7da <STM_NextState+0x28a>
      {
        bNewState = bState;
 800c772:	78fb      	ldrb	r3, [r7, #3]
 800c774:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c776:	2301      	movs	r3, #1
 800c778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c77a:	e02e      	b.n	800c7da <STM_NextState+0x28a>

    case STOP_IDLE:
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800c77c:	78fb      	ldrb	r3, [r7, #3]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d002      	beq.n	800c788 <STM_NextState+0x238>
 800c782:	78fb      	ldrb	r3, [r7, #3]
 800c784:	2b0c      	cmp	r3, #12
 800c786:	d12a      	bne.n	800c7de <STM_NextState+0x28e>
      {
        bNewState = bState;
 800c788:	78fb      	ldrb	r3, [r7, #3]
 800c78a:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800c78c:	2301      	movs	r3, #1
 800c78e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c790:	e025      	b.n	800c7de <STM_NextState+0x28e>
    default:
      break;
 800c792:	bf00      	nop
 800c794:	e024      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c796:	bf00      	nop
 800c798:	e022      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c79a:	bf00      	nop
 800c79c:	e020      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c79e:	bf00      	nop
 800c7a0:	e01e      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c7a2:	bf00      	nop
 800c7a4:	e01c      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c7a6:	bf00      	nop
 800c7a8:	e01a      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c7aa:	bf00      	nop
 800c7ac:	e018      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c7ae:	bf00      	nop
 800c7b0:	e016      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c7b2:	bf00      	nop
 800c7b4:	e014      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c7b6:	bf00      	nop
 800c7b8:	e012      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c7ba:	bf00      	nop
 800c7bc:	e010      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c7be:	bf00      	nop
 800c7c0:	e00e      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c7c2:	bf00      	nop
 800c7c4:	e00c      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c7c6:	bf00      	nop
 800c7c8:	e00a      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c7ca:	bf00      	nop
 800c7cc:	e008      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c7ce:	bf00      	nop
 800c7d0:	e006      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c7d2:	bf00      	nop
 800c7d4:	e004      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c7d6:	bf00      	nop
 800c7d8:	e002      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c7da:	bf00      	nop
 800c7dc:	e000      	b.n	800c7e0 <STM_NextState+0x290>
      break;
 800c7de:	bf00      	nop
  }

  if ( bChangeState )
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d003      	beq.n	800c7ee <STM_NextState+0x29e>
  {
    pHandle->bState = bNewState;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	7bba      	ldrb	r2, [r7, #14]
 800c7ea:	701a      	strb	r2, [r3, #0]
 800c7ec:	e00d      	b.n	800c80a <STM_NextState+0x2ba>
  }
  else
  {
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800c7ee:	78fb      	ldrb	r3, [r7, #3]
 800c7f0:	2b03      	cmp	r3, #3
 800c7f2:	d00a      	beq.n	800c80a <STM_NextState+0x2ba>
 800c7f4:	78fb      	ldrb	r3, [r7, #3]
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d007      	beq.n	800c80a <STM_NextState+0x2ba>
 800c7fa:	78fb      	ldrb	r3, [r7, #3]
 800c7fc:	2b07      	cmp	r3, #7
 800c7fe:	d004      	beq.n	800c80a <STM_NextState+0x2ba>
            || ( bState == ANY_STOP ) ) )
    {
      /* If new state is not a user command START/STOP raise a software error */
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800c800:	2200      	movs	r2, #0
 800c802:	2180      	movs	r1, #128	; 0x80
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 f805 	bl	800c814 <STM_FaultProcessing>
    }
  }

  return ( bChangeState );
 800c80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3710      	adds	r7, #16
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 800c814:	b480      	push	{r7}
 800c816:	b085      	sub	sp, #20
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	460b      	mov	r3, r1
 800c81e:	807b      	strh	r3, [r7, #2]
 800c820:	4613      	mov	r3, r2
 800c822:	803b      	strh	r3, [r7, #0]
  State_t LocalState =  pHandle->bState;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	73fb      	strb	r3, [r7, #15]

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	885a      	ldrh	r2, [r3, #2]
 800c82e:	887b      	ldrh	r3, [r7, #2]
 800c830:	4313      	orrs	r3, r2
 800c832:	b29b      	uxth	r3, r3
 800c834:	b21a      	sxth	r2, r3
 800c836:	f9b7 3000 	ldrsh.w	r3, [r7]
 800c83a:	43db      	mvns	r3, r3
 800c83c:	b21b      	sxth	r3, r3
 800c83e:	4013      	ands	r3, r2
 800c840:	b21b      	sxth	r3, r3
 800c842:	b29a      	uxth	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	805a      	strh	r2, [r3, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	889a      	ldrh	r2, [r3, #4]
 800c84c:	887b      	ldrh	r3, [r7, #2]
 800c84e:	4313      	orrs	r3, r2
 800c850:	b29a      	uxth	r2, r3
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	809a      	strh	r2, [r3, #4]

  if ( LocalState == FAULT_NOW )
 800c856:	7bfb      	ldrb	r3, [r7, #15]
 800c858:	2b0a      	cmp	r3, #10
 800c85a:	d109      	bne.n	800c870 <STM_FaultProcessing+0x5c>
  {
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	885b      	ldrh	r3, [r3, #2]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d10e      	bne.n	800c882 <STM_FaultProcessing+0x6e>
    {
      pHandle->bState = FAULT_OVER;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	220b      	movs	r2, #11
 800c868:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_OVER;
 800c86a:	230b      	movs	r3, #11
 800c86c:	73fb      	strb	r3, [r7, #15]
 800c86e:	e008      	b.n	800c882 <STM_FaultProcessing+0x6e>
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	885b      	ldrh	r3, [r3, #2]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d004      	beq.n	800c882 <STM_FaultProcessing+0x6e>
    {
      pHandle->bState = FAULT_NOW;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	220a      	movs	r2, #10
 800c87c:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_NOW;
 800c87e:	230a      	movs	r3, #10
 800c880:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ( LocalState );
 800c882:	7bfb      	ldrb	r3, [r7, #15]
}
 800c884:	4618      	mov	r0, r3
 800c886:	3714      	adds	r7, #20
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <STM_GetState>:
  * @brief  Returns the current state machine state
  * @param  pHanlde pointer of type  STM_Handle_t
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  return ( pHandle->bState );
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	781b      	ldrb	r3, [r3, #0]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	370c      	adds	r7, #12
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr

0800c8a8 <STM_FaultAcknowledged>:
  * @param pHanlde pointer of type  STM_Handle_t
  * @retval bool true if the state machine has been moved to IDLE, false if the
  *        method call had no effects
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b085      	sub	sp, #20
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  bool bToBeReturned = false;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	73fb      	strb	r3, [r7, #15]

  if ( pHandle->bState == FAULT_OVER )
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	2b0b      	cmp	r3, #11
 800c8ba:	d107      	bne.n	800c8cc <STM_FaultAcknowledged+0x24>
  {
    pHandle->bState = STOP_IDLE;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2209      	movs	r2, #9
 800c8c0:	701a      	strb	r2, [r3, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	809a      	strh	r2, [r3, #4]
    bToBeReturned = true;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	73fb      	strb	r3, [r7, #15]
  }

  return ( bToBeReturned );
 800c8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3714      	adds	r7, #20
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr

0800c8da <STM_GetFaultState>:
  *         significant half are stored the information about the faults
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
 800c8da:	b480      	push	{r7}
 800c8dc:	b085      	sub	sp, #20
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	889b      	ldrh	r3, [r3, #4]
 800c8e6:	60fb      	str	r3, [r7, #12]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	885b      	ldrh	r3, [r3, #2]
 800c8ec:	041b      	lsls	r3, r3, #16
 800c8ee:	68fa      	ldr	r2, [r7, #12]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	60fb      	str	r3, [r7, #12]

  return LocalFaultState;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3714      	adds	r7, #20
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr

0800c902 <LL_USART_EnableIT_RXNE>:
{
 800c902:	b480      	push	{r7}
 800c904:	b083      	sub	sp, #12
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f043 0220 	orr.w	r2, r3, #32
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	601a      	str	r2, [r3, #0]
}
 800c916:	bf00      	nop
 800c918:	370c      	adds	r7, #12
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr

0800c922 <LL_USART_EnableIT_TXE>:
{
 800c922:	b480      	push	{r7}
 800c924:	b083      	sub	sp, #12
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	601a      	str	r2, [r3, #0]
}
 800c936:	bf00      	nop
 800c938:	370c      	adds	r7, #12
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr

0800c942 <LL_USART_DisableIT_RXNE>:
{
 800c942:	b480      	push	{r7}
 800c944:	b083      	sub	sp, #12
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f023 0220 	bic.w	r2, r3, #32
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	601a      	str	r2, [r3, #0]
}
 800c956:	bf00      	nop
 800c958:	370c      	adds	r7, #12
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr

0800c962 <LL_USART_DisableIT_TXE>:
{
 800c962:	b480      	push	{r7}
 800c964:	b083      	sub	sp, #12
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	601a      	str	r2, [r3, #0]
}
 800c976:	bf00      	nop
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800c982:	b480      	push	{r7}
 800c984:	b083      	sub	sp, #12
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	460b      	mov	r3, r1
 800c98c:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800c98e:	78fb      	ldrb	r3, [r7, #3]
 800c990:	b29a      	uxth	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800c996:	bf00      	nop
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr

0800c9a2 <UFCP_Init>:
static const uint16_t UFCP_Usart_Timeout_stop = 2;

/* Functions ---------------------------------------------------------*/

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b082      	sub	sp, #8
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7fc fc65 	bl	800927c <FCP_Init>
}
 800c9b2:	bf00      	nop
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
	...

0800c9bc <UFCP_RX_IRQ_Handler>:

/*
 *
 */
__weak void * UFCP_RX_IRQ_Handler( UFCP_Handle_t * pHandle, unsigned short rx_data )
{
 800c9bc:	b590      	push	{r4, r7, lr}
 800c9be:	b087      	sub	sp, #28
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	807b      	strh	r3, [r7, #2]
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800c9c8:	4b4b      	ldr	r3, [pc, #300]	; (800caf8 <UFCP_RX_IRQ_Handler+0x13c>)
 800c9ca:	617b      	str	r3, [r7, #20]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	613b      	str	r3, [r7, #16]
  uint8_t error_code;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 8089 	beq.w	800caee <UFCP_RX_IRQ_Handler+0x132>
  {
    uint8_t rx_byte = (uint8_t) rx_data;
 800c9dc:	887b      	ldrh	r3, [r7, #2]
 800c9de:	73fb      	strb	r3, [r7, #15]

    switch ( pBaseHandle->RxFrameLevel )
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d002      	beq.n	800c9f0 <UFCP_RX_IRQ_Handler+0x34>
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d013      	beq.n	800ca16 <UFCP_RX_IRQ_Handler+0x5a>
 800c9ee:	e029      	b.n	800ca44 <UFCP_RX_IRQ_Handler+0x88>
    {
      case 0: // First Byte received --> The Code
        pBaseHandle->RxFrame.Code = rx_byte;
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	7bfa      	ldrb	r2, [r7, #15]
 800c9f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
        /* Need to ask the caller to start our timeout... TODO: Is this really useful? */
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 800c9f8:	4b40      	ldr	r3, [pc, #256]	; (800cafc <UFCP_RX_IRQ_Handler+0x140>)
 800c9fa:	617b      	str	r3, [r7, #20]

        /* Start Rx Timeout */
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	8a1a      	ldrh	r2, [r3, #16]
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	825a      	strh	r2, [r3, #18]
        pBaseHandle->RxFrameLevel++;
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	b2da      	uxtb	r2, r3
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        break;
 800ca14:	e06b      	b.n	800caee <UFCP_RX_IRQ_Handler+0x132>

      case 1: // Second Byte received --> Size of the payload
        pBaseHandle->RxFrame.Size = rx_byte;
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	7bfa      	ldrb	r2, [r7, #15]
 800ca1a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
        pBaseHandle->RxFrameLevel++;
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800ca24:	3301      	adds	r3, #1
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ca34:	b25b      	sxtb	r3, r3
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	da58      	bge.n	800caec <UFCP_RX_IRQ_Handler+0x130>
        { /* Garbage data received decoded with a payload size that exceeds max*/
          pBaseHandle->RxFrameLevel =0 ;
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        }
        break;
 800ca42:	e053      	b.n	800caec <UFCP_RX_IRQ_Handler+0x130>

      default: // In the payload or the "CRC"
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ca52:	3302      	adds	r3, #2
 800ca54:	429a      	cmp	r2, r3
 800ca56:	da11      	bge.n	800ca7c <UFCP_RX_IRQ_Handler+0xc0>
        {
          // read byte is for the payload
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800ca5e:	3b02      	subs	r3, #2
 800ca60:	693a      	ldr	r2, [r7, #16]
 800ca62:	4413      	add	r3, r2
 800ca64:	7bfa      	ldrb	r2, [r7, #15]
 800ca66:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
          pBaseHandle->RxFrameLevel++;
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800ca70:	3301      	adds	r3, #1
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 800ca7a:	e038      	b.n	800caee <UFCP_RX_IRQ_Handler+0x132>
        }
        else
        {
          // read byte is for the "CRC"
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	7bfa      	ldrb	r2, [r7, #15]
 800ca80:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

          /* Need to ask the caller to stop our timeout... TODO: Is this really useful? */
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800ca84:	4b1e      	ldr	r3, [pc, #120]	; (800cb00 <UFCP_RX_IRQ_Handler+0x144>)
 800ca86:	617b      	str	r3, [r7, #20]

          /* Stop Rx Timeout */
          pBaseHandle->RxTimeoutCountdown = 0;
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	825a      	strh	r2, [r3, #18]
          /* Disable the reception IRQ */
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7ff ff54 	bl	800c942 <LL_USART_DisableIT_RXNE>
          /* Indicate the reception is complete. */
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

          /* Check the Control Sum */
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	3399      	adds	r3, #153	; 0x99
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7fc fc37 	bl	800931a <FCP_CalcCRC>
 800caac:	4603      	mov	r3, r0
 800caae:	461a      	mov	r2, r3
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d10e      	bne.n	800cad8 <UFCP_RX_IRQ_Handler+0x11c>
          {
            /* OK. the frame is considered correct. Let's forward to client. */
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	689c      	ldr	r4, [r3, #8]
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	6818      	ldr	r0, [r3, #0]
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	f893 1099 	ldrb.w	r1, [r3, #153]	; 0x99
                                                      pBaseHandle->RxFrame.Code,
                                                      pBaseHandle->RxFrame.Buffer,
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	f103 029b 	add.w	r2, r3, #155	; 0x9b
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cad4:	47a0      	blx	r4
 800cad6:	e00a      	b.n	800caee <UFCP_RX_IRQ_Handler+0x132>
                                                      pBaseHandle->RxFrame.Size );
          }
          else
          {
            error_code = FCP_MSG_RX_BAD_CRC;
 800cad8:	230a      	movs	r3, #10
 800cada:	73bb      	strb	r3, [r7, #14]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800cadc:	f107 020e 	add.w	r2, r7, #14
 800cae0:	2301      	movs	r3, #1
 800cae2:	21ff      	movs	r1, #255	; 0xff
 800cae4:	6938      	ldr	r0, [r7, #16]
 800cae6:	f000 f8a3 	bl	800cc30 <UFCP_Send>
 800caea:	e000      	b.n	800caee <UFCP_RX_IRQ_Handler+0x132>
        break;
 800caec:	bf00      	nop
          }
        }
    } /* end of switch ( pBaseHandle->RxFrameLevel ) */
  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState ) */

  return ret_val;
 800caee:	697b      	ldr	r3, [r7, #20]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	371c      	adds	r7, #28
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd90      	pop	{r4, r7, pc}
 800caf8:	0800dcce 	.word	0x0800dcce
 800cafc:	0800dcd0 	.word	0x0800dcd0
 800cb00:	0800dcd2 	.word	0x0800dcd2

0800cb04 <UFCP_TX_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	60bb      	str	r3, [r7, #8]

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d050      	beq.n	800cbbc <UFCP_TX_IRQ_Handler+0xb8>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d002      	beq.n	800cb2a <UFCP_TX_IRQ_Handler+0x26>
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d004      	beq.n	800cb32 <UFCP_TX_IRQ_Handler+0x2e>
 800cb28:	e007      	b.n	800cb3a <UFCP_TX_IRQ_Handler+0x36>
    {
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	7d1b      	ldrb	r3, [r3, #20]
 800cb2e:	81fb      	strh	r3, [r7, #14]
        break;
 800cb30:	e019      	b.n	800cb66 <UFCP_TX_IRQ_Handler+0x62>

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	7d5b      	ldrb	r3, [r3, #21]
 800cb36:	81fb      	strh	r3, [r7, #14]
        break;
 800cb38:	e015      	b.n	800cb66 <UFCP_TX_IRQ_Handler+0x62>

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cb40:	461a      	mov	r2, r3
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	7d5b      	ldrb	r3, [r3, #21]
 800cb46:	3302      	adds	r3, #2
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	da08      	bge.n	800cb5e <UFCP_TX_IRQ_Handler+0x5a>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cb52:	3b02      	subs	r3, #2
 800cb54:	68ba      	ldr	r2, [r7, #8]
 800cb56:	4413      	add	r3, r2
 800cb58:	7d9b      	ldrb	r3, [r3, #22]
 800cb5a:	81fb      	strh	r3, [r7, #14]
 800cb5c:	e003      	b.n	800cb66 <UFCP_TX_IRQ_Handler+0x62>
        }
        else
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800cb64:	81fb      	strh	r3, [r7, #14]
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800cb6c:	89fa      	ldrh	r2, [r7, #14]
 800cb6e:	b2d2      	uxtb	r2, r2
 800cb70:	4611      	mov	r1, r2
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7ff ff05 	bl	800c982 <LL_USART_TransmitData8>

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cb7e:	461a      	mov	r2, r3
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	7d5b      	ldrb	r3, [r3, #21]
 800cb84:	3302      	adds	r3, #2
 800cb86:	429a      	cmp	r2, r3
 800cb88:	da08      	bge.n	800cb9c <UFCP_TX_IRQ_Handler+0x98>
    {
      pBaseHandle->TxFrameLevel++;
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cb90:	3301      	adds	r3, #1
 800cb92:	b2da      	uxtb	r2, r3
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800cb9a:	e00f      	b.n	800cbbc <UFCP_TX_IRQ_Handler+0xb8>
      LL_USART_DisableIT_TXE(pHandle->USARTx);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7ff fedd 	bl	800c962 <LL_USART_DisableIT_TXE>
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	68ba      	ldr	r2, [r7, #8]
 800cbb6:	6812      	ldr	r2, [r2, #0]
 800cbb8:	4610      	mov	r0, r2
 800cbba:	4798      	blx	r3
}
 800cbbc:	bf00      	nop
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <UFCP_OVR_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_OVR_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	60fb      	str	r3, [r7, #12]
  uint8_t error_code;

  error_code = UFCP_MSG_OVERRUN;
 800cbd0:	2308      	movs	r3, #8
 800cbd2:	72fb      	strb	r3, [r7, #11]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800cbd4:	f107 020b 	add.w	r2, r7, #11
 800cbd8:	2301      	movs	r3, #1
 800cbda:	21ff      	movs	r1, #255	; 0xff
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f000 f827 	bl	800cc30 <UFCP_Send>

}
 800cbe2:	bf00      	nop
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <UFCP_Receive>:
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );

}

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
 800cbea:	b580      	push	{r7, lr}
 800cbec:	b084      	sub	sp, #16
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d112      	bne.n	800cc22 <UFCP_Receive+0x38>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	60bb      	str	r3, [r7, #8]

    pHandle->RxFrameLevel = 0;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff fe73 	bl	800c902 <LL_USART_EnableIT_RXNE>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800cc1c:	2302      	movs	r3, #2
 800cc1e:	73fb      	strb	r3, [r7, #15]
 800cc20:	e001      	b.n	800cc26 <UFCP_Receive+0x3c>
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800cc22:	2301      	movs	r3, #1
 800cc24:	73fb      	strb	r3, [r7, #15]
  }

  return ret_val;
 800cc26:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b088      	sub	sp, #32
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	607a      	str	r2, [r7, #4]
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	72fb      	strb	r3, [r7, #11]
 800cc40:	4613      	mov	r3, r2
 800cc42:	72bb      	strb	r3, [r7, #10]
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d133      	bne.n	800ccb6 <UFCP_Send+0x86>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	617b      	str	r3, [r7, #20]
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	3316      	adds	r3, #22
 800cc56:	61bb      	str	r3, [r7, #24]

    pHandle->TxFrame.Code = code;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	7afa      	ldrb	r2, [r7, #11]
 800cc5c:	751a      	strb	r2, [r3, #20]
    pHandle->TxFrame.Size = size;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	7aba      	ldrb	r2, [r7, #10]
 800cc62:	755a      	strb	r2, [r3, #21]
    while ( size-- ) *dest++ = *buffer++;
 800cc64:	e007      	b.n	800cc76 <UFCP_Send+0x46>
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	1c53      	adds	r3, r2, #1
 800cc6a:	607b      	str	r3, [r7, #4]
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	1c59      	adds	r1, r3, #1
 800cc70:	61b9      	str	r1, [r7, #24]
 800cc72:	7812      	ldrb	r2, [r2, #0]
 800cc74:	701a      	strb	r2, [r3, #0]
 800cc76:	7abb      	ldrb	r3, [r7, #10]
 800cc78:	1e5a      	subs	r2, r3, #1
 800cc7a:	72ba      	strb	r2, [r7, #10]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d1f2      	bne.n	800cc66 <UFCP_Send+0x36>
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	3314      	adds	r3, #20
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7fc fb48 	bl	800931a <FCP_CalcCRC>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    pHandle->TxFrameLevel = 0;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2201      	movs	r2, #1
 800cca0:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97

    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f7ff fe39 	bl	800c922 <LL_USART_EnableIT_TXE>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800ccb0:	2302      	movs	r3, #2
 800ccb2:	77fb      	strb	r3, [r7, #31]
 800ccb4:	e001      	b.n	800ccba <UFCP_Send+0x8a>
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	77fb      	strb	r3, [r7, #31]
  }

  return ret_val;
 800ccba:	7ffb      	ldrb	r3, [r7, #31]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3720      	adds	r7, #32
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
}
 800ccd4:	bf00      	nop
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <VSS_Init>:
* @brief  Software initialization of VirtualSpeedSensor component
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval none
*/
__weak void VSS_Init( VirtualSpeedSensor_Handle_t * pHandle )
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
#ifdef FASTDIV
  FD_Init( &( pHandle->fd ) );
#endif

  VSS_Clear( pHandle );
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f000 f804 	bl	800ccf6 <VSS_Clear>
}
 800ccee:	bf00      	nop
 800ccf0:	3708      	adds	r7, #8
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <VSS_Clear>:
*         of the motor.
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{
 800ccf6:	b480      	push	{r7}
 800ccf8:	b083      	sub	sp, #12
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]

  pHandle->_Super.bSpeedErrorNumber = 0u;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2200      	movs	r2, #0
 800cd02:	701a      	strb	r2, [r3, #0]
  pHandle->_Super.hElAngle = 0;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	809a      	strh	r2, [r3, #4]
  pHandle->_Super.hMecAngle = 0;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	819a      	strh	r2, [r3, #12]
  pHandle->_Super.hElSpeedDpp = 0;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	81da      	strh	r2, [r3, #14]
  pHandle->_Super.hMecAccelUnitP = 0;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	825a      	strh	r2, [r3, #18]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	701a      	strb	r2, [r3, #0]

  pHandle->wElAccDppP32 = 0;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	621a      	str	r2, [r3, #32]
  pHandle->wElSpeedDpp32 = 0;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	625a      	str	r2, [r3, #36]	; 0x24
  pHandle->hRemainingStep = 0u;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	851a      	strh	r2, [r3, #40]	; 0x28
  pHandle->hElAngleAccu = 0;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	861a      	strh	r2, [r3, #48]	; 0x30

  pHandle->bTransitionStarted = false;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  pHandle->bTransitionEnded = false;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	85da      	strh	r2, [r3, #46]	; 0x2e
  pHandle->bTransitionLocked = false;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  pHandle->bCopyObserver = false;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 800cd6a:	bf00      	nop
 800cd6c:	370c      	adds	r7, #12
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr

0800cd76 <VSS_CalcElAngle>:
*         instantaneous electrical speed express in dpp.
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval int16_t Measured electrical angle in s16degree format.
*/
__weak int16_t VSS_CalcElAngle( VirtualSpeedSensor_Handle_t * pHandle, void * pInputVars_str )
{
 800cd76:	b480      	push	{r7}
 800cd78:	b087      	sub	sp, #28
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
 800cd7e:	6039      	str	r1, [r7, #0]

  int16_t hRetAngle;
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;
 800cd80:	2301      	movs	r3, #1
 800cd82:	827b      	strh	r3, [r7, #18]

  if ( pHandle->bCopyObserver == true )
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d003      	beq.n	800cd96 <VSS_CalcElAngle+0x20>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	881b      	ldrh	r3, [r3, #0]
 800cd92:	82fb      	strh	r3, [r7, #22]
 800cd94:	e09a      	b.n	800cecc <VSS_CalcElAngle+0x156>
  }
  else
  {
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd9c:	b29a      	uxth	r2, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	4413      	add	r3, r2
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	b21a      	sxth	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	861a      	strh	r2, [r3, #48]	; 0x30
#ifdef FASTDIV
    pHandle->_Super.hMecAngle += ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                 ( int32_t )pHandle->_Super.hElSpeedDpp,
                                 ( int32_t )pHandle->_Super.bElToMecRatio ) );
#else
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800cdbe:	4619      	mov	r1, r3
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	785b      	ldrb	r3, [r3, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800cdc4:	fb91 f3f3 	sdiv	r3, r1, r3
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	4413      	add	r3, r2
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	b21a      	sxth	r2, r3
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	80da      	strh	r2, [r3, #6]
#endif

    if ( pHandle->bTransitionStarted == true )
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d073      	beq.n	800cec6 <VSS_CalcElAngle+0x150>
    {
      if ( pHandle->hTransitionRemainingSteps == 0 )
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d10a      	bne.n	800cdfe <VSS_CalcElAngle+0x88>
      {
        hRetAngle = *( int16_t * )pInputVars_str;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	881b      	ldrh	r3, [r3, #0]
 800cdec:	82fb      	strh	r3, [r7, #22]
        pHandle->bTransitionEnded = true;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0u;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	701a      	strb	r2, [r3, #0]
 800cdfc:	e066      	b.n	800cecc <VSS_CalcElAngle+0x156>
      }
      else
      {
        pHandle->hTransitionRemainingSteps--;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	3b01      	subs	r3, #1
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	b21a      	sxth	r2, r3
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	db0b      	blt.n	800ce32 <VSS_CalcElAngle+0xbc>
        {
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce20:	b29a      	uxth	r2, r3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	1ad3      	subs	r3, r2, r3
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	82bb      	strh	r3, [r7, #20]
 800ce30:	e00d      	b.n	800ce4e <VSS_CalcElAngle+0xd8>
        }
        else
        {
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	1ad3      	subs	r3, r2, r3
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	82bb      	strh	r3, [r7, #20]
          hSignCorr = -1;
 800ce48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce4c:	827b      	strh	r3, [r7, #18]
        }

        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 800ce4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 800ce58:	fb02 f303 	mul.w	r3, r2, r3
 800ce5c:	60fb      	str	r3, [r7, #12]
#ifdef FASTDIV
        hAngleCorr = ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                              wAux,
                                              ( int32_t )( pHandle->hTransitionSteps ) ) );
#else
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800ce64:	461a      	mov	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce6c:	817b      	strh	r3, [r7, #10]
#endif

        hAngleCorr *= hSignCorr;
 800ce6e:	897a      	ldrh	r2, [r7, #10]
 800ce70:	8a7b      	ldrh	r3, [r7, #18]
 800ce72:	fb12 f303 	smulbb	r3, r2, r3
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	817b      	strh	r3, [r7, #10]

        if ( hAngleDiff >= 0 )
 800ce7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	db0c      	blt.n	800ce9c <VSS_CalcElAngle+0x126>
        {
          pHandle->bTransitionLocked = true;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2201      	movs	r2, #1
 800ce86:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce90:	b29a      	uxth	r2, r3
 800ce92:	897b      	ldrh	r3, [r7, #10]
 800ce94:	1ad3      	subs	r3, r2, r3
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	82fb      	strh	r3, [r7, #22]
 800ce9a:	e017      	b.n	800cecc <VSS_CalcElAngle+0x156>
        }
        else
        {
          if ( pHandle->bTransitionLocked == false )
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cea2:	f083 0301 	eor.w	r3, r3, #1
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d003      	beq.n	800ceb4 <VSS_CalcElAngle+0x13e>
          {
            hRetAngle = pHandle->hElAngleAccu;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ceb0:	82fb      	strh	r3, [r7, #22]
 800ceb2:	e00b      	b.n	800cecc <VSS_CalcElAngle+0x156>
          }
          else
          {
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ceba:	b29a      	uxth	r2, r3
 800cebc:	897b      	ldrh	r3, [r7, #10]
 800cebe:	4413      	add	r3, r2
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	82fb      	strh	r3, [r7, #22]
 800cec4:	e002      	b.n	800cecc <VSS_CalcElAngle+0x156>
        }
      }
    }
    else
    {
      hRetAngle = pHandle->hElAngleAccu;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ceca:	82fb      	strh	r3, [r7, #22]
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	8afa      	ldrh	r2, [r7, #22]
 800ced0:	809a      	strh	r2, [r3, #4]
  return hRetAngle;
 800ced2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	371c      	adds	r7, #28
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr

0800cee2 <VSS_CalcAvrgMecSpeedUnit>:
  *         mechanical speed (SPED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b084      	sub	sp, #16
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
 800ceea:	6039      	str	r1, [r7, #0]
  bool SpeedSensorReliability = false;
 800ceec:	2300      	movs	r3, #0
 800ceee:	73fb      	strb	r3, [r7, #15]

  if ( pHandle->hRemainingStep > 1u )
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d936      	bls.n	800cf66 <VSS_CalcAvrgMecSpeedUnit+0x84>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6a1b      	ldr	r3, [r3, #32]
 800cf00:	441a      	add	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	625a      	str	r2, [r3, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	da02      	bge.n	800cf14 <VSS_CalcAvrgMecSpeedUnit+0x32>
 800cf0e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800cf12:	33ff      	adds	r3, #255	; 0xff
 800cf14:	141b      	asrs	r3, r3, #16
 800cf16:	b21a      	sxth	r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	81da      	strh	r2, [r3, #14]

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800cf22:	461a      	mov	r2, r3
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	8b5b      	ldrh	r3, [r3, #26]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800cf28:	fb03 f202 	mul.w	r2, r3, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	4413      	add	r3, r2
 800cf32:	005b      	lsls	r3, r3, #1
 800cf34:	461a      	mov	r2, r3
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	69db      	ldr	r3, [r3, #28]
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	785b      	ldrb	r3, [r3, #1]
 800cf40:	fb03 f301 	mul.w	r3, r3, r1
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800cf44:	fb92 f3f3 	sdiv	r3, r2, r3
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800cf48:	b21a      	sxth	r2, r3
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	801a      	strh	r2, [r3, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	819a      	strh	r2, [r3, #12]

    pHandle->hRemainingStep--;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf5c:	3b01      	subs	r3, #1
 800cf5e:	b29a      	uxth	r2, r3
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	851a      	strh	r2, [r3, #40]	; 0x28
 800cf64:	e037      	b.n	800cfd6 <VSS_CalcAvrgMecSpeedUnit+0xf4>
  }
  else if ( pHandle->hRemainingStep == 1u )
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d12e      	bne.n	800cfcc <VSS_CalcAvrgMecSpeedUnit+0xea>
  {
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	801a      	strh	r2, [r3, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	819a      	strh	r2, [r3, #12]

    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf88:	461a      	mov	r2, r3
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	69db      	ldr	r3, [r3, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800cf8e:	fb03 f202 	mul.w	r2, r3, r2
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	8b5b      	ldrh	r3, [r3, #26]
 800cf96:	4619      	mov	r1, r3
 800cf98:	460b      	mov	r3, r1
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	440b      	add	r3, r1
 800cf9e:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 800cfa0:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800cfa4:	b21a      	sxth	r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	81da      	strh	r2, [r3, #14]

    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800cfb0:	b29a      	uxth	r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	785b      	ldrb	r3, [r3, #1]
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	fb12 f303 	smulbb	r3, r2, r3
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	b21a      	sxth	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	81da      	strh	r2, [r3, #14]

    pHandle->hRemainingStep = 0u;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	851a      	strh	r2, [r3, #40]	; 0x28
 800cfca:	e004      	b.n	800cfd6 <VSS_CalcAvrgMecSpeedUnit+0xf4>
  }
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	801a      	strh	r2, [r3, #0]
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfdc:	f083 0301 	eor.w	r3, r3, #1
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d006      	beq.n	800cff4 <VSS_CalcAvrgMecSpeedUnit+0x112>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	78da      	ldrb	r2, [r3, #3]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	701a      	strb	r2, [r3, #0]
    SpeedSensorReliability = false;
 800cfee:	2300      	movs	r3, #0
 800cff0:	73fb      	strb	r3, [r7, #15]
 800cff2:	e006      	b.n	800d002 <VSS_CalcAvrgMecSpeedUnit+0x120>
  }
  else
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6839      	ldr	r1, [r7, #0]
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7ff f817 	bl	800c02c <SPD_IsMecSpeedReliable>
 800cffe:	4603      	mov	r3, r0
 800d000:	73fb      	strb	r3, [r7, #15]
  }

  return ( SpeedSensorReliability );
 800d002:	7bfb      	ldrb	r3, [r7, #15]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3710      	adds	r7, #16
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <VSS_SetMecAngle>:
  * @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
  * @param  hMecAngle istantaneous measure of rotor mechanical angle
  * @retval none
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	460b      	mov	r3, r1
 800d016:	807b      	strh	r3, [r7, #2]

  pHandle->hElAngleAccu = hMecAngle;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	887a      	ldrh	r2, [r7, #2]
 800d01c:	861a      	strh	r2, [r3, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d024:	461a      	mov	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	785b      	ldrb	r3, [r3, #1]
 800d02a:	fb92 f3f3 	sdiv	r3, r2, r3
 800d02e:	b21a      	sxth	r2, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.hElAngle = hMecAngle;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	887a      	ldrh	r2, [r7, #2]
 800d038:	809a      	strh	r2, [r3, #4]
}
 800d03a:	bf00      	nop
 800d03c:	370c      	adds	r7, #12
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr
	...

0800d048 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 800d048:	b480      	push	{r7}
 800d04a:	b087      	sub	sp, #28
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	460b      	mov	r3, r1
 800d052:	807b      	strh	r3, [r7, #2]
 800d054:	4613      	mov	r3, r2
 800d056:	803b      	strh	r3, [r7, #0]
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d05e:	f083 0301 	eor.w	r3, r3, #1
 800d062:	b2db      	uxtb	r3, r3
 800d064:	2b00      	cmp	r3, #0
 800d066:	d06f      	beq.n	800d148 <VSS_SetMecAcceleration+0x100>
  {
    if ( hDurationms == 0u )
 800d068:	883b      	ldrh	r3, [r7, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d128      	bne.n	800d0c0 <VSS_SetMecAcceleration+0x78>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	887a      	ldrh	r2, [r7, #2]
 800d072:	819a      	strh	r2, [r3, #12]

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800d074:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	69d2      	ldr	r2, [r2, #28]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800d07c:	fb02 f203 	mul.w	r2, r2, r3
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	8b5b      	ldrh	r3, [r3, #26]
 800d084:	4619      	mov	r1, r3
 800d086:	460b      	mov	r3, r1
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	440b      	add	r3, r1
 800d08c:	005b      	lsls	r3, r3, #1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800d08e:	fb92 f3f3 	sdiv	r3, r2, r3
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800d092:	b21a      	sxth	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	81da      	strh	r2, [r3, #14]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	785b      	ldrb	r3, [r3, #1]
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	fb12 f303 	smulbb	r3, r2, r3
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	b21a      	sxth	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	81da      	strh	r2, [r3, #14]

      pHandle->hRemainingStep = 0u;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	851a      	strh	r2, [r3, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	887a      	ldrh	r2, [r7, #2]
 800d0bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 800d0be:	e043      	b.n	800d148 <VSS_SetMecAcceleration+0x100>
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800d0c0:	883b      	ldrh	r3, [r7, #0]
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	8e92      	ldrh	r2, [r2, #52]	; 0x34
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800d0c6:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800d0ca:	4a22      	ldr	r2, [pc, #136]	; (800d154 <VSS_SetMecAcceleration+0x10c>)
 800d0cc:	fba2 2303 	umull	r2, r3, r2, r3
 800d0d0:	099b      	lsrs	r3, r3, #6
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800d0d2:	82fb      	strh	r3, [r7, #22]
      hNbrStep++;
 800d0d4:	8afb      	ldrh	r3, [r7, #22]
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	82fb      	strh	r3, [r7, #22]
      pHandle->hRemainingStep = hNbrStep;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	8afa      	ldrh	r2, [r7, #22]
 800d0de:	851a      	strh	r2, [r3, #40]	; 0x28
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d0e6:	461a      	mov	r2, r3
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	785b      	ldrb	r3, [r3, #1]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800d0ec:	fb92 f3f3 	sdiv	r3, r2, r3
 800d0f0:	82bb      	strh	r3, [r7, #20]
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800d0f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	69d2      	ldr	r2, [r2, #28]
 800d0fa:	fb02 f203 	mul.w	r2, r2, r3
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	8b5b      	ldrh	r3, [r3, #26]
 800d102:	4619      	mov	r1, r3
 800d104:	460b      	mov	r3, r1
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	440b      	add	r3, r1
 800d10a:	005b      	lsls	r3, r3, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800d10c:	fb92 f3f3 	sdiv	r3, r2, r3
 800d110:	827b      	strh	r3, [r7, #18]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800d112:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800d116:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d11a:	1ad3      	subs	r3, r2, r3
 800d11c:	041a      	lsls	r2, r3, #16
                        ( int32_t )65536 ) / ( int32_t )hNbrStep;
 800d11e:	8afb      	ldrh	r3, [r7, #22]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800d120:	fb92 f3f3 	sdiv	r3, r2, r3
 800d124:	60fb      	str	r3, [r7, #12]
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	785b      	ldrb	r3, [r3, #1]
 800d12a:	461a      	mov	r2, r3
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	fb03 f202 	mul.w	r2, r3, r2
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	621a      	str	r2, [r3, #32]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	887a      	ldrh	r2, [r7, #2]
 800d13a:	855a      	strh	r2, [r3, #42]	; 0x2a
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d142:	041a      	lsls	r2, r3, #16
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d148:	bf00      	nop
 800d14a:	371c      	adds	r7, #28
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr
 800d154:	10624dd3 	.word	0x10624dd3

0800d158 <VSS_SetStartTransition>:
  * @retval bool true if Transition phase is enabled (started or not), false if
            transition has been triggered but it's actually disabled
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
 800d158:	b480      	push	{r7}
 800d15a:	b085      	sub	sp, #20
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	460b      	mov	r3, r1
 800d162:	70fb      	strb	r3, [r7, #3]
  bool bAux = true;
 800d164:	2301      	movs	r3, #1
 800d166:	73fb      	strb	r3, [r7, #15]
  if ( bCommand == true )
 800d168:	78fb      	ldrb	r3, [r7, #3]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d011      	beq.n	800d192 <VSS_SetStartTransition+0x3a>
  {
    pHandle->bTransitionStarted = true;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2201      	movs	r2, #1
 800d172:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if ( pHandle->hTransitionSteps == 0 )
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d108      	bne.n	800d192 <VSS_SetStartTransition+0x3a>
    {
      pHandle->bTransitionEnded = true;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	701a      	strb	r2, [r3, #0]
      bAux = false;
 800d18e:	2300      	movs	r3, #0
 800d190:	73fb      	strb	r3, [r7, #15]
    }
  }
  return bAux;
 800d192:	7bfb      	ldrb	r3, [r7, #15]
}
 800d194:	4618      	mov	r0, r3
 800d196:	3714      	adds	r7, #20
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <VSS_TransitionEnded>:
  }
  return ( retVal );
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
    return pHandle->bTransitionEnded;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	370c      	adds	r7, #12
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr
	...

0800d1bc <RUC_Init>:
 800d1bc:	b430      	push	{r4, r5}
 800d1be:	6681      	str	r1, [r0, #104]	; 0x68
 800d1c0:	2100      	movs	r1, #0
 800d1c2:	9c02      	ldr	r4, [sp, #8]
 800d1c4:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 800d1c8:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 800d1cc:	f110 010c 	adds.w	r1, r0, #12
 800d1d0:	66c2      	str	r2, [r0, #108]	; 0x6c
 800d1d2:	6703      	str	r3, [r0, #112]	; 0x70
 800d1d4:	6744      	str	r4, [r0, #116]	; 0x74
 800d1d6:	d023      	beq.n	800d220 <RUC_Init+0x64>
 800d1d8:	6943      	ldr	r3, [r0, #20]
 800d1da:	b323      	cbz	r3, 800d226 <RUC_Init+0x6a>
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	b323      	cbz	r3, 800d22a <RUC_Init+0x6e>
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	b323      	cbz	r3, 800d22e <RUC_Init+0x72>
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	b1c3      	cbz	r3, 800d21a <RUC_Init+0x5e>
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	2105      	movs	r1, #5
 800d1ec:	b1b3      	cbz	r3, 800d21c <RUC_Init+0x60>
 800d1ee:	2204      	movs	r2, #4
 800d1f0:	2105      	movs	r1, #5
 800d1f2:	8805      	ldrh	r5, [r0, #0]
 800d1f4:	4c0f      	ldr	r4, [pc, #60]	; (800d234 <RUC_Init+0x78>)
 800d1f6:	2364      	movs	r3, #100	; 0x64
 800d1f8:	fb03 f305 	mul.w	r3, r3, r5
 800d1fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d200:	fba4 4303 	umull	r4, r3, r4, r3
 800d204:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d208:	2400      	movs	r4, #0
 800d20a:	099b      	lsrs	r3, r3, #6
 800d20c:	6154      	str	r4, [r2, #20]
 800d20e:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 800d212:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 800d216:	bc30      	pop	{r4, r5}
 800d218:	4770      	bx	lr
 800d21a:	2104      	movs	r1, #4
 800d21c:	1e4a      	subs	r2, r1, #1
 800d21e:	e7e8      	b.n	800d1f2 <RUC_Init+0x36>
 800d220:	f04f 32ff 	mov.w	r2, #4294967295
 800d224:	e7e5      	b.n	800d1f2 <RUC_Init+0x36>
 800d226:	2101      	movs	r1, #1
 800d228:	e7f8      	b.n	800d21c <RUC_Init+0x60>
 800d22a:	2102      	movs	r1, #2
 800d22c:	e7f6      	b.n	800d21c <RUC_Init+0x60>
 800d22e:	2103      	movs	r1, #3
 800d230:	e7f4      	b.n	800d21c <RUC_Init+0x60>
 800d232:	bf00      	nop
 800d234:	10624dd3 	.word	0x10624dd3

0800d238 <RUC_Clear>:
 800d238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d23c:	4604      	mov	r4, r0
 800d23e:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 800d240:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 800d244:	80e1      	strh	r1, [r4, #6]
 800d246:	2500      	movs	r5, #0
 800d248:	4638      	mov	r0, r7
 800d24a:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 800d24e:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800d252:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 800d256:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 800d25a:	460e      	mov	r6, r1
 800d25c:	f7ff fd4b 	bl	800ccf6 <VSS_Clear>
 800d260:	4629      	mov	r1, r5
 800d262:	4640      	mov	r0, r8
 800d264:	f7fe ffe8 	bl	800c238 <STC_SetControlMode>
 800d268:	8861      	ldrh	r1, [r4, #2]
 800d26a:	b2b6      	uxth	r6, r6
 800d26c:	fb11 f106 	smulbb	r1, r1, r6
 800d270:	b209      	sxth	r1, r1
 800d272:	4638      	mov	r0, r7
 800d274:	f7ff feca 	bl	800d00c <VSS_SetMecAngle>
 800d278:	462a      	mov	r2, r5
 800d27a:	4629      	mov	r1, r5
 800d27c:	4640      	mov	r0, r8
 800d27e:	f7fe ffed 	bl	800c25c <STC_ExecRamp>
 800d282:	8a21      	ldrh	r1, [r4, #16]
 800d284:	89a2      	ldrh	r2, [r4, #12]
 800d286:	fb11 f106 	smulbb	r1, r1, r6
 800d28a:	b209      	sxth	r1, r1
 800d28c:	4640      	mov	r0, r8
 800d28e:	f7fe ffe5 	bl	800c25c <STC_ExecRamp>
 800d292:	89e1      	ldrh	r1, [r4, #14]
 800d294:	89a2      	ldrh	r2, [r4, #12]
 800d296:	fb11 f106 	smulbb	r1, r1, r6
 800d29a:	4638      	mov	r0, r7
 800d29c:	b209      	sxth	r1, r1
 800d29e:	f7ff fed3 	bl	800d048 <VSS_SetMecAcceleration>
 800d2a2:	89a0      	ldrh	r0, [r4, #12]
 800d2a4:	8823      	ldrh	r3, [r4, #0]
 800d2a6:	4907      	ldr	r1, [pc, #28]	; (800d2c4 <RUC_Clear+0x8c>)
 800d2a8:	6962      	ldr	r2, [r4, #20]
 800d2aa:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 800d2ae:	fb03 f300 	mul.w	r3, r3, r0
 800d2b2:	fba1 1303 	umull	r1, r3, r1, r3
 800d2b6:	099b      	lsrs	r3, r3, #6
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	80a3      	strh	r3, [r4, #4]
 800d2bc:	60a2      	str	r2, [r4, #8]
 800d2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c2:	bf00      	nop
 800d2c4:	10624dd3 	.word	0x10624dd3

0800d2c8 <RUC_Exec>:
 800d2c8:	b538      	push	{r3, r4, r5, lr}
 800d2ca:	8883      	ldrh	r3, [r0, #4]
 800d2cc:	b12b      	cbz	r3, 800d2da <RUC_Exec+0x12>
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	8083      	strh	r3, [r0, #4]
 800d2d4:	b10b      	cbz	r3, 800d2da <RUC_Exec+0x12>
 800d2d6:	2001      	movs	r0, #1
 800d2d8:	bd38      	pop	{r3, r4, r5, pc}
 800d2da:	6883      	ldr	r3, [r0, #8]
 800d2dc:	b33b      	cbz	r3, 800d32e <RUC_Exec+0x66>
 800d2de:	88c5      	ldrh	r5, [r0, #6]
 800d2e0:	8899      	ldrh	r1, [r3, #4]
 800d2e2:	881a      	ldrh	r2, [r3, #0]
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	fb11 f105 	smulbb	r1, r1, r5
 800d2ea:	b209      	sxth	r1, r1
 800d2ec:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800d2ee:	f7fe ffb5 	bl	800c25c <STC_ExecRamp>
 800d2f2:	68a3      	ldr	r3, [r4, #8]
 800d2f4:	88e5      	ldrh	r5, [r4, #6]
 800d2f6:	8859      	ldrh	r1, [r3, #2]
 800d2f8:	881a      	ldrh	r2, [r3, #0]
 800d2fa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800d2fc:	fb11 f105 	smulbb	r1, r1, r5
 800d300:	b209      	sxth	r1, r1
 800d302:	f7ff fea1 	bl	800d048 <VSS_SetMecAcceleration>
 800d306:	68a1      	ldr	r1, [r4, #8]
 800d308:	8823      	ldrh	r3, [r4, #0]
 800d30a:	880d      	ldrh	r5, [r1, #0]
 800d30c:	4809      	ldr	r0, [pc, #36]	; (800d334 <RUC_Exec+0x6c>)
 800d30e:	6889      	ldr	r1, [r1, #8]
 800d310:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800d314:	60a1      	str	r1, [r4, #8]
 800d316:	fb03 f305 	mul.w	r3, r3, r5
 800d31a:	fba0 1303 	umull	r1, r3, r0, r3
 800d31e:	3201      	adds	r2, #1
 800d320:	099b      	lsrs	r3, r3, #6
 800d322:	3301      	adds	r3, #1
 800d324:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 800d328:	80a3      	strh	r3, [r4, #4]
 800d32a:	2001      	movs	r0, #1
 800d32c:	bd38      	pop	{r3, r4, r5, pc}
 800d32e:	4618      	mov	r0, r3
 800d330:	bd38      	pop	{r3, r4, r5, pc}
 800d332:	bf00      	nop
 800d334:	10624dd3 	.word	0x10624dd3

0800d338 <RUC_FirstAccelerationStageReached>:
 800d338:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 800d33c:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 800d340:	4282      	cmp	r2, r0
 800d342:	bf34      	ite	cc
 800d344:	2000      	movcc	r0, #0
 800d346:	2001      	movcs	r0, #1
 800d348:	4770      	bx	lr
 800d34a:	bf00      	nop

0800d34c <RUC_SetPhaseDurationms>:
 800d34c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d350:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d354:	818a      	strh	r2, [r1, #12]
 800d356:	4770      	bx	lr

0800d358 <RUC_SetPhaseFinalMecSpeedUnit>:
 800d358:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d35c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d360:	81ca      	strh	r2, [r1, #14]
 800d362:	4770      	bx	lr

0800d364 <RUC_SetPhaseFinalTorque>:
 800d364:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d368:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d36c:	820a      	strh	r2, [r1, #16]
 800d36e:	4770      	bx	lr

0800d370 <RUC_GetPhaseDurationms>:
 800d370:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d374:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d378:	8988      	ldrh	r0, [r1, #12]
 800d37a:	4770      	bx	lr

0800d37c <RUC_GetPhaseFinalMecSpeedUnit>:
 800d37c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d380:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d384:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop

0800d38c <RUC_GetPhaseFinalTorque>:
 800d38c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d390:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d394:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 800d398:	4770      	bx	lr
 800d39a:	bf00      	nop

0800d39c <RUC_GetNumberOfPhases>:
 800d39c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800d3a0:	4770      	bx	lr
 800d3a2:	bf00      	nop

0800d3a4 <STO_PLL_CalcElAngle>:
 800d3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a8:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 800d3ac:	f8d0 c068 	ldr.w	ip, [r0, #104]	; 0x68
 800d3b0:	4604      	mov	r4, r0
 800d3b2:	03d8      	lsls	r0, r3, #15
 800d3b4:	1ac2      	subs	r2, r0, r3
 800d3b6:	4594      	cmp	ip, r2
 800d3b8:	b087      	sub	sp, #28
 800d3ba:	f340 80c4 	ble.w	800d546 <STO_PLL_CalcElAngle+0x1a2>
 800d3be:	66a2      	str	r2, [r4, #104]	; 0x68
 800d3c0:	4694      	mov	ip, r2
 800d3c2:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 800d3c6:	f8d4 e06c 	ldr.w	lr, [r4, #108]	; 0x6c
 800d3ca:	fa4c f605 	asr.w	r6, ip, r5
 800d3ce:	9602      	str	r6, [sp, #8]
 800d3d0:	4572      	cmp	r2, lr
 800d3d2:	b236      	sxth	r6, r6
 800d3d4:	9600      	str	r6, [sp, #0]
 800d3d6:	f280 80c8 	bge.w	800d56a <STO_PLL_CalcElAngle+0x1c6>
 800d3da:	66e2      	str	r2, [r4, #108]	; 0x6c
 800d3dc:	4696      	mov	lr, r2
 800d3de:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 800d3e2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800d3e4:	03de      	lsls	r6, r3, #15
 800d3e6:	fa4e f205 	asr.w	r2, lr, r5
 800d3ea:	1af5      	subs	r5, r6, r3
 800d3ec:	9203      	str	r2, [sp, #12]
 800d3ee:	42a8      	cmp	r0, r5
 800d3f0:	b212      	sxth	r2, r2
 800d3f2:	9201      	str	r2, [sp, #4]
 800d3f4:	f340 80b3 	ble.w	800d55e <STO_PLL_CalcElAngle+0x1ba>
 800d3f8:	6625      	str	r5, [r4, #96]	; 0x60
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d3fe:	4295      	cmp	r5, r2
 800d400:	f280 80a7 	bge.w	800d552 <STO_PLL_CalcElAngle+0x1ae>
 800d404:	6665      	str	r5, [r4, #100]	; 0x64
 800d406:	462a      	mov	r2, r5
 800d408:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 800d40c:	f8b1 9006 	ldrh.w	r9, [r1, #6]
 800d410:	888d      	ldrh	r5, [r1, #4]
 800d412:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
 800d416:	f8bd 7000 	ldrh.w	r7, [sp]
 800d41a:	f8b1 a008 	ldrh.w	sl, [r1, #8]
 800d41e:	f9b1 8000 	ldrsh.w	r8, [r1]
 800d422:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800d426:	f8a4 7070 	strh.w	r7, [r4, #112]	; 0x70
 800d42a:	fa40 f703 	asr.w	r7, r0, r3
 800d42e:	fa42 f303 	asr.w	r3, r2, r3
 800d432:	fb13 f10b 	smulbb	r1, r3, fp
 800d436:	1b7d      	subs	r5, r7, r5
 800d438:	eba3 0309 	sub.w	r3, r3, r9
 800d43c:	fb17 f70b 	smulbb	r7, r7, fp
 800d440:	f9b4 9022 	ldrsh.w	r9, [r4, #34]	; 0x22
 800d444:	f8bd b004 	ldrh.w	fp, [sp, #4]
 800d448:	f8a4 b072 	strh.w	fp, [r4, #114]	; 0x72
 800d44c:	1a51      	subs	r1, r2, r1
 800d44e:	b22d      	sxth	r5, r5
 800d450:	fb0a f208 	mul.w	r2, sl, r8
 800d454:	1bc0      	subs	r0, r0, r7
 800d456:	f9b4 8028 	ldrsh.w	r8, [r4, #40]	; 0x28
 800d45a:	8e67      	ldrh	r7, [r4, #50]	; 0x32
 800d45c:	f9b4 b124 	ldrsh.w	fp, [r4, #292]	; 0x124
 800d460:	fb09 0005 	mla	r0, r9, r5, r0
 800d464:	1412      	asrs	r2, r2, #16
 800d466:	fb08 0202 	mla	r2, r8, r2, r0
 800d46a:	9801      	ldr	r0, [sp, #4]
 800d46c:	f1bb 0f00 	cmp.w	fp, #0
 800d470:	b21b      	sxth	r3, r3
 800d472:	fa40 fb07 	asr.w	fp, r0, r7
 800d476:	fb0a f606 	mul.w	r6, sl, r6
 800d47a:	9800      	ldr	r0, [sp, #0]
 800d47c:	fb09 1a03 	mla	sl, r9, r3, r1
 800d480:	ea4f 4626 	mov.w	r6, r6, asr #16
 800d484:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 800d488:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 800d48c:	fb08 a606 	mla	r6, r8, r6, sl
 800d490:	fa40 f707 	asr.w	r7, r0, r7
 800d494:	f9b4 800e 	ldrsh.w	r8, [r4, #14]
 800d498:	f9b4 a024 	ldrsh.w	sl, [r4, #36]	; 0x24
 800d49c:	fb09 e303 	mla	r3, r9, r3, lr
 800d4a0:	fb07 f701 	mul.w	r7, r7, r1
 800d4a4:	fb01 fb0b 	mul.w	fp, r1, fp
 800d4a8:	fb07 3718 	mls	r7, r7, r8, r3
 800d4ac:	9900      	ldr	r1, [sp, #0]
 800d4ae:	9b01      	ldr	r3, [sp, #4]
 800d4b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d4b4:	fb05 c509 	mla	r5, r5, r9, ip
 800d4b8:	bfb8      	it	lt
 800d4ba:	4681      	movlt	r9, r0
 800d4bc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800d4c0:	bfa8      	it	ge
 800d4c2:	f04f 0901 	movge.w	r9, #1
 800d4c6:	fb0a 6613 	mls	r6, sl, r3, r6
 800d4ca:	fb08 550b 	mla	r5, r8, fp, r5
 800d4ce:	fb0a 2b11 	mls	fp, sl, r1, r2
 800d4d2:	f7f3 fdc3 	bl	800105c <MCM_Trig_Functions>
 800d4d6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d4da:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800d4de:	fb13 f309 	smulbb	r3, r3, r9
 800d4e2:	fb12 f109 	smulbb	r1, r2, r9
 800d4e6:	425b      	negs	r3, r3
 800d4e8:	fb10 f303 	smulbb	r3, r0, r3
 800d4ec:	fb10 f021 	smultb	r0, r0, r1
 800d4f0:	f343 33cf 	sbfx	r3, r3, #15, #16
 800d4f4:	f340 31cf 	sbfx	r1, r0, #15, #16
 800d4f8:	1a59      	subs	r1, r3, r1
 800d4fa:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800d4fe:	f7fc f917 	bl	8009730 <PI_Controller>
 800d502:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 800d506:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 800d50a:	8220      	strh	r0, [r4, #16]
 800d50c:	3301      	adds	r3, #1
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	429a      	cmp	r2, r3
 800d512:	bf0a      	itet	eq
 800d514:	2200      	moveq	r2, #0
 800d516:	461a      	movne	r2, r3
 800d518:	4613      	moveq	r3, r2
 800d51a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800d51e:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 800d522:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 800d526:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 800d52a:	88a2      	ldrh	r2, [r4, #4]
 800d52c:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 800d530:	4410      	add	r0, r2
 800d532:	b200      	sxth	r0, r0
 800d534:	f8c4 b060 	str.w	fp, [r4, #96]	; 0x60
 800d538:	66a5      	str	r5, [r4, #104]	; 0x68
 800d53a:	6666      	str	r6, [r4, #100]	; 0x64
 800d53c:	66e7      	str	r7, [r4, #108]	; 0x6c
 800d53e:	80a0      	strh	r0, [r4, #4]
 800d540:	b007      	add	sp, #28
 800d542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d546:	1a1d      	subs	r5, r3, r0
 800d548:	45ac      	cmp	ip, r5
 800d54a:	bfdc      	itt	le
 800d54c:	66a5      	strle	r5, [r4, #104]	; 0x68
 800d54e:	46ac      	movle	ip, r5
 800d550:	e737      	b.n	800d3c2 <STO_PLL_CalcElAngle+0x1e>
 800d552:	1b9b      	subs	r3, r3, r6
 800d554:	429a      	cmp	r2, r3
 800d556:	bfdc      	itt	le
 800d558:	6663      	strle	r3, [r4, #100]	; 0x64
 800d55a:	461a      	movle	r2, r3
 800d55c:	e754      	b.n	800d408 <STO_PLL_CalcElAngle+0x64>
 800d55e:	1b9a      	subs	r2, r3, r6
 800d560:	4290      	cmp	r0, r2
 800d562:	bfdc      	itt	le
 800d564:	6622      	strle	r2, [r4, #96]	; 0x60
 800d566:	4610      	movle	r0, r2
 800d568:	e748      	b.n	800d3fc <STO_PLL_CalcElAngle+0x58>
 800d56a:	1a1b      	subs	r3, r3, r0
 800d56c:	459e      	cmp	lr, r3
 800d56e:	bfdc      	itt	le
 800d570:	66e3      	strle	r3, [r4, #108]	; 0x6c
 800d572:	469e      	movle	lr, r3
 800d574:	e733      	b.n	800d3de <STO_PLL_CalcElAngle+0x3a>
 800d576:	bf00      	nop

0800d578 <STO_PLL_CalcAvrgMecSpeedUnit>:
 800d578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d57a:	f890 710e 	ldrb.w	r7, [r0, #270]	; 0x10e
 800d57e:	2f00      	cmp	r7, #0
 800d580:	f000 8099 	beq.w	800d6b6 <STO_PLL_CalcAvrgMecSpeedUnit+0x13e>
 800d584:	1e7e      	subs	r6, r7, #1
 800d586:	b2f6      	uxtb	r6, r6
 800d588:	363a      	adds	r6, #58	; 0x3a
 800d58a:	f100 0472 	add.w	r4, r0, #114	; 0x72
 800d58e:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800d592:	4622      	mov	r2, r4
 800d594:	2300      	movs	r3, #0
 800d596:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 800d59a:	4296      	cmp	r6, r2
 800d59c:	442b      	add	r3, r5
 800d59e:	d1fa      	bne.n	800d596 <STO_PLL_CalcAvrgMecSpeedUnit+0x1e>
 800d5a0:	2500      	movs	r5, #0
 800d5a2:	fb93 f6f7 	sdiv	r6, r3, r7
 800d5a6:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 800d5aa:	1b9b      	subs	r3, r3, r6
 800d5ac:	42a2      	cmp	r2, r4
 800d5ae:	fb03 5503 	mla	r5, r3, r3, r5
 800d5b2:	d1f8      	bne.n	800d5a6 <STO_PLL_CalcAvrgMecSpeedUnit+0x2e>
 800d5b4:	fb95 f5f7 	sdiv	r5, r5, r7
 800d5b8:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 800d5bc:	8b43      	ldrh	r3, [r0, #26]
 800d5be:	7884      	ldrb	r4, [r0, #2]
 800d5c0:	f890 7104 	ldrb.w	r7, [r0, #260]	; 0x104
 800d5c4:	fb06 fe06 	mul.w	lr, r6, r6
 800d5c8:	fb02 f20e 	mul.w	r2, r2, lr
 800d5cc:	11d2      	asrs	r2, r2, #7
 800d5ce:	fb06 f303 	mul.w	r3, r6, r3
 800d5d2:	42aa      	cmp	r2, r5
 800d5d4:	fb03 f304 	mul.w	r3, r3, r4
 800d5d8:	bfd8      	it	le
 800d5da:	2600      	movle	r6, #0
 800d5dc:	69c4      	ldr	r4, [r0, #28]
 800d5de:	fb93 f3f4 	sdiv	r3, r3, r4
 800d5e2:	bfc8      	it	gt
 800d5e4:	2601      	movgt	r6, #1
 800d5e6:	7844      	ldrb	r4, [r0, #1]
 800d5e8:	fb93 f3f4 	sdiv	r3, r3, r4
 800d5ec:	b21c      	sxth	r4, r3
 800d5ee:	800c      	strh	r4, [r1, #0]
 800d5f0:	8184      	strh	r4, [r0, #12]
 800d5f2:	f880 60f5 	strb.w	r6, [r0, #245]	; 0xf5
 800d5f6:	b1b7      	cbz	r7, 800d626 <STO_PLL_CalcAvrgMecSpeedUnit+0xae>
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f8b0 411a 	ldrh.w	r4, [r0, #282]	; 0x11a
 800d5fe:	bfb8      	it	lt
 800d600:	425b      	neglt	r3, r3
 800d602:	42a3      	cmp	r3, r4
 800d604:	db30      	blt.n	800d668 <STO_PLL_CalcAvrgMecSpeedUnit+0xf0>
 800d606:	2300      	movs	r3, #0
 800d608:	461c      	mov	r4, r3
 800d60a:	461e      	mov	r6, r3
 800d60c:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
 800d610:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
 800d614:	f880 30f9 	strb.w	r3, [r0, #249]	; 0xf9
 800d618:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 800d61c:	b944      	cbnz	r4, 800d630 <STO_PLL_CalcAvrgMecSpeedUnit+0xb8>
 800d61e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d622:	f7fe bd03 	b.w	800c02c <SPD_IsMecSpeedReliable>
 800d626:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
 800d62a:	2301      	movs	r3, #1
 800d62c:	2c00      	cmp	r4, #0
 800d62e:	d0f6      	beq.n	800d61e <STO_PLL_CalcAvrgMecSpeedUnit+0xa6>
 800d630:	42aa      	cmp	r2, r5
 800d632:	dc10      	bgt.n	800d656 <STO_PLL_CalcAvrgMecSpeedUnit+0xde>
 800d634:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 800d638:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 800d63c:	3301      	adds	r3, #1
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	429a      	cmp	r2, r3
 800d642:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800d646:	d8ea      	bhi.n	800d61e <STO_PLL_CalcAvrgMecSpeedUnit+0xa6>
 800d648:	2300      	movs	r3, #0
 800d64a:	78c2      	ldrb	r2, [r0, #3]
 800d64c:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800d650:	7002      	strb	r2, [r0, #0]
 800d652:	4618      	mov	r0, r3
 800d654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d656:	2b00      	cmp	r3, #0
 800d658:	d0ec      	beq.n	800d634 <STO_PLL_CalcAvrgMecSpeedUnit+0xbc>
 800d65a:	2300      	movs	r3, #0
 800d65c:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800d660:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d664:	f7fe bce2 	b.w	800c02c <SPD_IsMecSpeedReliable>
 800d668:	f890 4119 	ldrb.w	r4, [r0, #281]	; 0x119
 800d66c:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 800d670:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	; 0x72
 800d674:	f9b0 6070 	ldrsh.w	r6, [r0, #112]	; 0x70
 800d678:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800d67c:	fb93 f3fe 	sdiv	r3, r3, lr
 800d680:	fb03 f404 	mul.w	r4, r3, r4
 800d684:	2c00      	cmp	r4, #0
 800d686:	bfb8      	it	lt
 800d688:	343f      	addlt	r4, #63	; 0x3f
 800d68a:	11a4      	asrs	r4, r4, #6
 800d68c:	fb04 f403 	mul.w	r4, r4, r3
 800d690:	fb07 f707 	mul.w	r7, r7, r7
 800d694:	2c00      	cmp	r4, #0
 800d696:	fb06 7606 	mla	r6, r6, r6, r7
 800d69a:	4623      	mov	r3, r4
 800d69c:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 800d6a0:	bfb8      	it	lt
 800d6a2:	f104 033f 	addlt.w	r3, r4, #63	; 0x3f
 800d6a6:	119b      	asrs	r3, r3, #6
 800d6a8:	fb07 4313 	mls	r3, r7, r3, r4
 800d6ac:	429e      	cmp	r6, r3
 800d6ae:	bfd4      	ite	le
 800d6b0:	2300      	movle	r3, #0
 800d6b2:	2301      	movgt	r3, #1
 800d6b4:	e7aa      	b.n	800d60c <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
 800d6b6:	463d      	mov	r5, r7
 800d6b8:	463e      	mov	r6, r7
 800d6ba:	e77d      	b.n	800d5b8 <STO_PLL_CalcAvrgMecSpeedUnit+0x40>

0800d6bc <STO_PLL_CalcAvrgElSpeedDpp>:
 800d6bc:	b470      	push	{r4, r5, r6}
 800d6be:	f890 510e 	ldrb.w	r5, [r0, #270]	; 0x10e
 800d6c2:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 800d6c6:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
 800d6ca:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
 800d6ce:	b2ae      	uxth	r6, r5
 800d6d0:	1af3      	subs	r3, r6, r3
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	b1c3      	cbz	r3, 800d708 <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 800d6d6:	4413      	add	r3, r2
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	b219      	sxth	r1, r3
 800d6dc:	428d      	cmp	r5, r1
 800d6de:	bfdc      	itt	le
 800d6e0:	1b9b      	suble	r3, r3, r6
 800d6e2:	b219      	sxthle	r1, r3
 800d6e4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800d6e8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800d6ec:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 800d6f0:	f9b1 2074 	ldrsh.w	r2, [r1, #116]	; 0x74
 800d6f4:	4423      	add	r3, r4
 800d6f6:	1a9b      	subs	r3, r3, r2
 800d6f8:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 800d6fc:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800d700:	4113      	asrs	r3, r2
 800d702:	81c3      	strh	r3, [r0, #14]
 800d704:	bc70      	pop	{r4, r5, r6}
 800d706:	4770      	bx	lr
 800d708:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800d70c:	f9b0 110c 	ldrsh.w	r1, [r0, #268]	; 0x10c
 800d710:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 800d714:	4423      	add	r3, r4
 800d716:	1a5b      	subs	r3, r3, r1
 800d718:	e7ee      	b.n	800d6f8 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
 800d71a:	bf00      	nop

0800d71c <STO_PLL_Clear>:
 800d71c:	b510      	push	{r4, lr}
 800d71e:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 800d722:	2100      	movs	r1, #0
 800d724:	4604      	mov	r4, r0
 800d726:	6601      	str	r1, [r0, #96]	; 0x60
 800d728:	6641      	str	r1, [r0, #100]	; 0x64
 800d72a:	6681      	str	r1, [r0, #104]	; 0x68
 800d72c:	66c1      	str	r1, [r0, #108]	; 0x6c
 800d72e:	8081      	strh	r1, [r0, #4]
 800d730:	81c1      	strh	r1, [r0, #14]
 800d732:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
 800d736:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
 800d73a:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 800d73e:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 800d742:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 800d746:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 800d74a:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 800d74e:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 800d752:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 800d756:	b132      	cbz	r2, 800d766 <STO_PLL_Clear+0x4a>
 800d758:	3a01      	subs	r2, #1
 800d75a:	b2d2      	uxtb	r2, r2
 800d75c:	3201      	adds	r2, #1
 800d75e:	0052      	lsls	r2, r2, #1
 800d760:	3074      	adds	r0, #116	; 0x74
 800d762:	f000 f927 	bl	800d9b4 <memset>
 800d766:	2100      	movs	r1, #0
 800d768:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 800d76c:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 800d770:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800d774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d778:	f7fb bf97 	b.w	80096aa <PID_SetIntegralTerm>

0800d77c <STO_PLL_Init>:
 800d77c:	b538      	push	{r3, r4, r5, lr}
 800d77e:	4604      	mov	r4, r0
 800d780:	2101      	movs	r1, #1
 800d782:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 800d786:	f9b4 502e 	ldrsh.w	r5, [r4, #46]	; 0x2e
 800d78a:	4b16      	ldr	r3, [pc, #88]	; (800d7e4 <STO_PLL_Init+0x68>)
 800d78c:	fb93 f3f5 	sdiv	r3, r3, r5
 800d790:	2200      	movs	r2, #0
 800d792:	b21b      	sxth	r3, r3
 800d794:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 800d798:	8662      	strh	r2, [r4, #50]	; 0x32
 800d79a:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 800d79e:	4608      	mov	r0, r1
 800d7a0:	b90b      	cbnz	r3, 800d7a6 <STO_PLL_Init+0x2a>
 800d7a2:	e00b      	b.n	800d7bc <STO_PLL_Init+0x40>
 800d7a4:	4611      	mov	r1, r2
 800d7a6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800d7aa:	1c4a      	adds	r2, r1, #1
 800d7ac:	105b      	asrs	r3, r3, #1
 800d7ae:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800d7b2:	b292      	uxth	r2, r2
 800d7b4:	d1f6      	bne.n	800d7a4 <STO_PLL_Init+0x28>
 800d7b6:	b200      	sxth	r0, r0
 800d7b8:	8661      	strh	r1, [r4, #50]	; 0x32
 800d7ba:	4601      	mov	r1, r0
 800d7bc:	4b0a      	ldr	r3, [pc, #40]	; (800d7e8 <STO_PLL_Init+0x6c>)
 800d7be:	8620      	strh	r0, [r4, #48]	; 0x30
 800d7c0:	fb01 f105 	mul.w	r1, r1, r5
 800d7c4:	fb83 2301 	smull	r2, r3, r3, r1
 800d7c8:	17c9      	asrs	r1, r1, #31
 800d7ca:	ebc1 2123 	rsb	r1, r1, r3, asr #8
 800d7ce:	8561      	strh	r1, [r4, #42]	; 0x2a
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	f7ff ffa3 	bl	800d71c <STO_PLL_Clear>
 800d7d6:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800d7da:	f7fb ff0f 	bl	80095fc <PID_HandleInit>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	8263      	strh	r3, [r4, #18]
 800d7e2:	bd38      	pop	{r3, r4, r5, pc}
 800d7e4:	000fea5e 	.word	0x000fea5e
 800d7e8:	06488dc5 	.word	0x06488dc5

0800d7ec <STO_PLL_IsObserverConverged>:
 800d7ec:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
 800d7f0:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	b10a      	cbz	r2, 800d7fc <STO_PLL_IsObserverConverged+0x10>
 800d7f8:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800d7fc:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 800d800:	2800      	cmp	r0, #0
 800d802:	d143      	bne.n	800d88c <STO_PLL_IsObserverConverged+0xa0>
 800d804:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800d808:	b430      	push	{r4, r5}
 800d80a:	fb02 f501 	mul.w	r5, r2, r1
 800d80e:	2d00      	cmp	r5, #0
 800d810:	460c      	mov	r4, r1
 800d812:	dd34      	ble.n	800d87e <STO_PLL_IsObserverConverged+0x92>
 800d814:	2a00      	cmp	r2, #0
 800d816:	bfbc      	itt	lt
 800d818:	4252      	neglt	r2, r2
 800d81a:	b212      	sxthlt	r2, r2
 800d81c:	2900      	cmp	r1, #0
 800d81e:	bfbc      	itt	lt
 800d820:	4249      	neglt	r1, r1
 800d822:	b20c      	sxthlt	r4, r1
 800d824:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
 800d828:	b359      	cbz	r1, 800d882 <STO_PLL_IsObserverConverged+0x96>
 800d82a:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 800d82e:	b291      	uxth	r1, r2
 800d830:	428d      	cmp	r5, r1
 800d832:	d226      	bcs.n	800d882 <STO_PLL_IsObserverConverged+0x96>
 800d834:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
 800d838:	fb04 f101 	mul.w	r1, r4, r1
 800d83c:	2900      	cmp	r1, #0
 800d83e:	bfb8      	it	lt
 800d840:	310f      	addlt	r1, #15
 800d842:	f341 110f 	sbfx	r1, r1, #4, #16
 800d846:	428a      	cmp	r2, r1
 800d848:	db1b      	blt.n	800d882 <STO_PLL_IsObserverConverged+0x96>
 800d84a:	f893 1112 	ldrb.w	r1, [r3, #274]	; 0x112
 800d84e:	fb04 f101 	mul.w	r1, r4, r1
 800d852:	2900      	cmp	r1, #0
 800d854:	bfb8      	it	lt
 800d856:	310f      	addlt	r1, #15
 800d858:	f341 110f 	sbfx	r1, r1, #4, #16
 800d85c:	428a      	cmp	r2, r1
 800d85e:	dc10      	bgt.n	800d882 <STO_PLL_IsObserverConverged+0x96>
 800d860:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 800d864:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
 800d868:	3201      	adds	r2, #1
 800d86a:	b2d2      	uxtb	r2, r2
 800d86c:	4291      	cmp	r1, r2
 800d86e:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800d872:	d804      	bhi.n	800d87e <STO_PLL_IsObserverConverged+0x92>
 800d874:	2001      	movs	r0, #1
 800d876:	2200      	movs	r2, #0
 800d878:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 800d87c:	701a      	strb	r2, [r3, #0]
 800d87e:	bc30      	pop	{r4, r5}
 800d880:	4770      	bx	lr
 800d882:	2200      	movs	r2, #0
 800d884:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800d888:	bc30      	pop	{r4, r5}
 800d88a:	4770      	bx	lr
 800d88c:	2001      	movs	r0, #1
 800d88e:	2200      	movs	r2, #0
 800d890:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 800d894:	701a      	strb	r2, [r3, #0]
 800d896:	4770      	bx	lr

0800d898 <STO_PLL_GetEstimatedBemf>:
 800d898:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800d89a:	2000      	movs	r0, #0
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	f362 000f 	bfi	r0, r2, #0, #16
 800d8a2:	0c1b      	lsrs	r3, r3, #16
 800d8a4:	f363 401f 	bfi	r0, r3, #16, #16
 800d8a8:	b082      	sub	sp, #8
 800d8aa:	b002      	add	sp, #8
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop

0800d8b0 <STO_PLL_GetEstimatedCurrent>:
 800d8b0:	b410      	push	{r4}
 800d8b2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800d8b4:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 800d8b8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800d8ba:	4122      	asrs	r2, r4
 800d8bc:	b292      	uxth	r2, r2
 800d8be:	4123      	asrs	r3, r4
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	f362 010f 	bfi	r1, r2, #0, #16
 800d8c8:	f363 411f 	bfi	r1, r3, #16, #16
 800d8cc:	4608      	mov	r0, r1
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	b003      	add	sp, #12
 800d8d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <STO_PLL_GetObserverGains>:
 800d8d8:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800d8dc:	800b      	strh	r3, [r1, #0]
 800d8de:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 800d8e2:	8013      	strh	r3, [r2, #0]
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop

0800d8e8 <STO_PLL_SetObserverGains>:
 800d8e8:	8441      	strh	r1, [r0, #34]	; 0x22
 800d8ea:	84c2      	strh	r2, [r0, #38]	; 0x26
 800d8ec:	4770      	bx	lr
 800d8ee:	bf00      	nop

0800d8f0 <STO_GetPLLGains>:
 800d8f0:	b570      	push	{r4, r5, r6, lr}
 800d8f2:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	460e      	mov	r6, r1
 800d8fa:	4615      	mov	r5, r2
 800d8fc:	f7fb febb 	bl	8009676 <PID_GetKP>
 800d900:	8030      	strh	r0, [r6, #0]
 800d902:	4620      	mov	r0, r4
 800d904:	f7fb fec4 	bl	8009690 <PID_GetKI>
 800d908:	8028      	strh	r0, [r5, #0]
 800d90a:	bd70      	pop	{r4, r5, r6, pc}

0800d90c <STO_SetPLLGains>:
 800d90c:	b538      	push	{r3, r4, r5, lr}
 800d90e:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800d912:	4615      	mov	r5, r2
 800d914:	4620      	mov	r0, r4
 800d916:	f7fb fe90 	bl	800963a <PID_SetKP>
 800d91a:	4629      	mov	r1, r5
 800d91c:	4620      	mov	r0, r4
 800d91e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d922:	f7fb be99 	b.w	8009658 <PID_SetKI>
 800d926:	bf00      	nop

0800d928 <STO_OTF_ResetPLL>:
 800d928:	6800      	ldr	r0, [r0, #0]
 800d92a:	2100      	movs	r1, #0
 800d92c:	3034      	adds	r0, #52	; 0x34
 800d92e:	f7fb bebc 	b.w	80096aa <PID_SetIntegralTerm>
 800d932:	bf00      	nop

0800d934 <STO_ResetPLL>:
 800d934:	3034      	adds	r0, #52	; 0x34
 800d936:	2100      	movs	r1, #0
 800d938:	f7fb beb7 	b.w	80096aa <PID_SetIntegralTerm>

0800d93c <STO_PLL_GetEstimatedBemfLevel>:
 800d93c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 800d940:	4770      	bx	lr
 800d942:	bf00      	nop

0800d944 <STO_PLL_GetObservedBemfLevel>:
 800d944:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 800d948:	4770      	bx	lr
 800d94a:	bf00      	nop

0800d94c <STO_PLL_IsVarianceTight>:
 800d94c:	6803      	ldr	r3, [r0, #0]
 800d94e:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 800d952:	4770      	bx	lr

0800d954 <STO_PLL_ForceConvergency1>:
 800d954:	6803      	ldr	r3, [r0, #0]
 800d956:	2201      	movs	r2, #1
 800d958:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 800d95c:	4770      	bx	lr
 800d95e:	bf00      	nop

0800d960 <STO_PLL_ForceConvergency2>:
 800d960:	6803      	ldr	r3, [r0, #0]
 800d962:	2201      	movs	r2, #1
 800d964:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop

0800d96c <__libc_init_array>:
 800d96c:	b570      	push	{r4, r5, r6, lr}
 800d96e:	4e0d      	ldr	r6, [pc, #52]	; (800d9a4 <__libc_init_array+0x38>)
 800d970:	4c0d      	ldr	r4, [pc, #52]	; (800d9a8 <__libc_init_array+0x3c>)
 800d972:	1ba4      	subs	r4, r4, r6
 800d974:	10a4      	asrs	r4, r4, #2
 800d976:	2500      	movs	r5, #0
 800d978:	42a5      	cmp	r5, r4
 800d97a:	d109      	bne.n	800d990 <__libc_init_array+0x24>
 800d97c:	4e0b      	ldr	r6, [pc, #44]	; (800d9ac <__libc_init_array+0x40>)
 800d97e:	4c0c      	ldr	r4, [pc, #48]	; (800d9b0 <__libc_init_array+0x44>)
 800d980:	f000 f820 	bl	800d9c4 <_init>
 800d984:	1ba4      	subs	r4, r4, r6
 800d986:	10a4      	asrs	r4, r4, #2
 800d988:	2500      	movs	r5, #0
 800d98a:	42a5      	cmp	r5, r4
 800d98c:	d105      	bne.n	800d99a <__libc_init_array+0x2e>
 800d98e:	bd70      	pop	{r4, r5, r6, pc}
 800d990:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d994:	4798      	blx	r3
 800d996:	3501      	adds	r5, #1
 800d998:	e7ee      	b.n	800d978 <__libc_init_array+0xc>
 800d99a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d99e:	4798      	blx	r3
 800d9a0:	3501      	adds	r5, #1
 800d9a2:	e7f2      	b.n	800d98a <__libc_init_array+0x1e>
 800d9a4:	0800dcd4 	.word	0x0800dcd4
 800d9a8:	0800dcd4 	.word	0x0800dcd4
 800d9ac:	0800dcd4 	.word	0x0800dcd4
 800d9b0:	0800dcd8 	.word	0x0800dcd8

0800d9b4 <memset>:
 800d9b4:	4402      	add	r2, r0
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d100      	bne.n	800d9be <memset+0xa>
 800d9bc:	4770      	bx	lr
 800d9be:	f803 1b01 	strb.w	r1, [r3], #1
 800d9c2:	e7f9      	b.n	800d9b8 <memset+0x4>

0800d9c4 <_init>:
 800d9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c6:	bf00      	nop
 800d9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9ca:	bc08      	pop	{r3}
 800d9cc:	469e      	mov	lr, r3
 800d9ce:	4770      	bx	lr

0800d9d0 <_fini>:
 800d9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d2:	bf00      	nop
 800d9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9d6:	bc08      	pop	{r3}
 800d9d8:	469e      	mov	lr, r3
 800d9da:	4770      	bx	lr
